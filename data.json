{
    "experiments/1": [
        {
            "typology": "1",
            "path": "experiments/1/2024-10-23-17-49-21",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['event_type'] == 'object added':\n        belief_set[event['object_type']] = event['object']\n    elif event['event_type'] == 'object changed':\n        belief_set[event['object_type']].update(event['object'])\n    elif event['event_type'] == 'object removed':\n        del belief_set[event['object_type']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 4
                            },
                            "mi": {
                                "mi": 69.94141346234306,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 8,
                                "sloc": 8,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 25.26619429851844,
                                "difficulty": 0.5,
                                "effort": 12.63309714925922,
                                "time": 0.701838730514401,
                                "bugs": 0.008422064766172813
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_2(event, belief_set):\n    if 'parcel' not in belief_set:\n        belief_set['parcel'] = {}\n    if event['event_type'] == 'object added':\n        belief_set['parcel'][event['object']['id']] = event['object']\n    elif event['event_type'] == 'object changed':\n        belief_set['parcel'][event['object']['id']].update(event['object'])\n    elif event['event_type'] == 'object removed':\n        del belief_set['parcel'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.30629883759347,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 10,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 39.863137138648355,
                                "difficulty": 1.0,
                                "effort": 39.863137138648355,
                                "time": 2.2146187299249087,
                                "bugs": 0.013287712379549451
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['agent'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            belief_set.pop('agent', None)\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to efficiently navigate through the environment, collect as many parcels as possible from the spawn area, and deliver them to the delivery cell to maximize the overall score.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The short term goal is to navigate the agent towards the closest parcel and pick it up to carry.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    agent_coords = belief_set['agent']['coordinates']\n    parcel_coords = belief_set['parcel'][1]['coordinates']\n    if agent_coords[0] > parcel_coords[0]:\n        function_1()\n    elif agent_coords[0] < parcel_coords[0]:\n        function_2()\n    if agent_coords[1] > parcel_coords[1]:\n        function_3()\n    elif agent_coords[1] < parcel_coords[1]:\n        function_4()\n    else:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 63.118667122234626,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 39.863137138648355,
                                    "difficulty": 1.0,
                                    "effort": 39.863137138648355,
                                    "time": 2.2146187299249087,
                                    "bugs": 0.013287712379549451
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The short term goal is to move towards the parcel spawn area, pick up a parcel, and then move towards the delivery cell to deliver the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    spawn = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if\n        cell['cell_type'] == 'parcels_spawn'][0]\n    delivery = [cell['cell_coordinates'] for cell in belief_set['map'][\n        'grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    agent = belief_set['agent']['coordinates']\n    while agent != spawn:\n        if agent[0] < spawn[0]:\n            function_2()\n        elif agent[0] > spawn[0]:\n            function_1()\n        elif agent[1] < spawn[1]:\n            function_4()\n        elif agent[1] > spawn[1]:\n            function_3()\n    function_5()\n    while agent != delivery:\n        if agent[0] < delivery[0]:\n            function_2()\n        elif agent[0] > delivery[0]:\n            function_1()\n        elif agent[1] < delivery[1]:\n            function_4()\n        elif agent[1] > delivery[1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 15
                                },
                                "mi": {
                                    "mi": 51.84924758213903,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 25,
                                    "sloc": 27,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 171.1759500778849,
                                    "difficulty": 2.0869565217391304,
                                    "effort": 357.2367653799337,
                                    "time": 19.846486965551872,
                                    "bugs": 0.05705865002596163
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short term goal of the agent is to move towards the delivery cell while carrying a parcel, check if it's at the delivery cell, and if it is, deliver the parcel.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    agent = belief_set['agent']\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    while agent['coordinates'] != delivery_cell:\n        if agent['coordinates'][0] < delivery_cell[0]:\n            function_2()\n            agent['coordinates'][0] += 1\n        elif agent['coordinates'][0] > delivery_cell[0]:\n            function_1()\n            agent['coordinates'][0] -= 1\n        elif agent['coordinates'][1] < delivery_cell[1]:\n            function_4()\n            agent['coordinates'][1] += 1\n        elif agent['coordinates'][1] > delivery_cell[1]:\n            function_3()\n            agent['coordinates'][1] -= 1\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 56.65242121818314,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 19,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 133.78294855911892,
                                    "difficulty": 3.75,
                                    "effort": 501.68605709669595,
                                    "time": 27.87144761648311,
                                    "bugs": 0.044594316186372975
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": "def function_dtf_1(belief_set):\n    if belief_set['parcel'] and any(cell['cell_type'] == 'parcels_spawn' for\n        cell in belief_set['map']['grid']):\n        return True\n    else:\n        return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 4
                        },
                        "mi": {
                            "mi": 75.8780464160744,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 5,
                            "sloc": 6,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 15.509775004326936,
                            "difficulty": 1.0,
                            "effort": 15.509775004326936,
                            "time": 0.861654166907052,
                            "bugs": 0.005169925001442312
                        }
                    }
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "8": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "9": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "1",
            "path": "experiments/1/2024-10-23-17-59-47",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['map'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcels' not in belief_set:\n                belief_set['parcels'] = {}\n            belief_set['parcels'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                belief_set['parcels'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                del belief_set['parcels'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.17653230125827,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['agent'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            belief_set.pop('agent', None)\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The long term goal of the agent is to map the most efficient route from the parcel spawn location to the delivery cell, avoiding all non-walkable areas, and maximizing the score by delivering as many parcels as possible.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The short term goal is to navigate the agent towards the parcel spawn location and pick up a parcel.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']\n    agent_pos = belief_set['agent']['coordinates']\n    while agent_pos[0] > parcel_spawn[0]:\n        function_1()\n        agent_pos[0] -= 1\n    while agent_pos[0] < parcel_spawn[0]:\n        function_2()\n        agent_pos[0] += 1\n    while agent_pos[1] > parcel_spawn[1]:\n        function_3()\n        agent_pos[1] -= 1\n    while agent_pos[1] < parcel_spawn[1]:\n        function_4()\n        agent_pos[1] += 1\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 57.74406063985052,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 116.69205856195879,
                                    "difficulty": 3.0,
                                    "effort": 350.07617568587636,
                                    "time": 19.44867642699313,
                                    "bugs": 0.03889735285398626
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The short term goal is to navigate the agent towards the delivery cell and deliver the parcels it's carrying.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    delivery_cell_coordinates = [cell['cell_coordinates'] for cell in\n        belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    while belief_set['agent']['coordinates'] != delivery_cell_coordinates:\n        if belief_set['agent']['coordinates'][0] < delivery_cell_coordinates[0\n            ]:\n            function_2()\n        elif belief_set['agent']['coordinates'][0] > delivery_cell_coordinates[\n            0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][1] < delivery_cell_coordinates[\n            1]:\n            function_4()\n        elif belief_set['agent']['coordinates'][1] > delivery_cell_coordinates[\n            1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 61.61938981885358,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 13,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 72.0,
                                    "difficulty": 2.0,
                                    "effort": 144.0,
                                    "time": 8.0,
                                    "bugs": 0.024
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": "def function_dtf_1(belief_set):\n    if 'parcels' in belief_set and belief_set['parcels'] != {}:\n        return True\n    else:\n        return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 3
                        },
                        "mi": {
                            "mi": 74.15921449524915,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 5,
                            "sloc": 5,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 28.529325012980813,
                            "difficulty": 1.5,
                            "effort": 42.793987519471216,
                            "time": 2.377443751081734,
                            "bugs": 0.009509775004326938
                        }
                    }
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 3,
                    "intentions": {
                        "7": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "8": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "1",
            "path": "experiments/1/2024-10-23-17-41-27",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['map'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcels' not in belief_set:\n                belief_set['parcels'] = {}\n            belief_set['parcels'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                belief_set['parcels'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                del belief_set['parcels'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.17653230125827,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = event['object']\n        elif event['event_type'] == 'object changed':\n            for key, value in event['object'].items():\n                belief_set['agent'][key] = value\n        elif event['event_type'] == 'object removed':\n            del belief_set['agent']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 6
                            },
                            "mi": {
                                "mi": 66.31422554681617,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 10,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to strategically plan and optimize its path in order to deliver as many parcels as possible while maximizing the total score.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The short term goal is for the agent to move towards the parcel spawn location, pick up a parcel, and then move towards the delivery cell to deliver the parcel.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    spawn_location = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']\n    delivery_location = [cell for cell in belief_set['map']['grid'] if cell\n        ['cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    while belief_set['agent']['coordinates'] != spawn_location:\n        if belief_set['agent']['coordinates'][0] < spawn_location[0]:\n            function_2()\n        elif belief_set['agent']['coordinates'][0] > spawn_location[0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][1] < spawn_location[1]:\n            function_4()\n        elif belief_set['agent']['coordinates'][1] > spawn_location[1]:\n            function_3()\n    function_5()\n    while belief_set['agent']['coordinates'] != delivery_location:\n        if belief_set['agent']['coordinates'][0] < delivery_location[0]:\n            function_2()\n        elif belief_set['agent']['coordinates'][0] > delivery_location[0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][1] < delivery_location[1]:\n            function_4()\n        elif belief_set['agent']['coordinates'][1] > delivery_location[1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 15
                                },
                                "mi": {
                                    "mi": 52.202611088443604,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 24,
                                    "sloc": 26,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 173.06477719407374,
                                    "difficulty": 2.0,
                                    "effort": 346.1295543881475,
                                    "time": 19.229419688230415,
                                    "bugs": 0.057688259064691244
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": "def function_dtf_1(belief_set):\n    if 'parcels' in belief_set and belief_set['parcels'\n        ] and 'agent' in belief_set and belief_set['agent']['score'] < sum(\n        parcel['score'] for parcel in belief_set['parcels'].values()):\n        return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 6
                        },
                        "mi": {
                            "mi": 74.15195530019537,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 4,
                            "sloc": 6,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 50.18947501009619,
                            "difficulty": 1.6666666666666667,
                            "effort": 83.64912501682699,
                            "time": 4.647173612045943,
                            "bugs": 0.016729825003365395
                        }
                    }
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        }
    ],
    "experiments/2": [
        {
            "typology": "2",
            "path": "experiments/2/2024-10-23-18-06-24",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['map'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcel' not in belief_set:\n                belief_set['parcel'] = {}\n            belief_set['parcel'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'parcel' in belief_set and event['object']['id'] in belief_set[\n                'parcel']:\n                belief_set['parcel'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'parcel' in belief_set and event['object']['id'] in belief_set[\n                'parcel']:\n                del belief_set['parcel'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.22264609466714,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 144.94647495169912,
                                "difficulty": 2.588235294117647,
                                "effort": 375.15558222792714,
                                "time": 20.8419767904404,
                                "bugs": 0.048315491650566374
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['agent'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['agent']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] == 'key':\n        if event['event_type'] == 'object added':\n            belief_set['key'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            belief_set['key'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object removed':\n            del belief_set['key'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.44872847079279,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_5(event, belief_set):\n    if 'door' in belief_set.keys():\n        doors = belief_set['door']\n    else:\n        doors = {}\n    if event['event_type'] == 'object added':\n        doors[event['object']['id']] = event['object']\n        belief_set['door'] = doors\n    elif event['event_type'] == 'object changed':\n        if event['object']['id'] in doors.keys():\n            doors[event['object']['id']] = event['object']\n            belief_set['door'] = doors\n    elif event['event_type'] == 'object removed':\n        if event['object']['id'] in doors.keys():\n            del doors[event['object']['id']]\n            belief_set['door'] = doors\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 7
                            },
                            "mi": {
                                "mi": 59.36254399740484,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 17,
                                "sloc": 17,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 68.53238859703687,
                                "difficulty": 1.0,
                                "effort": 68.53238859703687,
                                "time": 3.8073549220576037,
                                "bugs": 0.022844129532345624
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The long term goal is to gather all parcels and deliver them to the delivery cell while avoiding non-walkable cells, also making use of keys to open doors if necessary.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The short term goal is to move the agent towards the parcel by one cell if the parcel is not in the same cell as the agent.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    agent_coordinates = belief_set['agent']['coordinates']\n    parcel_coordinates = belief_set['parcel'][1]['coordinates']\n    if agent_coordinates[0] > parcel_coordinates[0]:\n        function_1()\n    elif agent_coordinates[0] < parcel_coordinates[0]:\n        function_2()\n    elif agent_coordinates[1] > parcel_coordinates[1]:\n        function_3()\n    elif agent_coordinates[1] < parcel_coordinates[1]:\n        function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 64.579041983756,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 12,
                                    "sloc": 12,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 39.863137138648355,
                                    "difficulty": 1.0,
                                    "effort": 39.863137138648355,
                                    "time": 2.2146187299249087,
                                    "bugs": 0.013287712379549451
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The short term goal is to move towards the parcel, pick it up, and then proceed towards the delivery cell to drop the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    while belief_set['agent']['coordinates'][0] > belief_set['parcel'][1][\n        'coordinates'][0]:\n        function_1()\n    while belief_set['agent']['coordinates'][0] < belief_set['parcel'][1][\n        'coordinates'][0]:\n        function_2()\n    while belief_set['agent']['coordinates'][1] > belief_set['parcel'][1][\n        'coordinates'][1]:\n        function_3()\n    while belief_set['agent']['coordinates'][1] < belief_set['parcel'][1][\n        'coordinates'][1]:\n        function_4()\n    function_5()\n    while belief_set['agent']['coordinates'][0] > belief_set['map']['grid'][7][\n        'cell_coordinates'][0]:\n        function_1()\n    while belief_set['agent']['coordinates'][0] < belief_set['map']['grid'][7][\n        'cell_coordinates'][0]:\n        function_2()\n    while belief_set['agent']['coordinates'][1] > belief_set['map']['grid'][7][\n        'cell_coordinates'][1]:\n        function_3()\n    while belief_set['agent']['coordinates'][1] < belief_set['map']['grid'][7][\n        'cell_coordinates'][1]:\n        function_4()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 56.40244876527641,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 20,
                                    "sloc": 28,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 100.07820003461549,
                                    "difficulty": 1.0,
                                    "effort": 100.07820003461549,
                                    "time": 5.559900001923083,
                                    "bugs": 0.0333594000115385
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short term goal is to move the agent towards the parcel if it is not carrying any, pick it up, and then proceed towards the delivery cell to drop the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    parcel_coordinates = belief_set['parcel'][1]['coordinates']\n    agent_coordinates = belief_set['agent']['coordinates']\n    delivery_coordinates = [i for i in belief_set['map']['grid'] if i[\n        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    while agent_coordinates != parcel_coordinates:\n        if agent_coordinates[0] < parcel_coordinates[0]:\n            function_2()\n        elif agent_coordinates[0] > parcel_coordinates[0]:\n            function_1()\n        elif agent_coordinates[1] < parcel_coordinates[1]:\n            function_4()\n        elif agent_coordinates[1] > parcel_coordinates[1]:\n            function_3()\n        agent_coordinates = belief_set['agent']['coordinates']\n    function_5()\n    while agent_coordinates != delivery_coordinates:\n        if agent_coordinates[0] < delivery_coordinates[0]:\n            function_2()\n        elif agent_coordinates[0] > delivery_coordinates[0]:\n            function_1()\n        elif agent_coordinates[1] < delivery_coordinates[1]:\n            function_4()\n        elif agent_coordinates[1] > delivery_coordinates[1]:\n            function_3()\n        agent_coordinates = belief_set['agent']['coordinates']\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 51.725595876881194,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 27,
                                    "sloc": 28,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 153.24725426256592,
                                    "difficulty": 2.0952380952380953,
                                    "effort": 321.0894851215667,
                                    "time": 17.838304728975928,
                                    "bugs": 0.05108241808752197
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "2": {
                    "description": "The agent's long term goal is to navigate the map, collect keys when needed, carry all parcels to the delivery cell, and maximize the score by delivering all parcels as efficiently as possible.",
                    "intentions": [
                        {
                            "id": 10,
                            "description": "The short term goal is to move the agent to the delivery cell and deliver all the parcels it is carrying. The function will navigate the agent through the map, avoiding non-walkable cells, to reach the delivery cell and then use the function to drop all the parcels.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    while belief_set['agent']['coordinates'] != delivery_cell:\n        if belief_set['agent']['coordinates'][0] > delivery_cell[0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][0] < delivery_cell[0]:\n            function_2()\n        elif belief_set['agent']['coordinates'][1] > delivery_cell[1]:\n            function_3()\n        elif belief_set['agent']['coordinates'][1] < delivery_cell[1]:\n            function_4()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 61.69101160098897,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 13,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 70.32403072095333,
                                    "difficulty": 2.1818181818181817,
                                    "effort": 153.43424884571635,
                                    "time": 8.52412493587313,
                                    "bugs": 0.02344134357365111
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to move to the delivery cell while avoiding non-walkable cells and deliver the parcel it is carrying.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']\n        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    agent_coordinates = belief_set['agent']['coordinates']\n    max_attempts = 10\n    attempts = 0\n    while agent_coordinates != delivery_cell and attempts < max_attempts:\n        if agent_coordinates[0] < delivery_cell[0]:\n            if {'cell_coordinates': [agent_coordinates[0] + 1,\n                agent_coordinates[1]], 'cell_type': 'non_walkable'\n                } not in belief_set['map']['grid']:\n                function_2()\n        elif agent_coordinates[0] > delivery_cell[0]:\n            if {'cell_coordinates': [agent_coordinates[0] - 1,\n                agent_coordinates[1]], 'cell_type': 'non_walkable'\n                } not in belief_set['map']['grid']:\n                function_1()\n        if agent_coordinates[1] < delivery_cell[1]:\n            if {'cell_coordinates': [agent_coordinates[0], \n                agent_coordinates[1] + 1], 'cell_type': 'non_walkable'\n                } not in belief_set['map']['grid']:\n                function_4()\n        elif agent_coordinates[1] > delivery_cell[1]:\n            if {'cell_coordinates': [agent_coordinates[0], \n                agent_coordinates[1] - 1], 'cell_type': 'non_walkable'\n                } not in belief_set['map']['grid']:\n                function_3()\n        attempts += 1\n    function_6()\n    return\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 52.01564702890209,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 22,
                                    "sloc": 31,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 263.6661750735579,
                                    "difficulty": 4.857142857142857,
                                    "effort": 1280.6642789287096,
                                    "time": 71.14801549603942,
                                    "bugs": 0.0878887250245193
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The agent's short term goal is to pick up the parcel, navigate to the delivery cell, and deliver the parcel by dropping it at the delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    agent_coords = belief_set['agent']['coordinates']\n    parcel_coords = belief_set['parcel'][1]['coordinates']\n    delivery_coords = [x for x in belief_set['map']['grid'] if x[\n        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    while agent_coords != parcel_coords:\n        if agent_coords[0] < parcel_coords[0]:\n            function_2()\n        elif agent_coords[0] > parcel_coords[0]:\n            function_1()\n        elif agent_coords[1] < parcel_coords[1]:\n            function_4()\n        else:\n            function_3()\n    function_5()\n    while agent_coords != delivery_coords:\n        if agent_coords[0] < delivery_coords[0]:\n            function_2()\n        elif agent_coords[0] > delivery_coords[0]:\n            function_1()\n        elif agent_coords[1] < delivery_coords[1]:\n            function_4()\n        else:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 11
                                },
                                "mi": {
                                    "mi": 53.50327699783394,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 25,
                                    "sloc": 26,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 118.59257041502654,
                                    "difficulty": 2.1176470588235294,
                                    "effort": 251.13720793770327,
                                    "time": 13.952067107650182,
                                    "bugs": 0.03953085680500885
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "3": {
                    "description": "The agent's long-term goal is to successfully carry all available parcels to the designated delivery cell while avoiding non-walkable cells and collecting keys if necessary to open doors.",
                    "intentions": [
                        {
                            "id": 13,
                            "description": "The short term goal is for the agent to deliver the parcel it's currently carrying to the delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    agent = belief_set['agent']\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]\n    while agent['coordinates'] != delivery_cell['cell_coordinates']:\n        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 60.91731429318675,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 72.0,
                                    "difficulty": 2.0,
                                    "effort": 144.0,
                                    "time": 8.0,
                                    "bugs": 0.024
                                }
                            }
                        },
                        {
                            "id": 14,
                            "description": "The agent's short term goal is to move towards the delivery cell while carrying a parcel, taking into account the boundaries of the map to avoid infinite loops. The agent will try to increase its second coordinate (y-axis) as much as possible to reach the top part of the map, where the delivery cell is located. If it reaches the top boundary, it will try to move horizontally towards the delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_14():\n    global belief_set\n    delivery_coordinates = [cell['cell_coordinates'] for cell in belief_set\n        ['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    agent_coordinates = belief_set['agent']['coordinates']\n    max_iterations = belief_set['map']['width'] * belief_set['map']['height']\n    counter = 0\n    while (agent_coordinates != delivery_coordinates and counter <\n        max_iterations):\n        if agent_coordinates[1] < delivery_coordinates[1]:\n            function_4()\n        elif agent_coordinates[0] < delivery_coordinates[0]:\n            function_2()\n        else:\n            function_1()\n        counter += 1\n        agent_coordinates = belief_set['agent']['coordinates']\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 59.23885997468905,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 17,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 105.41561814669026,
                                    "difficulty": 3.2,
                                    "effort": 337.32997806940887,
                                    "time": 18.74055433718938,
                                    "bugs": 0.03513853938223009
                                }
                            }
                        },
                        {
                            "id": 15,
                            "description": "The short term goal is for the agent to move one step closer to the delivery cell while avoiding non-walkable cells and picking up keys if necessary to open doors.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    agent = belief_set['agent']\n    map_cells = belief_set['map']['grid']\n    agent_coords = agent['coordinates']\n    delivery_cell_coords = next(cell['cell_coordinates'] for cell in\n        map_cells if cell['cell_type'] == 'delivery_cell')\n    delta_x = delivery_cell_coords[0] - agent_coords[0]\n    delta_y = delivery_cell_coords[1] - agent_coords[1]\n    if delta_x > 0 and next(cell for cell in map_cells if cell[\n        'cell_coordinates'] == [agent_coords[0] + 1, agent_coords[1]])[\n        'cell_type'] == 'walkable':\n        function_2()\n    elif delta_x < 0 and next(cell for cell in map_cells if cell[\n        'cell_coordinates'] == [agent_coords[0] - 1, agent_coords[1]])[\n        'cell_type'] == 'walkable':\n        function_1()\n    elif delta_y > 0 and next(cell for cell in map_cells if cell[\n        'cell_coordinates'] == [agent_coords[0], agent_coords[1] + 1])[\n        'cell_type'] == 'walkable':\n        function_4()\n    elif delta_y < 0 and next(cell for cell in map_cells if cell[\n        'cell_coordinates'] == [agent_coords[0], agent_coords[1] - 1])[\n        'cell_type'] == 'walkable':\n        function_3()\n    if belief_set['key'][1]['coordinates'] == agent_coords and not agent[\n        'has_key']:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 21
                                },
                                "mi": {
                                    "mi": 51.369673927442975,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 28,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 427.7033415791781,
                                    "difficulty": 4.4625,
                                    "effort": 1908.6261617970822,
                                    "time": 106.03478676650457,
                                    "bugs": 0.14256778052639268
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "4": {
                    "description": "The agent's long term goal is to collect all available keys in the environment, unlock all doors and deliver all parcels to the designated delivery cell, while maximizing its score.",
                    "intentions": [
                        {
                            "id": 16,
                            "description": "The short term goal is to move the agent towards the key, pick it up and then move towards the nearest door to unlock it.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_16():\n    global belief_set\n    agent_coords = belief_set['agent']['coordinates']\n    key_coords = belief_set['key'][1]['coordinates']\n    while agent_coords[0] > key_coords[0]:\n        function_1()\n        agent_coords = belief_set['agent']['coordinates']\n    while agent_coords[0] < key_coords[0]:\n        function_2()\n        agent_coords = belief_set['agent']['coordinates']\n    while agent_coords[1] > key_coords[1]:\n        function_3()\n        agent_coords = belief_set['agent']['coordinates']\n    while agent_coords[1] < key_coords[1]:\n        function_4()\n        agent_coords = belief_set['agent']['coordinates']\n    function_5()\n    min_distance = float('inf')\n    nearest_door_coords = None\n    for door_id, door_info in belief_set['door'].items():\n        distance = abs(door_info['coordinates'][0] - agent_coords[0]) + abs(\n            door_info['coordinates'][1] - agent_coords[1])\n        if distance < min_distance:\n            min_distance = distance\n            nearest_door_coords = door_info['coordinates']\n    while agent_coords[0] > nearest_door_coords[0]:\n        function_1()\n        agent_coords = belief_set['agent']['coordinates']\n    while agent_coords[0] < nearest_door_coords[0]:\n        function_2()\n        agent_coords = belief_set['agent']['coordinates']\n    while agent_coords[1] > nearest_door_coords[1]:\n        function_3()\n        agent_coords = belief_set['agent']['coordinates']\n    while agent_coords[1] < nearest_door_coords[1]:\n        function_4()\n        agent_coords = belief_set['agent']['coordinates']\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 11
                                },
                                "mi": {
                                    "mi": 48.89937439174637,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 36,
                                    "sloc": 37,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 173.06477719407374,
                                    "difficulty": 2.0,
                                    "effort": 346.1295543881475,
                                    "time": 19.229419688230415,
                                    "bugs": 0.057688259064691244
                                }
                            }
                        },
                        {
                            "id": 17,
                            "description": "The agent's short term goal is to deliver the parcel it is currently carrying to the delivery cell.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [
                                19,
                                20
                            ],
                            "function": "def function_17():\n    global belief_set\n    delivery_cell_coordinates = next(cell['cell_coordinates'] for cell in\n        belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell')\n    agent_coordinates = belief_set['agent']['coordinates']\n    while agent_coordinates != delivery_cell_coordinates:\n        if agent_coordinates[0] > delivery_cell_coordinates[0]:\n            function_1()\n        elif agent_coordinates[0] < delivery_cell_coordinates[0]:\n            function_2()\n        elif agent_coordinates[1] > delivery_cell_coordinates[1]:\n            function_3()\n        elif agent_coordinates[1] < delivery_cell_coordinates[1]:\n            function_4()\n        agent_coordinates = belief_set['agent']['coordinates']\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 60.263697615941936,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 16,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 72.0,
                                    "difficulty": 2.0,
                                    "effort": 144.0,
                                    "time": 8.0,
                                    "bugs": 0.024
                                }
                            }
                        },
                        {
                            "id": 18,
                            "description": "The agent's short term goal is to move towards the key, pick it up, and then move towards the door to unlock it.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_18():\n    global belief_set\n    key_coords = belief_set['key'][1]['coordinates']\n    agent_coords = belief_set['agent']['coordinates']\n    while agent_coords != key_coords:\n        if agent_coords[0] < key_coords[0]:\n            function_2()\n        elif agent_coords[0] > key_coords[0]:\n            function_1()\n        elif agent_coords[1] < key_coords[1]:\n            function_4()\n        else:\n            function_3()\n    function_5()\n    door_coords = belief_set['door'][1]['coordinates']\n    while agent_coords != door_coords:\n        if agent_coords[0] < door_coords[0]:\n            function_2()\n        elif agent_coords[0] > door_coords[0]:\n            function_1()\n        elif agent_coords[1] < door_coords[1]:\n            function_4()\n        else:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 54.28845722651021,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 25,
                                    "sloc": 25,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 100.07820003461549,
                                    "difficulty": 1.6,
                                    "effort": 160.1251200553848,
                                    "time": 8.895840003076934,
                                    "bugs": 0.0333594000115385
                                }
                            }
                        },
                        {
                            "id": 19,
                            "description": "The short term goal is to have the agent move towards the delivery cell, and upon reaching the cell, it should deliver the parcel if it is carrying any.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6,
                                17
                            ],
                            "called_by": [],
                            "function": "def function_19():\n    global belief_set\n    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']\n        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    agent_coords = belief_set['agent']['coordinates']\n    while agent_coords != delivery_cell:\n        if agent_coords[0] > delivery_cell[0]:\n            function_1()\n        elif agent_coords[0] < delivery_cell[0]:\n            function_2()\n        elif agent_coords[1] > delivery_cell[1]:\n            function_3()\n        elif agent_coords[1] < delivery_cell[1]:\n            function_4()\n        agent_coords = belief_set['agent']['coordinates']\n    if belief_set['agent']['parcels_carried_ids']:\n        function_17()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 59.58939890542901,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 16,
                                    "sloc": 17,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 70.32403072095333,
                                    "difficulty": 2.1818181818181817,
                                    "effort": 153.43424884571635,
                                    "time": 8.52412493587313,
                                    "bugs": 0.02344134357365111
                                }
                            }
                        },
                        {
                            "id": 20,
                            "description": "The short term goal is for the agent to move to the parcels_spawn cell, pick up a parcel, and then move to the delivery cell to deliver the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                17
                            ],
                            "called_by": [],
                            "function": "def function_20():\n    global belief_set\n    spawn_cell_coordinates = [cell['cell_coordinates'] for cell in\n        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]\n    delivery_cell_coordinates = [cell['cell_coordinates'] for cell in\n        belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    while belief_set['agent']['coordinates'] != spawn_cell_coordinates:\n        if belief_set['agent']['coordinates'][0] < spawn_cell_coordinates[0]:\n            function_2()\n        elif belief_set['agent']['coordinates'][0] > spawn_cell_coordinates[0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][1] < spawn_cell_coordinates[1]:\n            function_4()\n        else:\n            function_3()\n    function_5()\n    while belief_set['agent']['coordinates'] != delivery_cell_coordinates:\n        if belief_set['agent']['coordinates'][0] < delivery_cell_coordinates[0\n            ]:\n            function_2()\n        elif belief_set['agent']['coordinates'][0] > delivery_cell_coordinates[\n            0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][1] < delivery_cell_coordinates[\n            1]:\n            function_4()\n        else:\n            function_3()\n    function_17()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 53.1700792651353,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 24,
                                    "sloc": 29,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 137.5488750216347,
                                    "difficulty": 2.0,
                                    "effort": 275.0977500432694,
                                    "time": 15.28320833573719,
                                    "bugs": 0.04584962500721157
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "8": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "9": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 4,
                    "intentions": {
                        "10": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "11": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "12": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "3": {
                    "n_objectives": 3,
                    "intentions": {
                        "13": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "14": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "15": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        }
                    }
                },
                "4": {
                    "n_objectives": 4,
                    "intentions": {
                        "16": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "17": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "18": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "19": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "20": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "2",
            "path": "experiments/2/2024-10-23-18-20-19",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if 'map' in event['object_type']:\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['map'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.30445109119393,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 39.863137138648355,
                                "difficulty": 1.0,
                                "effort": 39.863137138648355,
                                "time": 2.2146187299249087,
                                "bugs": 0.013287712379549451
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_2(event, belief_set):\n    if 'parcel' not in belief_set:\n        belief_set['parcel'] = {}\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            belief_set['parcel'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['parcel'][event['object']['id']].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['parcel'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 6
                            },
                            "mi": {
                                "mi": 64.46695506240178,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 11,
                                "sloc": 11,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 51.89147427955947,
                                "difficulty": 1.1111111111111112,
                                "effort": 57.65719364395497,
                                "time": 3.203177424664165,
                                "bugs": 0.01729715809318649
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['agent'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['agent']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] == 'key':\n        if event['event_type'] == 'object added':\n            belief_set['key'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            belief_set['key'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object removed':\n            del belief_set['key'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.44872847079279,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_5(event, belief_set):\n    if event['object_type'] == 'door':\n        if event['event_type'] == 'object added':\n            if 'door' not in belief_set:\n                belief_set['door'] = {}\n            belief_set['door'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'door' in belief_set and event['object']['id'] in belief_set[\n                'door']:\n                belief_set['door'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'door' in belief_set and event['object']['id'] in belief_set[\n                'door']:\n                del belief_set['door'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.22264609466714,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 144.94647495169912,
                                "difficulty": 2.588235294117647,
                                "effort": 375.15558222792714,
                                "time": 20.8419767904404,
                                "bugs": 0.048315491650566374
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to collect all the keys available on the map, open all the doors and deliver all the parcels to the delivery cell and maximize the score.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The short term goal is to move the agent to the cell that contains the parcel and pick up the parcel.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    parcel_coordinates = belief_set['parcel'][1]['coordinates']\n    agent_coordinates = belief_set['agent']['coordinates']\n    while agent_coordinates != parcel_coordinates:\n        if agent_coordinates[0] < parcel_coordinates[0]:\n            function_2()\n            agent_coordinates[0] += 1\n        elif agent_coordinates[0] > parcel_coordinates[0]:\n            function_1()\n            agent_coordinates[0] -= 1\n        if agent_coordinates[1] < parcel_coordinates[1]:\n            function_4()\n            agent_coordinates[1] += 1\n        elif agent_coordinates[1] > parcel_coordinates[1]:\n            function_3()\n            agent_coordinates[1] -= 1\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 57.33706280113289,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 116.69205856195879,
                                    "difficulty": 3.0,
                                    "effort": 350.07617568587636,
                                    "time": 19.44867642699313,
                                    "bugs": 0.03889735285398626
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The short term goal is to move the agent to the cell that contains the key and pick up the key.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    agent = belief_set['agent']\n    key = belief_set['key']\n    while agent['coordinates'] != key[1]['coordinates']:\n        if agent['coordinates'][0] < key[1]['coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > key[1]['coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < key[1]['coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > key[1]['coordinates'][1]:\n            function_3()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 61.97746292794532,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short term goal is to move the agent to the cell that contains the key, pick up the key and then navigate to the door to unlock it.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    key_coordinates = belief_set['key'][1]['coordinates']\n    door_coordinates = belief_set['door'][1]['coordinates']\n    max_iterations = 100\n    iterations = 0\n    while belief_set['agent']['coordinates'\n        ] != key_coordinates and iterations < max_iterations:\n        if belief_set['agent']['coordinates'][0] < key_coordinates[0]:\n            function_2()\n        elif belief_set['agent']['coordinates'][0] > key_coordinates[0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][1] < key_coordinates[1]:\n            function_4()\n        elif belief_set['agent']['coordinates'][1] > key_coordinates[1]:\n            function_3()\n        iterations += 1\n    function_5()\n    while belief_set['agent']['coordinates'\n        ] != door_coordinates and iterations < max_iterations:\n        if belief_set['agent']['coordinates'][0] < door_coordinates[0]:\n            function_2()\n        elif belief_set['agent']['coordinates'][0] > door_coordinates[0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][1] < door_coordinates[1]:\n            function_4()\n        elif belief_set['agent']['coordinates'][1] > door_coordinates[1]:\n            function_3()\n        iterations += 1\n    belief_set['agent']['has_key'] = False\n    belief_set['door'][1]['coordinates'] = None\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 49.684494241427345,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 29,
                                    "sloc": 31,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 240.0,
                                    "difficulty": 2.962962962962963,
                                    "effort": 711.1111111111111,
                                    "time": 39.50617283950617,
                                    "bugs": 0.08
                                }
                            }
                        },
                        {
                            "id": 10,
                            "description": "The short term goal for the agent is to deliver the parcel it is currently carrying to the delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell\n        ['cell_type'] == 'delivery_cell')\n    agent = belief_set['agent']\n    while agent['coordinates'] != delivery_cell['cell_coordinates']:\n        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 60.91731429318675,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 72.0,
                                    "difficulty": 2.0,
                                    "effort": 144.0,
                                    "time": 8.0,
                                    "bugs": 0.024
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "2": {
                    "description": "The long term goal of the agent is to collect all available parcels on the map and deliver them to the designated delivery cells, while avoiding non-walkable cells and using keys to open any doors that block the path.",
                    "intentions": [
                        {
                            "id": 11,
                            "description": "The short term goal is to move the agent to the cell that contains the parcel and pick up the parcel.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    parcel_coord = belief_set['parcel'][1]['coordinates']\n    agent_coord = belief_set['agent']['coordinates']\n    while agent_coord != parcel_coord:\n        if agent_coord[0] < parcel_coord[0]:\n            function_2()\n        elif agent_coord[0] > parcel_coord[0]:\n            function_1()\n        if agent_coord[1] < parcel_coord[1]:\n            function_4()\n        elif agent_coord[1] > parcel_coord[1]:\n            function_3()\n        agent_coord = belief_set['agent']['coordinates']\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 61.32384625070051,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The short term goal is to deliver the parcel that the agent is currently carrying to the designated delivery cell.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    delivery_cell_coordinates = [cell['cell_coordinates'] for cell in\n        belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    agent_coordinates = belief_set['agent']['coordinates']\n    while agent_coordinates != delivery_cell_coordinates:\n        if agent_coordinates[0] < delivery_cell_coordinates[0]:\n            function_2()\n        elif agent_coordinates[0] > delivery_cell_coordinates[0]:\n            function_1()\n        elif agent_coordinates[1] < delivery_cell_coordinates[1]:\n            function_4()\n        else:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 61.75634489171601,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 57.110323830864054,
                                    "difficulty": 2.0,
                                    "effort": 114.22064766172811,
                                    "time": 6.345591536762672,
                                    "bugs": 0.019036774610288017
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": "def function_dtf_1(belief_set):\n    if belief_set['agent']['has_key'] and belief_set['parcel']:\n        return True\n    elif belief_set['key'] and not belief_set['agent']['has_key']:\n        return True\n    elif belief_set['parcel'] and belief_set['agent']['parcels_carried_ids']:\n        return True\n    else:\n        return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 7
                        },
                        "mi": {
                            "mi": 67.44247087664239,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 9,
                            "sloc": 9,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 34.86917501586544,
                            "difficulty": 1.0,
                            "effort": 34.86917501586544,
                            "time": 1.937176389770302,
                            "bugs": 0.011623058338621813
                        }
                    }
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "8": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "9": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "10": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 4,
                    "intentions": {
                        "11": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "12": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "2",
            "path": "experiments/2/2024-10-23-18-16-03",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if 'map' in event['object_type']:\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            for cell in event['object']['grid']:\n                for existing_cell in belief_set['map']['grid']:\n                    if existing_cell['cell_coordinates'] == cell[\n                        'cell_coordinates']:\n                        existing_cell['cell_type'] = cell['cell_type']\n        elif event['event_type'] == 'object removed':\n            del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 8
                            },
                            "mi": {
                                "mi": 63.26524067554301,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 12,
                                "sloc": 13,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 53.77443751081735,
                                "difficulty": 1.0,
                                "effort": 53.77443751081735,
                                "time": 2.987468750600964,
                                "bugs": 0.017924812503605784
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcels' not in belief_set:\n                belief_set['parcels'] = {}\n            belief_set['parcels'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                belief_set['parcels'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                del belief_set['parcels'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.17653230125827,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['agent'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            belief_set.pop('agent', None)\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] == 'key':\n        if event['event_type'] == 'object added':\n            belief_set['keys'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            belief_set['keys'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object removed':\n            del belief_set['keys'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.44872847079279,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_5(event, belief_set):\n    if event['object_type'] == 'door':\n        if event['event_type'] == 'object added':\n            if 'doors' not in belief_set:\n                belief_set['doors'] = {}\n            belief_set['doors'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'doors' in belief_set and event['object']['id'] in belief_set[\n                'doors']:\n                belief_set['doors'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'doors' in belief_set and event['object']['id'] in belief_set[\n                'doors']:\n                del belief_set['doors'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.17653230125827,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to collect all keys in the environment, use them to open any doors encountered and deliver all parcels to the designated delivery cells, while avoiding non-walkable cells.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The short term goal is to move the agent to the nearest key if it doesn't have a key, pick up the key, and then move towards the nearest door to open it.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    agent = belief_set['agent']\n    keys = belief_set['keys']\n    doors = belief_set['doors']\n    if not agent['has_key']:\n        nearest_key = min(keys.values(), key=lambda k: abs(k['coordinates']\n            [0] - agent['coordinates'][0]) + abs(k['coordinates'][1] -\n            agent['coordinates'][1]))\n        if agent['coordinates'][0] > nearest_key['coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][0] < nearest_key['coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][1] > nearest_key['coordinates'][1]:\n            function_3()\n        elif agent['coordinates'][1] < nearest_key['coordinates'][1]:\n            function_4()\n        function_5()\n    nearest_door = min(doors.values(), key=lambda d: abs(d['coordinates'][0\n        ] - agent['coordinates'][0]) + abs(d['coordinates'][1] - agent[\n        'coordinates'][1]))\n    if agent['coordinates'][0] > nearest_door['coordinates'][0]:\n        function_1()\n    elif agent['coordinates'][0] < nearest_door['coordinates'][0]:\n        function_2()\n    elif agent['coordinates'][1] > nearest_door['coordinates'][1]:\n        function_3()\n    elif agent['coordinates'][1] < nearest_door['coordinates'][1]:\n        function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 50.97684479002234,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 27,
                                    "sloc": 29,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 223.84836501501496,
                                    "difficulty": 2.5,
                                    "effort": 559.6209125375374,
                                    "time": 31.090050696529854,
                                    "bugs": 0.07461612167167166
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The agent's short term goal is to move towards and pick up the parcel in its vicinity.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    parcel_coordinates = belief_set['parcels'][1]['coordinates']\n    agent_coordinates = belief_set['agent']['coordinates']\n    while parcel_coordinates != agent_coordinates:\n        if parcel_coordinates[0] < agent_coordinates[0]:\n            function_1()\n        elif parcel_coordinates[0] > agent_coordinates[0]:\n            function_2()\n        if parcel_coordinates[1] < agent_coordinates[1]:\n            function_3()\n        elif parcel_coordinates[1] > agent_coordinates[1]:\n            function_4()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 61.97746292794532,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The agent's short term goal is to move towards and pick up the nearest parcel, whilst avoiding non-walkable cells.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    agent_coordinates = belief_set['agent']['coordinates']\n    parcels = belief_set['parcels']\n    closest_parcel_id = min(parcels, key=lambda x: abs(parcels[x][\n        'coordinates'][0] - agent_coordinates[0]) + abs(parcels[x][\n        'coordinates'][1] - agent_coordinates[1]))\n    closest_parcel = parcels[closest_parcel_id]\n    while agent_coordinates != closest_parcel['coordinates']:\n        if agent_coordinates[0] < closest_parcel['coordinates'][0]:\n            function_2()\n            agent_coordinates[0] += 1\n        elif agent_coordinates[0] > closest_parcel['coordinates'][0]:\n            function_1()\n            agent_coordinates[0] -= 1\n        if agent_coordinates[1] < closest_parcel['coordinates'][1]:\n            function_4()\n            agent_coordinates[1] += 1\n        elif agent_coordinates[1] > closest_parcel['coordinates'][1]:\n            function_3()\n            agent_coordinates[1] -= 1\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 54.74656521033623,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 21,
                                    "sloc": 22,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 169.21582985307933,
                                    "difficulty": 2.857142857142857,
                                    "effort": 483.4737995802267,
                                    "time": 26.859655532234815,
                                    "bugs": 0.05640527661769311
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "2": {
                    "description": "The agent's long term goal is to carry and deliver as many parcels as possible to the delivery cell while managing and using keys to open doors when necessary.",
                    "intentions": [
                        {
                            "id": 10,
                            "description": "The agent's short term goal is to move towards the delivery cell while carrying parcels and to drop them there.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    agent_coordinates = belief_set['agent']['coordinates']\n    if agent_coordinates[0] > delivery_cell[0]:\n        function_1()\n    elif agent_coordinates[0] < delivery_cell[0]:\n        function_2()\n    elif agent_coordinates[1] > delivery_cell[1]:\n        function_3()\n    elif agent_coordinates[1] < delivery_cell[1]:\n        function_4()\n    else:\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 61.8429600039687,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to move towards the delivery cell while carrying the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell\n        ['cell_type'] == 'delivery_cell')\n    agent = belief_set['agent']\n    if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n        function_2()\n    elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n        function_1()\n    elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n        function_4()\n    else:\n        function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 64.32120193936197,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 12,
                                    "sloc": 13,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 41.51317942364757,
                                    "difficulty": 1.5,
                                    "effort": 62.26976913547136,
                                    "time": 3.4594316186372978,
                                    "bugs": 0.01383772647454919
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The agent's short term goal is to deliver the parcel it is carrying to the delivery cell.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    while belief_set['agent']['coordinates'] != delivery_cell:\n        if belief_set['agent']['coordinates'][1] < delivery_cell[1]:\n            function_4()\n        else:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 68.48924569820511,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 9,
                                    "sloc": 10,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 27.0,
                                    "difficulty": 1.8,
                                    "effort": 48.6,
                                    "time": 2.7,
                                    "bugs": 0.009
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": "def function_dtf_1(belief_set):\n    if belief_set['parcels'] and not belief_set['agent']['parcels_carried_ids'\n        ]:\n        return True\n    if belief_set['agent']['parcels_carried_ids']:\n        delivery_cell = next((cell for cell in belief_set['map']['grid'] if\n            cell['cell_type'] == 'delivery_cell'), None)\n        if delivery_cell and belief_set['agent']['coordinates'\n            ] != delivery_cell['cell_coordinates']:\n            return True\n    if belief_set['keys'] and not belief_set['agent']['has_key']:\n        return True\n    if belief_set['doors'] and belief_set['agent']['has_key']:\n        return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 12
                        },
                        "mi": {
                            "mi": 61.16367508778811,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 12,
                            "sloc": 15,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 89.92418250750748,
                            "difficulty": 2.1538461538461537,
                            "effort": 193.68285463155456,
                            "time": 10.76015859064192,
                            "bugs": 0.029974727502502494
                        }
                    }
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "8": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "9": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 4,
                    "intentions": {
                        "10": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "11": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "12": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        }
                    }
                }
            }
        }
    ],
    "experiments/3": [
        {
            "typology": "3",
            "path": "experiments/3/2024-10-23-20-21-21",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['map'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            belief_set.pop('map', None)\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcels' not in belief_set:\n                belief_set['parcels'] = {}\n            belief_set['parcels'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['parcels'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object removed':\n            del belief_set['parcels'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 6
                            },
                            "mi": {
                                "mi": 64.35856483181904,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 11,
                                "sloc": 11,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 53.77443751081735,
                                "difficulty": 1.0,
                                "effort": 53.77443751081735,
                                "time": 2.987468750600964,
                                "bugs": 0.017924812503605784
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] != 'agent':\n        return belief_set\n    if event['event_type'] == 'object added' or event['event_type'\n        ] == 'object changed':\n        belief_set['agent'] = event['object']\n    elif event['event_type'] == 'object removed':\n        if 'agent' in belief_set:\n            del belief_set['agent']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 6
                            },
                            "mi": {
                                "mi": 65.44372589223468,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 10,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 70.32403072095333,
                                "difficulty": 2.1818181818181817,
                                "effort": 153.43424884571635,
                                "time": 8.52412493587313,
                                "bugs": 0.02344134357365111
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] == 'key':\n        if event['event_type'] == 'object added':\n            belief_set['keys'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            belief_set['keys'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object removed':\n            del belief_set['keys'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.44872847079279,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_5(event, belief_set):\n    if event['object_type'] == 'door':\n        if event['event_type'] == 'object added':\n            if 'doors' not in belief_set:\n                belief_set['doors'] = {}\n            belief_set['doors'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'doors' in belief_set and event['object']['id'] in belief_set[\n                'doors']:\n                belief_set['doors'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'doors' in belief_set and event['object']['id'] in belief_set[\n                'doors']:\n                del belief_set['doors'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.17653230125827,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to strategically navigate the grid, collect keys to open doors, pick up parcels, and deliver them to the appropriate delivery cells to maximize the score.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The short term goal is to navigate to the nearest parcel and pick it up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    agent = belief_set['agent']\n    parcels = belief_set['parcels']\n    for parcel in parcels.values():\n        if parcel['coordinates'][0] < agent['coordinates'][0]:\n            function_1()\n        elif parcel['coordinates'][0] > agent['coordinates'][0]:\n            function_2()\n        elif parcel['coordinates'][1] < agent['coordinates'][1]:\n            function_3()\n        elif parcel['coordinates'][1] > agent['coordinates'][1]:\n            function_4()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 62.984164198258014,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 39.863137138648355,
                                    "difficulty": 1.0,
                                    "effort": 39.863137138648355,
                                    "time": 2.2146187299249087,
                                    "bugs": 0.013287712379549451
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The agent's short term goal is to navigate towards the available parcel, pick it up, and then move towards the delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    agent = belief_set['agent']\n    parcels = belief_set['parcels']\n    for parcel_id, parcel in parcels.items():\n        if not parcel['carried_by_id']:\n            parcel_coords = parcel['coordinates']\n            while agent['coordinates'] != parcel_coords:\n                if agent['coordinates'][0] < parcel_coords[0]:\n                    function_2()\n                elif agent['coordinates'][0] > parcel_coords[0]:\n                    function_1()\n                elif agent['coordinates'][1] < parcel_coords[1]:\n                    function_4()\n                elif agent['coordinates'][1] > parcel_coords[1]:\n                    function_3()\n            function_5()\n            break\n    delivery_cell_coords = [cell['cell_coordinates'] for cell in belief_set\n        ['map']['grid'] if cell['cell_type'] in ['delivery_cell',\n        'double_points_delivery_cell']][0]\n    while agent['coordinates'] != delivery_cell_coords:\n        if agent['coordinates'][0] < delivery_cell_coords[0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell_coords[0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_cell_coords[1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_cell_coords[1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 15
                                },
                                "mi": {
                                    "mi": 50.4954579691937,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 29,
                                    "sloc": 31,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 168.25742227201613,
                                    "difficulty": 2.5,
                                    "effort": 420.6435556800403,
                                    "time": 23.369086426668908,
                                    "bugs": 0.056085807424005374
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short term goal is to navigate to an available parcel, pick it up, and then move towards the delivery cell while avoiding entering an infinite loop of actions.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    agent = belief_set['agent']\n    parcels = belief_set['parcels']\n    map = belief_set['map']['grid']\n    parcel_coordinates = [parcel['coordinates'] for parcel in parcels.\n        values() if parcel['carried_by_id'] is None]\n    delivery_coordinates = [cell['cell_coordinates'] for cell in map if \n        cell['cell_type'] in ['delivery_cell', 'double_points_delivery_cell']]\n    if not agent['parcels_carried_ids']:\n        target_coordinates = parcel_coordinates[0]\n    else:\n        target_coordinates = delivery_coordinates[0]\n    while agent['coordinates'] != target_coordinates:\n        if agent['coordinates'][0] > target_coordinates[0]:\n            function_1()\n        elif agent['coordinates'][0] < target_coordinates[0]:\n            function_2()\n        elif agent['coordinates'][1] > target_coordinates[1]:\n            function_3()\n        elif agent['coordinates'][1] < target_coordinates[1]:\n            function_4()\n    if not agent['parcels_carried_ids']:\n        function_5()\n    else:\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 12
                                },
                                "mi": {
                                    "mi": 53.94342854076193,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 24,
                                    "sloc": 26,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 111.48579046593244,
                                    "difficulty": 3.0,
                                    "effort": 334.4573713977973,
                                    "time": 18.580965077655407,
                                    "bugs": 0.037161930155310816
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "2": {
                    "description": "The agent should aim to collect all parcels and deliver them to their respective delivery cells, while also collecting keys to unlock doors and facilitate faster and more efficient delivery routes.",
                    "intentions": [
                        {
                            "id": 10,
                            "description": "The short term goal is for the agent to move to the cell with the key and pick it up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    agent = belief_set['agent']\n    key = belief_set['keys'][1]\n    while agent['coordinates'] != key['coordinates']:\n        if agent['coordinates'][0] < key['coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > key['coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < key['coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > key['coordinates'][1]:\n            function_3()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 61.97746292794532,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to locate and move to the cell containing the key, and then pick it up.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    key_coordinates = belief_set['keys'][1]['coordinates']\n    agent_coordinates = belief_set['agent']['coordinates']\n    counter = 0\n    while agent_coordinates != key_coordinates and counter < 100:\n        if agent_coordinates[0] < key_coordinates[0]:\n            function_2()\n        elif agent_coordinates[0] > key_coordinates[0]:\n            function_1()\n        if agent_coordinates[1] < key_coordinates[1]:\n            function_4()\n        elif agent_coordinates[1] > key_coordinates[1]:\n            function_3()\n        agent_coordinates = belief_set['agent']['coordinates']\n        counter += 1\n    if agent_coordinates == key_coordinates:\n        function_5()\n    else:\n        return (\n            'Error: The agent could not reach the key within the maximum number of moves.'\n            )\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 56.02077730852997,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 20,
                                    "sloc": 22,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 118.59257041502654,
                                    "difficulty": 3.6,
                                    "effort": 426.93325349409554,
                                    "time": 23.718514083005307,
                                    "bugs": 0.03953085680500885
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The short-term goal of the agent is to deliver the parcels it's carrying to the nearest delivery cell.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [
                                13,
                                15
                            ],
                            "function": "def function_12():\n    global belief_set\n    agent_coords = belief_set['agent']['coordinates']\n    delivery_cells = [c['cell_coordinates'] for c in belief_set['map'][\n        'grid'] if 'delivery' in c['cell_type']]\n    nearest_delivery_cell = min(delivery_cells, key=lambda c: abs(c[0] -\n        agent_coords[0]) + abs(c[1] - agent_coords[1]))\n    while agent_coords != nearest_delivery_cell:\n        if agent_coords[0] < nearest_delivery_cell[0]:\n            function_2()\n        elif agent_coords[0] > nearest_delivery_cell[0]:\n            function_1()\n        if agent_coords[1] < nearest_delivery_cell[1]:\n            function_4()\n        elif agent_coords[1] > nearest_delivery_cell[1]:\n            function_3()\n        agent_coords = belief_set['agent']['coordinates']\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 57.42989830568894,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 123.79398751947124,
                                    "difficulty": 3.0,
                                    "effort": 371.38196255841376,
                                    "time": 20.63233125324521,
                                    "bugs": 0.04126466250649041
                                }
                            }
                        },
                        {
                            "id": 13,
                            "description": "The agent's short term goal is to locate the nearest parcel, move to it, pick it up and then deliver it to the nearest delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                12
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    parcels = belief_set['parcels']\n    agent = belief_set['agent']\n    for parcel in parcels:\n        if parcels[parcel]['coordinates'] == agent['coordinates']:\n            function_5()\n            function_12()\n            break\n        else:\n            if parcels[parcel]['coordinates'][0] > agent['coordinates'][0]:\n                function_2()\n            elif parcels[parcel]['coordinates'][0] < agent['coordinates'][0]:\n                function_1()\n            if parcels[parcel]['coordinates'][1] > agent['coordinates'][1]:\n                function_4()\n            elif parcels[parcel]['coordinates'][1] < agent['coordinates'][1]:\n                function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 59.46208647288643,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 14,
                            "description": "The short term goal of the agent is to navigate towards the nearest parcel spawn point and pick up any parcels available there.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_14():\n    global belief_set\n    spawn_points = [cell['cell_coordinates'] for cell in belief_set['map'][\n        'grid'] if cell['cell_type'] == 'parcels_spawn']\n    if not spawn_points:\n        return\n    nearest_spawn_point = min(spawn_points, key=lambda x: abs(x[0] -\n        belief_set['agent']['coordinates'][0]) + abs(x[1] - belief_set[\n        'agent']['coordinates'][1]))\n    while belief_set['agent']['coordinates'] != nearest_spawn_point:\n        if belief_set['agent']['coordinates'][0] < nearest_spawn_point[0]:\n            function_2()\n        elif belief_set['agent']['coordinates'][0] > nearest_spawn_point[0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][1] < nearest_spawn_point[1]:\n            function_4()\n        elif belief_set['agent']['coordinates'][1] > nearest_spawn_point[1]:\n            function_3()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 57.00245262638936,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 19,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 136.3127518260917,
                                    "difficulty": 3.5,
                                    "effort": 477.09463139132095,
                                    "time": 26.50525729951783,
                                    "bugs": 0.04543758394203057
                                }
                            }
                        },
                        {
                            "id": 15,
                            "description": "The short term goal of the agent is to navigate towards the key, pick it up, and then navigate towards the nearest parcel spawn point and pick up any parcels available there. It should then deliver the parcels to the nearest delivery cell. To prevent infinite loops, the agent should stop its current plan if it has not reached its destination after a certain number of steps.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                12
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    max_steps = 100\n    steps = 0\n    while belief_set['agent']['coordinates'] != belief_set['keys'][1][\n        'coordinates'] and steps < max_steps:\n        if belief_set['agent']['coordinates'][0] > belief_set['keys'][1][\n            'coordinates'][0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][0] < belief_set['keys'][1][\n            'coordinates'][0]:\n            function_2()\n        elif belief_set['agent']['coordinates'][1] > belief_set['keys'][1][\n            'coordinates'][1]:\n            function_3()\n        elif belief_set['agent']['coordinates'][1] < belief_set['keys'][1][\n            'coordinates'][1]:\n            function_4()\n        steps += 1\n    function_5()\n    steps = 0\n    while belief_set['agent']['coordinates'] != belief_set['map']['grid'][0][\n        'cell_coordinates'] and steps < max_steps:\n        if belief_set['agent']['coordinates'][0] > belief_set['map']['grid'][0\n            ]['cell_coordinates'][0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][0] < belief_set['map']['grid'][\n            0]['cell_coordinates'][0]:\n            function_2()\n        elif belief_set['agent']['coordinates'][1] > belief_set['map']['grid'][\n            0]['cell_coordinates'][1]:\n            function_3()\n        elif belief_set['agent']['coordinates'][1] < belief_set['map']['grid'][\n            0]['cell_coordinates'][1]:\n            function_4()\n        steps += 1\n    function_5()\n    function_12()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 50.01693832384991,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 28,
                                    "sloc": 38,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 240.0,
                                    "difficulty": 2.962962962962963,
                                    "effort": 711.1111111111111,
                                    "time": 39.50617283950617,
                                    "bugs": 0.08
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 5,
                    "intentions": {
                        "7": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "8": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "9": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 5,
                    "intentions": {
                        "10": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "11": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "12": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "13": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "14": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "15": {
                            "n_objectives": 6,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "3",
            "path": "experiments/3/2024-10-23-20-15-43",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added' or event['event_type'\n            ] == 'object changed':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object removed':\n            if 'map' in belief_set:\n                del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 6
                            },
                            "mi": {
                                "mi": 66.63804294389455,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 8,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 68.53238859703687,
                                "difficulty": 1.6363636363636365,
                                "effort": 112.14390861333307,
                                "time": 6.23021714518517,
                                "bugs": 0.022844129532345624
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_2(event, beliefs):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcels' not in beliefs:\n                beliefs['parcels'] = {}\n            beliefs['parcels'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'parcels' in beliefs and event['object']['id'] in beliefs[\n                'parcels']:\n                beliefs['parcels'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'parcels' in beliefs and event['object']['id'] in beliefs[\n                'parcels']:\n                del beliefs['parcels'][event['object']['id']]\n    return beliefs",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.17653230125827,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_3(event, beliefs):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            beliefs['agent'] = event['object']\n        elif event['event_type'] == 'object changed':\n            beliefs['agent'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del beliefs['agent']\n    return beliefs",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_4(event, beliefs):\n    if event['object_type'] == 'key':\n        if event['event_type'] == 'object added':\n            beliefs['keys'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            beliefs['keys'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object removed':\n            del beliefs['keys'][event['object']['id']]\n    return beliefs",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.44872847079279,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_5(event, belief_set):\n    if event['object_type'] != 'door':\n        return belief_set\n    if event['event_type'] == 'object added':\n        if 'doors' not in belief_set:\n            belief_set['doors'] = {}\n        belief_set['doors'][event['object']['id']] = event['object']\n    elif event['event_type'] == 'object changed':\n        if 'doors' in belief_set and event['object']['id'] in belief_set[\n            'doors']:\n            belief_set['doors'][event['object']['id']].update(event['object'])\n    elif event['event_type'] == 'object removed':\n        if 'doors' in belief_set and event['object']['id'] in belief_set[\n            'doors']:\n            del belief_set['doors'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 58.431037053128456,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 14,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 149.27754454988144,
                                "difficulty": 3.0555555555555554,
                                "effort": 456.12583056908215,
                                "time": 25.340323920504563,
                                "bugs": 0.04975918151662715
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to collect all keys and parcels present in the environment, open all the doors, and deliver the parcels to the designated cells to maximize the score.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The agent's short term goal is to move towards and pick up the nearest parcel or key, given its current location.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    agent_x, agent_y = belief_set['agent']['coordinates']\n    shortest_distance = float('inf')\n    target_object = None\n    for parcel in belief_set['parcels'].values():\n        if parcel['carried_by_id'] is None:\n            parcel_x, parcel_y = parcel['coordinates']\n            distance = abs(agent_x - parcel_x) + abs(agent_y - parcel_y)\n            if distance < shortest_distance:\n                shortest_distance = distance\n                target_object = parcel\n    for key in belief_set['keys'].values():\n        if key['carried_by_id'] is None:\n            key_x, key_y = key['coordinates']\n            distance = abs(agent_x - key_x) + abs(agent_y - key_y)\n            if distance < shortest_distance:\n                shortest_distance = distance\n                target_object = key\n    if target_object is not None:\n        target_x, target_y = target_object['coordinates']\n        if agent_x > target_x:\n            function_1()\n        elif agent_x < target_x:\n            function_2()\n        elif agent_y > target_y:\n            function_3()\n        elif agent_y < target_y:\n            function_4()\n        else:\n            function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 12
                                },
                                "mi": {
                                    "mi": 49.64695691239549,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 31,
                                    "sloc": 31,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 206.32331253245206,
                                    "difficulty": 5.0,
                                    "effort": 1031.6165626622603,
                                    "time": 57.31203125901446,
                                    "bugs": 0.06877443751081735
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The short term goal is to move the agent to the cell that contains the nearest parcel and pick it up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    agent = belief_set['agent']\n    parcels = belief_set['parcels']\n    parcel_coordinates = min(parcels.values(), key=lambda x: abs(x[\n        'coordinates'][0] - agent['coordinates'][0]) + abs(x['coordinates']\n        [1] - agent['coordinates'][1]))['coordinates']\n    while agent['coordinates'] != parcel_coordinates:\n        if agent['coordinates'][0] < parcel_coordinates[0]:\n            function_2()\n        elif agent['coordinates'][0] > parcel_coordinates[0]:\n            function_1()\n        elif agent['coordinates'][1] < parcel_coordinates[1]:\n            function_4()\n        elif agent['coordinates'][1] > parcel_coordinates[1]:\n            function_3()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 58.76194532999395,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 16,
                                    "sloc": 17,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 105.41561814669026,
                                    "difficulty": 2.5,
                                    "effort": 263.53904536672565,
                                    "time": 14.641058075929202,
                                    "bugs": 0.03513853938223009
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The agent's short term goal is to move to the cell containing the nearest parcel and pick it up, provided there are no obstacles in the path and the parcel is reachable.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                12,
                                14,
                                15
                            ],
                            "function": "def function_9():\n    global belief_set\n    agent_coordinates = belief_set['agent']['coordinates']\n    nearest_parcel_coordinates = belief_set['parcels'][1]['coordinates']\n    while agent_coordinates != nearest_parcel_coordinates:\n        if agent_coordinates[0] < nearest_parcel_coordinates[0]:\n            function_2()\n            if belief_set['agent']['coordinates'] == agent_coordinates:\n                break\n        elif agent_coordinates[0] > nearest_parcel_coordinates[0]:\n            function_1()\n            if belief_set['agent']['coordinates'] == agent_coordinates:\n                break\n        elif agent_coordinates[1] < nearest_parcel_coordinates[1]:\n            function_4()\n            if belief_set['agent']['coordinates'] == agent_coordinates:\n                break\n        elif agent_coordinates[1] > nearest_parcel_coordinates[1]:\n            function_3()\n            if belief_set['agent']['coordinates'] == agent_coordinates:\n                break\n        agent_coordinates = belief_set['agent']['coordinates']\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 54.58571469984321,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 23,
                                    "sloc": 23,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 112.58797503894243,
                                    "difficulty": 2.5714285714285716,
                                    "effort": 289.5119358144234,
                                    "time": 16.083996434134633,
                                    "bugs": 0.03752932501298081
                                }
                            }
                        },
                        {
                            "id": 10,
                            "description": "The agent's short term goal is to move towards the nearest key and pick it up, provided there are no obstacles in the path and the key is reachable.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                12,
                                13
                            ],
                            "function": "def function_10():\n    global belief_set\n    key_positions = [key['coordinates'] for key in belief_set['keys'].\n        values() if key['carried_by_id'] is None]\n    agent_position = belief_set['agent']['coordinates']\n    nearest_key_position = min(key_positions, key=lambda pos: abs(pos[0] -\n        agent_position[0]) + abs(pos[1] - agent_position[1]))\n    while agent_position != nearest_key_position:\n        if agent_position[0] < nearest_key_position[0]:\n            function_2()\n        elif agent_position[0] > nearest_key_position[0]:\n            function_1()\n        elif agent_position[1] < nearest_key_position[1]:\n            function_4()\n        elif agent_position[1] > nearest_key_position[1]:\n            function_3()\n        agent_position = belief_set['agent']['coordinates']\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 57.42989830568894,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 123.79398751947124,
                                    "difficulty": 3.0,
                                    "effort": 371.38196255841376,
                                    "time": 20.63233125324521,
                                    "bugs": 0.04126466250649041
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to deliver the parcel it is carrying to the nearest delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "three_times_in_wrong_intentions_or_dependency",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [
                                13,
                                14,
                                15
                            ],
                            "function": "def function_11():\n    global belief_set\n    agent_position = belief_set['agent']['coordinates']\n    delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map'\n        ]['grid'] if 'delivery' in cell['cell_type']]\n    nearest_delivery_cell = min(delivery_cells, key=lambda x: abs(x[0] -\n        agent_position[0]) + abs(x[1] - agent_position[1]))\n    while agent_position != nearest_delivery_cell:\n        if nearest_delivery_cell[0] < agent_position[0]:\n            function_1()\n            agent_position[0] -= 1\n        elif nearest_delivery_cell[0] > agent_position[0]:\n            function_2()\n            agent_position[0] += 1\n        elif nearest_delivery_cell[1] < agent_position[1]:\n            function_3()\n            agent_position[1] -= 1\n        elif nearest_delivery_cell[1] > agent_position[1]:\n            function_4()\n            agent_position[1] += 1\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 54.59612715343743,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 20,
                                    "sloc": 21,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 189.46125880997533,
                                    "difficulty": 3.391304347826087,
                                    "effort": 642.5207907468729,
                                    "time": 35.69559948593738,
                                    "bugs": 0.06315375293665844
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The agent's short term goal is to move to the nearest key and pick it up.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                9,
                                10
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    if 'keys' in belief_set and belief_set['keys']:\n        function_10()\n    else:\n        function_9()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 3
                                },
                                "mi": {
                                    "mi": 74.28529248621352,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 6,
                                    "sloc": 6,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 15.509775004326936,
                                    "difficulty": 1.0,
                                    "effort": 15.509775004326936,
                                    "time": 0.861654166907052,
                                    "bugs": 0.005169925001442312
                                }
                            }
                        },
                        {
                            "id": 13,
                            "description": "The short term goal is to navigate the environment. If the agent has a key, it will proceed to the nearest door. If not, it will go to the nearest key. If there are parcels on the ground, the agent will pick them up. If the agent is carrying a parcel, it will go to the nearest delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                10,
                                11
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    if belief_set['agent']['has_key']:\n        for door in belief_set['doors'].values():\n            if belief_set['agent']['coordinates'] == door['coordinates']:\n                function_5()\n    else:\n        function_10()\n    for parcel in belief_set['parcels'].values():\n        if belief_set['agent']['coordinates'] == parcel['coordinates']:\n            function_5()\n    if belief_set['agent']['parcels_carried_ids']:\n        function_11()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 66.74865614410032,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 13,
                                    "sloc": 13,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 13.931568569324174,
                                    "difficulty": 0.5,
                                    "effort": 6.965784284662087,
                                    "time": 0.3869880158145604,
                                    "bugs": 0.004643856189774725
                                }
                            }
                        },
                        {
                            "id": 14,
                            "description": "The short term goal is to move the agent towards the nearest parcel, pick it up if possible, and then proceed to the nearest delivery cell to drop off the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                9,
                                11
                            ],
                            "called_by": [],
                            "function": "def function_14():\n    global belief_set\n    if belief_set['agent']['parcels_carried_ids']:\n        function_11()\n    else:\n        function_9()\n    if belief_set['agent']['parcels_carried_ids']:\n        function_11()\n    else:\n        function_9()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 3
                                },
                                "mi": {
                                    "mi": 100.0,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 10,
                                    "sloc": 10,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 0,
                                    "difficulty": 0,
                                    "effort": 0,
                                    "time": 0.0,
                                    "bugs": 0.0
                                }
                            }
                        },
                        {
                            "id": 15,
                            "description": "The short term goal is to move towards a parcel, pick up the parcel if it is not carrying any, and then proceed to the nearest delivery cell to deliver the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                9,
                                11
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    if belief_set['agent']['parcels_carried_ids'] == []:\n        function_9()\n    else:\n        function_11()\n    return\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 2
                                },
                                "mi": {
                                    "mi": 76.55471099040834,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 7,
                                    "sloc": 7,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 4.754887502163469,
                                    "difficulty": 0.5,
                                    "effort": 2.3774437510817346,
                                    "time": 0.1320802083934297,
                                    "bugs": 0.0015849625007211565
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "8": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "9": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "10": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "11": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "12": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "13": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "14": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "15": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "3",
            "path": "experiments/3/2024-10-23-20-30-03",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if 'map' not in belief_set:\n        belief_set['map'] = {}\n    if event['event_type'] == 'object added':\n        belief_set['map'] = event['object']\n    elif event['event_type'] == 'object changed':\n        belief_set['map'].update(event['object'])\n    elif event['event_type'] == 'object removed':\n        belief_set['map'] = {}\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.30629883759347,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 10,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 39.863137138648355,
                                "difficulty": 1.0,
                                "effort": 39.863137138648355,
                                "time": 2.2146187299249087,
                                "bugs": 0.013287712379549451
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_2(event, belief_set):\n    if 'parcels' not in belief_set:\n        belief_set['parcels'] = {}\n    if event['event_type'] == 'object added':\n        belief_set['parcels'][event['object']['id']] = event['object']\n    elif event['event_type'] == 'object changed':\n        belief_set['parcels'][event['object']['id']].update(event['object'])\n    elif event['event_type'] == 'object removed':\n        del belief_set['parcels'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.30629883759347,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 10,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 39.863137138648355,
                                "difficulty": 1.0,
                                "effort": 39.863137138648355,
                                "time": 2.2146187299249087,
                                "bugs": 0.013287712379549451
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'agent':\n        agent = event['object']\n        if event['event_type'] == 'object added':\n            if 'agents' not in belief_set:\n                belief_set['agents'] = {}\n            belief_set['agents'][agent['id']] = agent\n        elif event['event_type'] == 'object changed':\n            if 'agents' in belief_set and agent['id'] in belief_set['agents']:\n                belief_set['agents'][agent['id']].update(agent)\n        elif event['event_type'] == 'object removed':\n            if 'agents' in belief_set and agent['id'] in belief_set['agents']:\n                del belief_set['agents'][agent['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 58.47445677559144,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 14,
                                "sloc": 14,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] == 'key':\n        if event['event_type'] == 'object added':\n            belief_set['keys'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            belief_set['keys'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object removed':\n            del belief_set['keys'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.44872847079279,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_5(event, belief_set):\n    if event['object_type'] != 'door':\n        return belief_set\n    if event['event_type'] == 'object added':\n        if 'doors' not in belief_set:\n            belief_set['doors'] = {}\n        belief_set['doors'][event['object']['id']] = event['object']\n    elif event['event_type'] == 'object changed':\n        if 'doors' in belief_set and event['object']['id'] in belief_set[\n            'doors']:\n            belief_set['doors'][event['object']['id']] = event['object']\n    elif event['event_type'] == 'object removed':\n        if 'doors' in belief_set and event['object']['id'] in belief_set[\n            'doors']:\n            del belief_set['doors'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 58.431037053128456,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 14,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 149.27754454988144,
                                "difficulty": 3.0555555555555554,
                                "effort": 456.12583056908215,
                                "time": 25.340323920504563,
                                "bugs": 0.04975918151662715
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to collect all keys available in the environment, open all the doors and deliver all the parcels to their respective delivery cells, while maximizing the score by prioritizing parcels delivered at the double points delivery cells.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The agent's short term goal is to move towards the coordinate of the nearest parcel and pick it up.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    parcel = list(belief_set['parcels'].values())[0]\n    agent = belief_set['agents'][1]\n    while parcel['coordinates'] != agent['coordinates']:\n        if parcel['coordinates'][0] < agent['coordinates'][0]:\n            function_1()\n            agent['coordinates'][0] -= 1\n        elif parcel['coordinates'][0] > agent['coordinates'][0]:\n            function_2()\n            agent['coordinates'][0] += 1\n        elif parcel['coordinates'][1] < agent['coordinates'][1]:\n            function_3()\n            agent['coordinates'][1] -= 1\n        elif parcel['coordinates'][1] > agent['coordinates'][1]:\n            function_4()\n            agent['coordinates'][1] += 1\n    function_5()\n    parcel['carried_by_id'] = 1\n    agent['parcels_carried_ids'].append(parcel['id'])\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 56.33891054753243,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 20,
                                    "sloc": 20,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 116.69205856195879,
                                    "difficulty": 3.0,
                                    "effort": 350.07617568587636,
                                    "time": 19.44867642699313,
                                    "bugs": 0.03889735285398626
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The agent's short term goal is to deliver the parcel it is currently carrying to the nearest delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    agent = belief_set['agents'][1]\n    parcel = belief_set['parcels'][agent['parcels_carried_ids'][0]]\n    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] in ['delivery_cell', 'double_points_delivery_cell']]\n    nearest_delivery_cell = min(delivery_cells, key=lambda cell: abs(cell[\n        'cell_coordinates'][0] - agent['coordinates'][0]) + abs(cell[\n        'cell_coordinates'][1] - agent['coordinates'][1]))\n    while agent['coordinates'] != nearest_delivery_cell['cell_coordinates']:\n        if agent['coordinates'][0] < nearest_delivery_cell['cell_coordinates'][\n            0]:\n            function_2()\n        elif agent['coordinates'][0] > nearest_delivery_cell['cell_coordinates'\n            ][0]:\n            function_1()\n        elif agent['coordinates'][1] < nearest_delivery_cell['cell_coordinates'\n            ][1]:\n            function_4()\n        elif agent['coordinates'][1] > nearest_delivery_cell['cell_coordinates'\n            ][1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 57.42989830568894,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 23,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 123.79398751947124,
                                    "difficulty": 3.0,
                                    "effort": 371.38196255841376,
                                    "time": 20.63233125324521,
                                    "bugs": 0.04126466250649041
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short term goal of the agent is to move towards the nearest delivery cell by comparing the agent's current position with the delivery cell's coordinates and deliver the parcel it's carrying. If the agent reaches a delivery cell, it should drop the parcel.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    max_iterations = 100\n    i = 0\n    agent = belief_set['agents'][1]\n    delivery_cell = [3, 0]\n    while i < max_iterations and agent['coordinates'] != delivery_cell:\n        if agent['coordinates'][0] < delivery_cell[0]:\n            function_2()\n            agent['coordinates'][0] += 1\n        elif agent['coordinates'][0] > delivery_cell[0]:\n            function_1()\n            agent['coordinates'][0] -= 1\n        elif agent['coordinates'][1] < delivery_cell[1]:\n            function_4()\n            agent['coordinates'][1] += 1\n        elif agent['coordinates'][1] > delivery_cell[1]:\n            function_3()\n            agent['coordinates'][1] -= 1\n        i += 1\n    if agent['coordinates'] == delivery_cell:\n        function_6()\n    return\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 53.33729435694033,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 23,
                                    "sloc": 23,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 185.4406125843753,
                                    "difficulty": 4.55,
                                    "effort": 843.7547872589075,
                                    "time": 46.875265958828194,
                                    "bugs": 0.061813537528125094
                                }
                            }
                        },
                        {
                            "id": 10,
                            "description": "The short term goal is to navigate to the nearest key, pick it up and move towards the nearest locked door.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    key_coordinates = None\n    for key_id, key_info in belief_set['keys'].items():\n        if key_info['carried_by_id'] is None:\n            key_coordinates = key_info['coordinates']\n            break\n    if key_coordinates is None:\n        return\n    agent_coordinates = belief_set['agents'][1]['coordinates']\n    while agent_coordinates[0] != key_coordinates[0]:\n        if agent_coordinates[0] > key_coordinates[0]:\n            function_1()\n        else:\n            function_2()\n    while agent_coordinates[1] != key_coordinates[1]:\n        if agent_coordinates[1] > key_coordinates[1]:\n            function_3()\n        else:\n            function_4()\n    function_5()\n    door_coordinates = None\n    for door_id, door_info in belief_set['doors'].items():\n        door_coordinates = door_info['coordinates']\n        break\n    while agent_coordinates[0] != door_coordinates[0]:\n        if agent_coordinates[0] > door_coordinates[0]:\n            function_1()\n        else:\n            function_2()\n    while agent_coordinates[1] != door_coordinates[1]:\n        if agent_coordinates[1] > door_coordinates[1]:\n            function_3()\n        else:\n            function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 49.680131090574584,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 35,
                                    "sloc": 35,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 133.78294855911892,
                                    "difficulty": 1.5789473684210527,
                                    "effort": 211.23623456702987,
                                    "time": 11.735346364834992,
                                    "bugs": 0.044594316186372975
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to navigate to the nearest key, pick it up, and then move towards the nearest locked door to open it. The agent should ensure to not enter an infinite loop by constantly updating its coordinates and breaking the loop if it runs for an excessively long duration.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    agent_id = 1\n    agent = belief_set['agents'][agent_id]\n    key = [k for k in belief_set['keys'].values() if k['carried_by_id'] is None\n        ][0]\n    key_coords = key['coordinates']\n    iteration_count = 0\n    while agent['coordinates'] != key_coords and iteration_count < 100:\n        if agent['coordinates'][0] > key_coords[0]:\n            function_1()\n        elif agent['coordinates'][0] < key_coords[0]:\n            function_2()\n        elif agent['coordinates'][1] > key_coords[1]:\n            function_3()\n        elif agent['coordinates'][1] < key_coords[1]:\n            function_4()\n        agent['coordinates'] = [agent['coordinates'][0] - 1 if agent[\n            'coordinates'][0] > key_coords[0] else agent['coordinates'][0] +\n            1 if agent['coordinates'][0] < key_coords[0] else agent[\n            'coordinates'][0], agent['coordinates'][1] - 1 if agent[\n            'coordinates'][1] > key_coords[1] else agent['coordinates'][1] +\n            1 if agent['coordinates'][1] < key_coords[1] else agent[\n            'coordinates'][1]]\n        iteration_count += 1\n    function_5()\n    if 'has_key' in agent and agent['has_key']:\n        door_coords = [d['coordinates'] for d in belief_set['doors'].values()][\n            0]\n        iteration_count = 0\n        while agent['coordinates'] != door_coords and iteration_count < 100:\n            if agent['coordinates'][0] > door_coords[0]:\n                function_1()\n            elif agent['coordinates'][0] < door_coords[0]:\n                function_2()\n            elif agent['coordinates'][1] > door_coords[1]:\n                function_3()\n            elif agent['coordinates'][1] < door_coords[1]:\n                function_4()\n            agent['coordinates'] = [agent['coordinates'][0] - 1 if agent[\n                'coordinates'][0] > door_coords[0] else agent['coordinates'\n                ][0] + 1 if agent['coordinates'][0] < door_coords[0] else\n                agent['coordinates'][0], agent['coordinates'][1] - 1 if \n                agent['coordinates'][1] > door_coords[1] else agent[\n                'coordinates'][1] + 1 if agent['coordinates'][1] <\n                door_coords[1] else agent['coordinates'][1]]\n            iteration_count += 1\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 26
                                },
                                "mi": {
                                    "mi": 43.765780731040934,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 33,
                                    "sloc": 47,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 632.3486203679877,
                                    "difficulty": 4.912280701754386,
                                    "effort": 3106.2739246146766,
                                    "time": 172.57077358970426,
                                    "bugs": 0.2107828734559959
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The short term goal is to move towards the nearest locked door, ensuring the agent's path doesn't contain any obstacles that it can't overcome, and open it using the key the agent is carrying.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    doors = belief_set['doors']\n    agent = belief_set['agents'][1]\n    min_distance = float('inf')\n    nearest_door = None\n    for door in doors.values():\n        distance = abs(door['coordinates'][0] - agent['coordinates'][0]) + abs(\n            door['coordinates'][1] - agent['coordinates'][1])\n        if distance < min_distance:\n            min_distance = distance\n            nearest_door = door\n    if nearest_door is not None:\n        if nearest_door['coordinates'][0] < agent['coordinates'][0]:\n            function_1()\n        elif nearest_door['coordinates'][0] > agent['coordinates'][0]:\n            function_2()\n        if nearest_door['coordinates'][1] < agent['coordinates'][1]:\n            function_3()\n        elif nearest_door['coordinates'][1] > agent['coordinates'][1]:\n            function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 55.93124379265811,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 20,
                                    "sloc": 21,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 122.13617281353935,
                                    "difficulty": 2.5,
                                    "effort": 305.34043203384834,
                                    "time": 16.963357335213797,
                                    "bugs": 0.040712057604513116
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "8": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "9": {
                            "n_objectives": 2,
                            "category": "grounded",
                            "one_action": false
                        },
                        "10": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "11": {
                            "n_objectives": 6,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "12": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        }
                    }
                }
            }
        }
    ],
    "experiments/4": [
        {
            "typology": "4",
            "path": "experiments/4/2024-10-28-09-50-14",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['event_type'] == 'object added':\n        belief_set[event['object_type']] = event['object']\n    elif event['event_type'] == 'object changed':\n        for key, value in event['object'].items():\n            belief_set[event['object_type']][key] = value\n    elif event['event_type'] == 'object removed':\n        del belief_set[event['object_type']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 68.6910712532007,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 25.26619429851844,
                                "difficulty": 0.5,
                                "effort": 12.63309714925922,
                                "time": 0.701838730514401,
                                "bugs": 0.008422064766172813
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] != 'parcel':\n        return belief_set\n    if event['event_type'] == 'object added':\n        if 'parcels' not in belief_set:\n            belief_set['parcels'] = {}\n        belief_set['parcels'][event['object']['id']] = event['object']\n    elif event['event_type'] == 'object changed':\n        if 'parcels' not in belief_set or event['object']['id'\n            ] not in belief_set['parcels']:\n            return belief_set\n        belief_set['parcels'][event['object']['id']].update(event['object'])\n    elif event['event_type'] == 'object removed':\n        if 'parcels' not in belief_set or event['object']['id'\n            ] not in belief_set['parcels']:\n            return belief_set\n        del belief_set['parcels'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 57.20942252967491,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 16,
                                "sloc": 18,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'agent':\n        id = event['object']['id']\n        if event['event_type'] == 'object added':\n            if 'agents' not in belief_set:\n                belief_set['agents'] = {}\n            belief_set['agents'][id] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'agents' in belief_set and id in belief_set['agents']:\n                belief_set['agents'][id].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            if 'agents' in belief_set and id in belief_set['agents']:\n                del belief_set['agents'][id]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 58.52057056900031,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 14,
                                "sloc": 14,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 144.94647495169912,
                                "difficulty": 2.588235294117647,
                                "effort": 375.15558222792714,
                                "time": 20.8419767904404,
                                "bugs": 0.048315491650566374
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] == 'key':\n        if event['event_type'] == 'object added':\n            belief_set['keys'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            if 'keys' in belief_set and event['object']['id'] in belief_set[\n                'keys']:\n                belief_set['keys'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'keys' in belief_set and event['object']['id'] in belief_set[\n                'keys']:\n                del belief_set['keys'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 9
                            },
                            "mi": {
                                "mi": 60.40528048021907,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 12,
                                "sloc": 14,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 131.76952268336282,
                                "difficulty": 1.6666666666666667,
                                "effort": 219.61587113893805,
                                "time": 12.200881729941003,
                                "bugs": 0.04392317422778761
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_5(event, belief_set):\n    if event['object_type'] == 'door':\n        if event['event_type'] == 'object added':\n            belief_set['doors'] = belief_set.get('doors', {})\n            belief_set['doors'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'doors' in belief_set and event['object']['id'] in belief_set[\n                'doors']:\n                belief_set['doors'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'doors' in belief_set and event['object']['id'] in belief_set[\n                'doors']:\n                del belief_set['doors'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 9
                            },
                            "mi": {
                                "mi": 60.40528048021907,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 12,
                                "sloc": 15,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 131.76952268336282,
                                "difficulty": 1.6666666666666667,
                                "effort": 219.61587113893805,
                                "time": 12.200881729941003,
                                "bugs": 0.04392317422778761
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to collect as many parcels as possible and deliver them to the delivery cell, while also collecting keys to open doors, in order to maximize the overall score.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The short term goal is to navigate towards the nearest parcel and pick it up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    current_position = belief_set['agents'][1]['coordinates']\n    parcel_position = belief_set['parcels'][1]['coordinates']\n    if current_position[0] > parcel_position[0]:\n        function_1()\n    elif current_position[0] < parcel_position[0]:\n        function_2()\n    elif current_position[1] > parcel_position[1]:\n        function_3()\n    elif current_position[1] < parcel_position[1]:\n        function_4()\n    else:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 63.118667122234626,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 39.863137138648355,
                                    "difficulty": 1.0,
                                    "effort": 39.863137138648355,
                                    "time": 2.2146187299249087,
                                    "bugs": 0.013287712379549451
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The agent's short term goal is to move towards the nearest parcel and pick it up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    agent_pos = belief_set['agents'][1]['coordinates']\n    parcel_pos = belief_set['parcels'][1]['coordinates']\n    if agent_pos[0] > parcel_pos[0]:\n        function_1()\n    elif agent_pos[0] < parcel_pos[0]:\n        function_2()\n    elif agent_pos[1] > parcel_pos[1]:\n        function_3()\n    elif agent_pos[1] < parcel_pos[1]:\n        function_4()\n    elif agent_pos == parcel_pos:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 61.97746292794532,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short term goal is for the agent to move towards the nearest parcel and pick it up if it is not carrying one already.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                11,
                                14,
                                15,
                                19,
                                20,
                                21
                            ],
                            "function": "def function_9():\n    global belief_set\n    agent = belief_set['agents'][1]\n    if not agent['parcels_carried_ids']:\n        parcel = min(belief_set['parcels'].values(), key=lambda p: abs(p[\n            'coordinates'][0] - agent['coordinates'][0]) + abs(p[\n            'coordinates'][1] - agent['coordinates'][1]))\n        dx = parcel['coordinates'][0] - agent['coordinates'][0]\n        dy = parcel['coordinates'][1] - agent['coordinates'][1]\n        if dx > 0:\n            function_2()\n        elif dx < 0:\n            function_1()\n        elif dy > 0:\n            function_4()\n        elif dy < 0:\n            function_3()\n        if parcel['coordinates'] == agent['coordinates']:\n            function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 56.59066665098116,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 19,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 142.7018117963935,
                                    "difficulty": 3.9375,
                                    "effort": 561.8883839482994,
                                    "time": 31.21602133046108,
                                    "bugs": 0.04756727059879784
                                }
                            }
                        },
                        {
                            "id": 10,
                            "description": "The short term goal is to deliver the carried parcel to the nearest delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    agent_location = belief_set['agents'][1]['coordinates']\n    delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map'\n        ]['grid'] if 'delivery' in cell['cell_type']]\n    delivery_cells.sort(key=lambda x: abs(x[0] - agent_location[0]) + abs(x\n        [1] - agent_location[1]))\n    target_cell = delivery_cells[0]\n    if agent_location[0] < target_cell[0]:\n        function_2()\n    elif agent_location[0] > target_cell[0]:\n        function_1()\n    elif agent_location[1] < target_cell[1]:\n        function_4()\n    elif agent_location[1] > target_cell[1]:\n        function_3()\n    else:\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 58.05310388354584,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 105.41561814669026,
                                    "difficulty": 2.5,
                                    "effort": 263.53904536672565,
                                    "time": 14.641058075929202,
                                    "bugs": 0.03513853938223009
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The short term goal is for the agent to move towards the nearest parcel, pick it up if it is not carrying one already, and then move towards the nearest delivery cell to drop off the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                9
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    if not belief_set['agents'][1]['parcels_carried_ids']:\n        function_9()\n    else:\n        parcel_coordinates = belief_set['parcels'][belief_set['agents'][1][\n            'parcels_carried_ids'][0]]['coordinates']\n        delivery_coordinates = [cell['cell_coordinates'] for cell in\n            belief_set['map']['grid'] if 'delivery_cell' in cell['cell_type']][\n            0]\n        if parcel_coordinates[0] < delivery_coordinates[0]:\n            function_2()\n        elif parcel_coordinates[0] > delivery_coordinates[0]:\n            function_1()\n        elif parcel_coordinates[1] < delivery_coordinates[1]:\n            function_4()\n        elif parcel_coordinates[1] > delivery_coordinates[1]:\n            function_3()\n        else:\n            function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 59.32337836656436,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 20,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 66.41714012534482,
                                    "difficulty": 2.0,
                                    "effort": 132.83428025068963,
                                    "time": 7.379682236149424,
                                    "bugs": 0.02213904670844827
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The agent's short term goal is to deliver the parcel it is currently carrying to the nearest delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    agent = belief_set['agents'][1]\n    delivery_cells = [cell for cell in belief_set['map']['grid'] if \n        'delivery' in cell['cell_type']]\n    min_distance = float('inf')\n    target_cell = None\n    for cell in delivery_cells:\n        distance = abs(agent['coordinates'][0] - cell['cell_coordinates'][0]\n            ) + abs(agent['coordinates'][1] - cell['cell_coordinates'][1])\n        if distance < min_distance:\n            min_distance = distance\n            target_cell = cell\n    if target_cell:\n        if agent['coordinates'][0] > target_cell['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][0] < target_cell['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][1] > target_cell['cell_coordinates'][1]:\n            function_3()\n        elif agent['coordinates'][1] < target_cell['cell_coordinates'][1]:\n            function_4()\n        else:\n            function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 54.75929939919023,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 22,
                                    "sloc": 24,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 122.13617281353935,
                                    "difficulty": 2.5,
                                    "effort": 305.34043203384834,
                                    "time": 16.963357335213797,
                                    "bugs": 0.040712057604513116
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "2": {
                    "description": "The agent's long term goal is to collect all the parcels and deliver them to their respective delivery cells while also collecting keys to unlock doors that might be blocking the path.",
                    "intentions": [
                        {
                            "id": 13,
                            "description": "The short term goal is for the agent to deliver the parcel that it is currently carrying to the nearest delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    delivery_cells = [cell for cell in belief_set['map']['grid'] if \n        'delivery' in cell['cell_type']]\n    agent_coordinates = belief_set['agents'][1]['coordinates']\n    nearest_delivery_cell = None\n    min_distance = float('inf')\n    for cell in delivery_cells:\n        distance = abs(cell['cell_coordinates'][0] - agent_coordinates[0]\n            ) + abs(cell['cell_coordinates'][1] - agent_coordinates[1])\n        if distance < min_distance:\n            min_distance = distance\n            nearest_delivery_cell = cell\n    delta_x = nearest_delivery_cell['cell_coordinates'][0] - agent_coordinates[\n        0]\n    delta_y = nearest_delivery_cell['cell_coordinates'][1] - agent_coordinates[\n        1]\n    if delta_x < 0:\n        for _ in range(abs(delta_x)):\n            function_1()\n    elif delta_x > 0:\n        for _ in range(delta_x):\n            function_2()\n    if delta_y < 0:\n        for _ in range(abs(delta_y)):\n            function_3()\n    elif delta_y > 0:\n        for _ in range(delta_y):\n            function_4()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 52.20636602928686,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 26,
                                    "sloc": 30,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 147.1612434150308,
                                    "difficulty": 3.235294117647059,
                                    "effort": 476.1099051662762,
                                    "time": 26.450550287015343,
                                    "bugs": 0.04905374780501027
                                }
                            }
                        },
                        {
                            "id": 14,
                            "description": "The short term goal is to move the agent towards the nearest key, pick it up if not carrying one already, and then move towards the nearest door to unlock it.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                9
                            ],
                            "called_by": [],
                            "function": "def function_14():\n    global belief_set\n    while belief_set['agents'][1]['has_key'] == False:\n        function_9()\n        function_5()\n    while belief_set['agents'][1]['has_key'] == True:\n        function_1()\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 3
                                },
                                "mi": {
                                    "mi": 71.88621556846499,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 8,
                                    "sloc": 8,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 13.931568569324174,
                                    "difficulty": 0.5,
                                    "effort": 6.965784284662087,
                                    "time": 0.3869880158145604,
                                    "bugs": 0.004643856189774725
                                }
                            }
                        },
                        {
                            "id": 15,
                            "description": "The agent's short term goal is to move towards the nearest key, pick it up and then move towards the nearest door to unlock it. However, if the agent is unable to acquire a key after a certain number of attempts, it should abandon this goal and instead move towards the nearest parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                9
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    max_attempts = 100\n    attempts = 0\n    while not belief_set['agents'][1]['has_key'] and attempts < max_attempts:\n        function_9()\n        function_5()\n        attempts += 1\n    if belief_set['agents'][1]['has_key']:\n        while belief_set['doors'] and attempts < max_attempts:\n            function_9()\n            attempts += 1\n    else:\n        while belief_set['parcels'] and attempts < max_attempts:\n            function_9()\n            attempts += 1\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 58.35208417199938,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 16,
                                    "sloc": 16,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 110.41329273967051,
                                    "difficulty": 3.8,
                                    "effort": 419.57051241074794,
                                    "time": 23.30947291170822,
                                    "bugs": 0.0368044309132235
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "3": {
                    "description": "The agent's long term goal is to efficiently navigate the map, collect all available parcels and keys, and make successful deliveries to the designated cells, all while maximizing the overall score.",
                    "intentions": [
                        {
                            "id": 16,
                            "description": "The short term goal is to navigate the agent to the nearest key and pick it up if it does not carry one already. This is to ensure that the agent has the ability to open any doors that may block its path while navigating or making deliveries.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_16():\n    global belief_set\n    agent = belief_set['agents'][1]\n    key_locations = [key['coordinates'] for key in belief_set['keys'].\n        values() if key['carried_by_id'] is None]\n    if not agent['has_key'] and key_locations:\n        nearest_key_location = min(key_locations, key=lambda c: abs(c[0] -\n            agent['coordinates'][0]) + abs(c[1] - agent['coordinates'][1]))\n        while agent['coordinates'] != nearest_key_location:\n            if agent['coordinates'][0] < nearest_key_location[0]:\n                function_2()\n            elif agent['coordinates'][0] > nearest_key_location[0]:\n                function_1()\n            if agent['coordinates'][1] < nearest_key_location[1]:\n                function_4()\n            elif agent['coordinates'][1] > nearest_key_location[1]:\n                function_3()\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 56.4683496816126,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 155.45539184408233,
                                    "difficulty": 4.0,
                                    "effort": 621.8215673763293,
                                    "time": 34.54564263201829,
                                    "bugs": 0.05181846394802744
                                }
                            }
                        },
                        {
                            "id": 17,
                            "description": "The short term goal is for the agent to navigate towards the nearest key, pick it up if it is not already carrying a key, and to avoid infinite loops by breaking the movement loop if the agent's location does not change after a movement attempt.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_17():\n    global belief_set\n    agent = belief_set['agents'][1]\n    if not agent['has_key']:\n        nearest_key_location = min(belief_set['keys'], key=lambda k: abs(\n            agent['coordinates'][0] - belief_set['keys'][k]['coordinates'][\n            0]) + abs(agent['coordinates'][1] - belief_set['keys'][k][\n            'coordinates'][1]))\n        nearest_key_location = belief_set['keys'][nearest_key_location][\n            'coordinates']\n        previous_location = agent['coordinates'].copy()\n        while agent['coordinates'] != nearest_key_location:\n            if agent['coordinates'][0] < nearest_key_location[0]:\n                function_2()\n            elif agent['coordinates'][0] > nearest_key_location[0]:\n                function_1()\n            if agent['coordinates'][1] < nearest_key_location[1]:\n                function_4()\n            elif agent['coordinates'][1] > nearest_key_location[1]:\n                function_3()\n            if agent['coordinates'] == previous_location:\n                break\n            previous_location = agent['coordinates'].copy()\n        if agent['coordinates'] == nearest_key_location:\n            function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 54.22548875399477,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 22,
                                    "sloc": 25,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 152.156400069231,
                                    "difficulty": 3.675,
                                    "effort": 559.174770254424,
                                    "time": 31.065265014134663,
                                    "bugs": 0.05071880002307701
                                }
                            }
                        },
                        {
                            "id": 18,
                            "description": "The agent's short term goal is to navigate to the cell containing the key, pick up the key if the agent does not already have one, and avoid getting stuck in an infinite loop by breaking the loop if the agent's location does not change after a movement attempt.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                20,
                                21
                            ],
                            "function": "def function_18():\n    global belief_set\n    agent = belief_set['agents'][1]\n    key = belief_set['keys'][1]\n    previous_coordinates = agent['coordinates'].copy()\n    while agent['coordinates'] != key['coordinates'] or not agent['has_key']:\n        if agent['coordinates'][0] < key['coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > key['coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < key['coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > key['coordinates'][1]:\n            function_3()\n        if agent['coordinates'] == key['coordinates'] and not agent['has_key']:\n            function_5()\n        if agent['coordinates'] == previous_coordinates:\n            break\n        previous_coordinates = agent['coordinates'].copy()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 55.57640659793874,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 19,
                                    "sloc": 19,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 147.40151256706756,
                                    "difficulty": 3.5,
                                    "effort": 515.9052939847364,
                                    "time": 28.661405221374245,
                                    "bugs": 0.04913383752235585
                                }
                            }
                        },
                        {
                            "id": 19,
                            "description": "The agent's short term goal is to move towards the nearest parcel and pick it up, if it is not carrying one already. If the agent is already carrying a parcel, it will then head towards the nearest delivery cell to drop off the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                9
                            ],
                            "called_by": [],
                            "function": "def function_19():\n    global belief_set\n    if belief_set['agents'][1]['parcels_carried_ids']:\n        function_6()\n        for cell in belief_set['map']['grid']:\n            if cell['cell_type'] == 'delivery_cell' or cell['cell_type'\n                ] == 'double_points_delivery_cell':\n                while belief_set['agents'][1]['coordinates'] != cell[\n                    'cell_coordinates']:\n                    if belief_set['agents'][1]['coordinates'][0] > cell[\n                        'cell_coordinates'][0]:\n                        function_1()\n                    elif belief_set['agents'][1]['coordinates'][0] < cell[\n                        'cell_coordinates'][0]:\n                        function_2()\n                    elif belief_set['agents'][1]['coordinates'][1] > cell[\n                        'cell_coordinates'][1]:\n                        function_3()\n                    else:\n                        function_4()\n    else:\n        function_9()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 58.29180397987603,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 22,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 89.20647778231529,
                                    "difficulty": 2.5,
                                    "effort": 223.01619445578822,
                                    "time": 12.389788580877124,
                                    "bugs": 0.029735492594105097
                                }
                            }
                        },
                        {
                            "id": 20,
                            "description": "The agent's short term goal is to move towards the nearest parcel and pick it up if it is not carrying one already. If the agent is already carrying a parcel, it will then head towards the nearest delivery cell to drop off the parcel. The function also includes an exit condition in the loop to prevent infinite looping.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                9,
                                18
                            ],
                            "called_by": [],
                            "function": "def function_20():\n    global belief_set\n    max_iterations = 1000\n    iteration = 0\n    while iteration < max_iterations:\n        iteration += 1\n        previous_location = belief_set['agents'][1]['coordinates']\n        if len(belief_set['agents'][1]['parcels_carried_ids']) == 0:\n            function_9()\n        else:\n            function_18()\n        if belief_set['agents'][1]['coordinates'] == previous_location:\n            break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 4
                                },
                                "mi": {
                                    "mi": 63.95524557187807,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 13,
                                    "sloc": 13,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 39.863137138648355,
                                    "difficulty": 1.7142857142857142,
                                    "effort": 68.33680652339717,
                                    "time": 3.796489251299843,
                                    "bugs": 0.013287712379549451
                                }
                            }
                        },
                        {
                            "id": 21,
                            "description": "The agent's short term goal is to find and pick up the nearest parcel, then navigate towards the nearest delivery cell to drop off the parcel. The agent should also be able to open doors using a key, if one is available in its possession.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6,
                                9,
                                18
                            ],
                            "called_by": [],
                            "function": "def function_21():\n    global belief_set\n    if len(belief_set['agents'][1]['parcels_carried_ids']) == 0:\n        function_9()\n    else:\n        parcel_coord = belief_set['parcels'][belief_set['agents'][1][\n            'parcels_carried_ids'][0]]['coordinates']\n        delivery_cells = [cell for cell in belief_set['map']['grid'] if \n            cell['cell_type'] in ['delivery_cell',\n            'double_points_delivery_cell']]\n        delivery_cells.sort(key=lambda cell: abs(cell['cell_coordinates'][0\n            ] - parcel_coord[0]) + abs(cell['cell_coordinates'][1] -\n            parcel_coord[1]))\n        target_delivery_cell = delivery_cells[0]\n        while belief_set['agents'][1]['coordinates'] != target_delivery_cell[\n            'cell_coordinates']:\n            if belief_set['agents'][1]['coordinates'][0\n                ] > target_delivery_cell['cell_coordinates'][0]:\n                function_1()\n            elif belief_set['agents'][1]['coordinates'][0\n                ] < target_delivery_cell['cell_coordinates'][0]:\n                function_2()\n            elif belief_set['agents'][1]['coordinates'][1\n                ] > target_delivery_cell['cell_coordinates'][1]:\n                function_3()\n            elif belief_set['agents'][1]['coordinates'][1\n                ] < target_delivery_cell['cell_coordinates'][1]:\n                function_4()\n            if belief_set['agents'][1]['coordinates'] in [door[\n                'coordinates'] for door in belief_set['doors'].values()\n                ] and belief_set['agents'][1]['has_key']:\n                function_18()\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 12
                                },
                                "mi": {
                                    "mi": 53.310957094132284,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 22,
                                    "sloc": 33,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 180.0,
                                    "difficulty": 4.0,
                                    "effort": 720.0,
                                    "time": 40.0,
                                    "bugs": 0.06
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": "def function_dtf_1(belief_set):\n    if belief_set['parcels']:\n        return True\n    if belief_set['agents'][1]['parcels_carried_ids']:\n        return True\n    if belief_set['keys']:\n        for key in belief_set['keys']:\n            if belief_set['keys'][key]['carried_by_id'] is None:\n                return True\n    if belief_set['doors']:\n        for door in belief_set['doors']:\n            if belief_set['doors'][door]['coordinates'] in [cell[\n                'cell_coordinates'] for cell in belief_set['map']['grid'] if\n                cell['cell_type'] == 'walkable']:\n                return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 11
                        },
                        "mi": {
                            "mi": 63.328901888035844,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 14,
                            "sloc": 16,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 28.529325012980813,
                            "difficulty": 1.5,
                            "effort": 42.793987519471216,
                            "time": 2.377443751081734,
                            "bugs": 0.009509775004326938
                        }
                    }
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "8": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "9": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "10": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "11": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "12": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        }
                    }
                },
                "2": {
                    "n_objectives": 4,
                    "intentions": {
                        "13": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "14": {
                            "n_objectives": 4,
                            "category": "predetermined",
                            "one_action": false
                        },
                        "15": {
                            "n_objectives": 6,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "3": {
                    "n_objectives": 5,
                    "intentions": {
                        "16": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "17": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "18": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "19": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "20": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "21": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "4",
            "path": "experiments/4/2024-10-28-09-41-36",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added' or event['event_type'\n            ] == 'object changed':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object removed':\n            del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 68.77503208599303,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 7,
                                "sloc": 8,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 53.77443751081735,
                                "difficulty": 1.0,
                                "effort": 53.77443751081735,
                                "time": 2.987468750600964,
                                "bugs": 0.017924812503605784
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_2(event, belief):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcels' not in belief:\n                belief['parcels'] = {}\n            belief['parcels'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'parcels' in belief and event['object']['id'] in belief[\n                'parcels']:\n                belief['parcels'][event['object']['id']].update(event['object']\n                    )\n        elif event['event_type'] == 'object removed':\n            if 'parcels' in belief and event['object']['id'] in belief[\n                'parcels']:\n                del belief['parcels'][event['object']['id']]\n    return belief",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.17653230125827,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['agent'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['agent']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] != 'key':\n        return belief_set\n    if 'keys' not in belief_set:\n        belief_set['keys'] = {}\n    if event['event_type'] == 'object added':\n        belief_set['keys'][event['object']['id']] = event['object']\n    elif event['event_type'] == 'object changed':\n        belief_set['keys'][event['object']['id']].update(event['object'])\n    elif event['event_type'] == 'object removed':\n        del belief_set['keys'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 6
                            },
                            "mi": {
                                "mi": 63.437837789466705,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 12,
                                "sloc": 12,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 55.506595772116384,
                                "difficulty": 1.5,
                                "effort": 83.25989365817458,
                                "time": 4.625549647676365,
                                "bugs": 0.01850219859070546
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_5(event, belief_set):\n    if event['object_type'] == 'door':\n        if event['event_type'] == 'object added':\n            belief_set['doors'] = belief_set.get('doors', {})\n            belief_set['doors'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'doors' in belief_set and event['object']['id'] in belief_set[\n                'doors']:\n                belief_set['doors'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'doors' in belief_set and event['object']['id'] in belief_set[\n                'doors']:\n                del belief_set['doors'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 9
                            },
                            "mi": {
                                "mi": 60.40528048021907,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 12,
                                "sloc": 15,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 131.76952268336282,
                                "difficulty": 1.6666666666666667,
                                "effort": 219.61587113893805,
                                "time": 12.200881729941003,
                                "bugs": 0.04392317422778761
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to efficiently collect all the parcels and deliver them to the delivery cells while navigating the map, unlocking doors if necessary to reach the destination.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The agent's short term goal is to move towards the nearest parcel and pick it up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    agent_pos = belief_set['agent']['coordinates']\n    parcel_pos = belief_set['parcels'][1]['coordinates']\n    if agent_pos[0] < parcel_pos[0]:\n        function_2()\n    elif agent_pos[0] > parcel_pos[0]:\n        function_1()\n    elif agent_pos[1] < parcel_pos[1]:\n        function_4()\n    elif agent_pos[1] > parcel_pos[1]:\n        function_3()\n    else:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 63.118667122234626,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 39.863137138648355,
                                    "difficulty": 1.0,
                                    "effort": 39.863137138648355,
                                    "time": 2.2146187299249087,
                                    "bugs": 0.013287712379549451
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The agent's short term goal is to move towards the parcel and pick it up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    parcel_coordinates = belief_set['parcels'][1]['coordinates']\n    agent_coordinates = belief_set['agent']['coordinates']\n    if agent_coordinates[0] > parcel_coordinates[0]:\n        function_1()\n    elif agent_coordinates[0] < parcel_coordinates[0]:\n        function_2()\n    elif agent_coordinates[1] > parcel_coordinates[1]:\n        function_3()\n    elif agent_coordinates[1] < parcel_coordinates[1]:\n        function_4()\n    else:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 63.118667122234626,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 39.863137138648355,
                                    "difficulty": 1.0,
                                    "effort": 39.863137138648355,
                                    "time": 2.2146187299249087,
                                    "bugs": 0.013287712379549451
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The agent's short term goal is to find and pick up a parcel.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                20
                            ],
                            "function": "def function_9():\n    global belief_set\n    parcel_coordinates = belief_set['parcels'][1]['coordinates']\n    agent_coordinates = belief_set['agent']['coordinates']\n    while agent_coordinates != parcel_coordinates:\n        if parcel_coordinates[0] < agent_coordinates[0]:\n            function_1()\n        elif parcel_coordinates[0] > agent_coordinates[0]:\n            function_2()\n        elif parcel_coordinates[1] < agent_coordinates[1]:\n            function_3()\n        elif parcel_coordinates[1] > agent_coordinates[1]:\n            function_4()\n        agent_coordinates = belief_set['agent']['coordinates']\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 61.32384625070051,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 10,
                            "description": "The agent's short term goal is to move to a cell containing a parcel and pick it up.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    agent_coords = belief_set['agent']['coordinates']\n    parcel_coords = belief_set['parcels'][1]['coordinates']\n    if agent_coords[0] < parcel_coords[0]:\n        function_2()\n    elif agent_coords[0] > parcel_coords[0]:\n        function_1()\n    elif agent_coords[1] < parcel_coords[1]:\n        function_4()\n    elif agent_coords[1] > parcel_coords[1]:\n        function_3()\n    if agent_coords == parcel_coords:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 61.97746292794532,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to move to a delivery cell and deliver the parcel it is carrying.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    delivery_cells = [cell for cell in belief_set['map']['grid'] if \n        'delivery' in cell['cell_type']]\n    closest_delivery_cell = min(delivery_cells, key=lambda cell: abs(cell[\n        'cell_coordinates'][0] - belief_set['agent']['coordinates'][0]) +\n        abs(cell['cell_coordinates'][1] - belief_set['agent']['coordinates'\n        ][1]))\n    while belief_set['agent']['coordinates'] != closest_delivery_cell[\n        'cell_coordinates']:\n        if belief_set['agent']['coordinates'][0] < closest_delivery_cell[\n            'cell_coordinates'][0]:\n            function_2()\n        elif belief_set['agent']['coordinates'][0] > closest_delivery_cell[\n            'cell_coordinates'][0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][1] < closest_delivery_cell[\n            'cell_coordinates'][1]:\n            function_4()\n        else:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 59.192746181280185,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 22,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 107.02635884729514,
                                    "difficulty": 3.0,
                                    "effort": 321.07907654188546,
                                    "time": 17.837726474549193,
                                    "bugs": 0.03567545294909838
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The agent's short term goal is to move to the nearest delivery cell and deliver the parcel it is carrying.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    delivery_cells = [cell for cell in belief_set['map']['grid'] if \n        'delivery' in cell['cell_type']]\n    agent_position = belief_set['agent']['coordinates']\n    nearest_delivery_cell = min(delivery_cells, key=lambda cell: abs(cell[\n        'cell_coordinates'][0] - agent_position[0]) + abs(cell[\n        'cell_coordinates'][1] - agent_position[1]))\n    while agent_position != nearest_delivery_cell['cell_coordinates']:\n        if agent_position[0] < nearest_delivery_cell['cell_coordinates'][0]:\n            function_2()\n        elif agent_position[0] > nearest_delivery_cell['cell_coordinates'][0]:\n            function_1()\n        elif agent_position[1] < nearest_delivery_cell['cell_coordinates'][1]:\n            function_4()\n        elif agent_position[1] > nearest_delivery_cell['cell_coordinates'][1]:\n            function_3()\n        if agent_position == belief_set['agent']['coordinates']:\n            break\n        agent_position = belief_set['agent']['coordinates']\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 55.8456436453957,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 19,
                                    "sloc": 21,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 141.01319154423277,
                                    "difficulty": 3.6842105263157894,
                                    "effort": 519.522284636647,
                                    "time": 28.862349146480387,
                                    "bugs": 0.047004397181410924
                                }
                            }
                        },
                        {
                            "id": 13,
                            "description": "The agent's short term goal is to move to the nearest delivery cell by navigating the map and then deliver the parcel it is carrying, ensuring it is in the correct cell before attempting the delivery and also ensuring it still has the parcel before trying to deliver it.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    agent = belief_set['agent']\n    parcels = agent['parcels_carried_ids']\n    if parcels and any(cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] in ['delivery_cell', 'double_points_delivery_cell'] and\n        cell['cell_coordinates'] == agent['coordinates']):\n        function_6()\n    elif agent['coordinates'][0] < belief_set['map']['width'] - 1:\n        function_2()\n    elif agent['coordinates'][0] > 0:\n        function_1()\n    elif agent['coordinates'][1] < belief_set['map']['height'] - 1:\n        function_4()\n    elif agent['coordinates'][1] > 0:\n        function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 58.67987067558533,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 16,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 137.5488750216347,
                                    "difficulty": 3.3333333333333335,
                                    "effort": 458.4962500721157,
                                    "time": 25.472013892895315,
                                    "bugs": 0.04584962500721157
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "2": {
                    "description": "The agent's long term goal is to efficiently navigate through the environment, pick up and deliver parcels to their respective delivery cells while also collecting keys to unlock doors when necessary.",
                    "intentions": [
                        {
                            "id": 14,
                            "description": "The agent's short term goal is to move to the cell containing a parcel and pick it up.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_14():\n    global belief_set\n    agent_coordinates = belief_set['agent']['coordinates']\n    parcel_coordinates = belief_set['parcels'][1]['coordinates']\n    while agent_coordinates != parcel_coordinates:\n        if agent_coordinates[0] < parcel_coordinates[0]:\n            function_2()\n            agent_coordinates[0] += 1\n        elif agent_coordinates[0] > parcel_coordinates[0]:\n            function_1()\n            agent_coordinates[0] -= 1\n        elif agent_coordinates[1] < parcel_coordinates[1]:\n            function_4()\n            agent_coordinates[1] += 1\n        elif agent_coordinates[1] > parcel_coordinates[1]:\n            function_3()\n            agent_coordinates[1] -= 1\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 57.33706280113289,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 116.69205856195879,
                                    "difficulty": 3.0,
                                    "effort": 350.07617568587636,
                                    "time": 19.44867642699313,
                                    "bugs": 0.03889735285398626
                                }
                            }
                        },
                        {
                            "id": 15,
                            "description": "The agent's short term goal is to deliver a parcel by moving to a delivery cell and putting down the parcel it's carrying.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map'\n        ]['grid'] if 'delivery' in cell['cell_type']]\n    agent_coordinates = belief_set['agent']['coordinates']\n    if agent_coordinates in delivery_cells:\n        function_6()\n    else:\n        target_cell = delivery_cells[0]\n        if agent_coordinates[0] < target_cell[0]:\n            function_2()\n        elif agent_coordinates[0] > target_cell[0]:\n            function_1()\n        elif agent_coordinates[1] < target_cell[1]:\n            function_4()\n        elif agent_coordinates[1] > target_cell[1]:\n            function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 59.723901829405605,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 16,
                                    "sloc": 17,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 70.32403072095333,
                                    "difficulty": 1.5,
                                    "effort": 105.48604608143,
                                    "time": 5.860335893412778,
                                    "bugs": 0.02344134357365111
                                }
                            }
                        },
                        {
                            "id": 16,
                            "description": "The agent's short term goal is to deliver the parcel it is currently carrying to the nearest delivery cell, if it has one. If the agent doesn't carry a parcel, it should move towards the nearest parcel to pick it up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_16():\n    global belief_set\n    agent_coordinates = belief_set['agent']['coordinates']\n    if belief_set['agent']['parcels_carried_ids']:\n        delivery_cells = [cell for cell in belief_set['map']['grid'] if \n            'delivery' in cell['cell_type']]\n        delivery_cells.sort(key=lambda cell: abs(cell['cell_coordinates'][0\n            ] - agent_coordinates[0]) + abs(cell['cell_coordinates'][1] -\n            agent_coordinates[1]))\n        target_coordinates = delivery_cells[0]['cell_coordinates']\n        function_6(\n            ) if agent_coordinates == target_coordinates else function_1(\n            ) if agent_coordinates[0] > target_coordinates[0] else function_2(\n            ) if agent_coordinates[0] < target_coordinates[0] else function_3(\n            ) if agent_coordinates[1] > target_coordinates[1] else function_4()\n    else:\n        parcels = [parcel for parcel in belief_set['parcels'].values()]\n        parcels.sort(key=lambda parcel: abs(parcel['coordinates'][0] -\n            agent_coordinates[0]) + abs(parcel['coordinates'][1] -\n            agent_coordinates[1]))\n        target_coordinates = parcels[0]['coordinates']\n        function_5(\n            ) if agent_coordinates == target_coordinates else function_1(\n            ) if agent_coordinates[0] > target_coordinates[0] else function_2(\n            ) if agent_coordinates[0] < target_coordinates[0] else function_3(\n            ) if agent_coordinates[1] > target_coordinates[1] else function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 56.073502755509836,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 26,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 228.9358278562653,
                                    "difficulty": 3.2142857142857144,
                                    "effort": 735.865160966567,
                                    "time": 40.881397831475944,
                                    "bugs": 0.0763119426187551
                                }
                            }
                        },
                        {
                            "id": 17,
                            "description": "The agent's short term goal is to deliver the parcel it is currently carrying to the closest delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_17():\n    global belief_set\n    agent_position = belief_set['agent']['coordinates']\n    delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map'\n        ]['grid'] if 'delivery' in cell['cell_type']]\n    closest_delivery_cell = min(delivery_cells, key=lambda cell: abs(cell[0\n        ] - agent_position[0]) + abs(cell[1] - agent_position[1]))\n    while agent_position != closest_delivery_cell:\n        if agent_position[0] < closest_delivery_cell[0]:\n            function_2()\n        elif agent_position[0] > closest_delivery_cell[0]:\n            function_1()\n        elif agent_position[1] < closest_delivery_cell[1]:\n            function_4()\n        else:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 58.58132861260845,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 16,
                                    "sloc": 17,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 107.02635884729514,
                                    "difficulty": 3.0,
                                    "effort": 321.07907654188546,
                                    "time": 17.837726474549193,
                                    "bugs": 0.03567545294909838
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "3": {
                    "description": "The long-term goal is to strategically plan a route that maximizes the agent's overall score, by collecting and delivering as many parcels as possible, and using keys to open doors when it is beneficial.",
                    "intentions": [
                        {
                            "id": 18,
                            "description": "The short term goal is to make the agent deliver the current parcel it's carrying to a delivery cell. The function will make the agent move towards the delivery cell and once it's there, it will drop off the parcel",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_18():\n    global belief_set\n    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell\n        ['cell_type'] in ['delivery_cell', 'double_points_delivery_cell'])\n    agent = belief_set['agent']\n    while agent['coordinates'] != delivery_cell['cell_coordinates']:\n        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 60.91731429318675,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 72.0,
                                    "difficulty": 2.0,
                                    "effort": 144.0,
                                    "time": 8.0,
                                    "bugs": 0.024
                                }
                            }
                        },
                        {
                            "id": 19,
                            "description": "The short term goal is to deliver a parcel to a delivery cell. The agent will navigate through the environment, adjusting its coordinates as necessary, to reach a delivery cell and drop off the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_19():\n    global belief_set\n    delivered = False\n    iterations = 0\n    while not delivered and iterations < 50:\n        agent_coords = belief_set['agent']['coordinates']\n        delivery_coords = [cell['cell_coordinates'] for cell in belief_set[\n            'map']['grid'] if cell['cell_type'] in ['delivery_cell',\n            'double_points_delivery_cell']]\n        for coords in delivery_coords:\n            if agent_coords[0] < coords[0]:\n                function_2()\n            elif agent_coords[0] > coords[0]:\n                function_1()\n            elif agent_coords[1] < coords[1]:\n                function_4()\n            elif agent_coords[1] > coords[1]:\n                function_3()\n            else:\n                function_6()\n                delivered = True\n                break\n        iterations += 1\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 55.35820096890239,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 21,
                                    "sloc": 23,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 115.94522208456974,
                                    "difficulty": 3.1875,
                                    "effort": 369.57539539456604,
                                    "time": 20.531966410809225,
                                    "bugs": 0.038648407361523245
                                }
                            }
                        },
                        {
                            "id": 20,
                            "description": "The short-term goal is to deliver the parcel that the agent is currently carrying by moving towards the delivery cell, while avoiding back-and-forth movements and checking that the delivery cell is reachable.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                9
                            ],
                            "called_by": [],
                            "function": "def function_20():\n    global belief_set\n    current_position = belief_set['agent']['coordinates']\n    parcels_carried = belief_set['agent']['parcels_carried_ids']\n    if parcels_carried:\n        delivery_cell = next((cell['cell_coordinates'] for cell in\n            belief_set['map']['grid'] if cell['cell_type'] in [\n            'delivery_cell', 'double_points_delivery_cell']), None)\n        if delivery_cell:\n            previous_position = current_position\n            while current_position != delivery_cell:\n                if current_position[0] < delivery_cell[0]:\n                    function_2()\n                elif current_position[0] > delivery_cell[0]:\n                    function_1()\n                elif current_position[1] < delivery_cell[1]:\n                    function_4()\n                elif current_position[1] > delivery_cell[1]:\n                    function_3()\n                if current_position == previous_position:\n                    break\n                previous_position = current_position\n            function_6()\n    else:\n        function_9()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 11
                                },
                                "mi": {
                                    "mi": 55.215442785843635,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 23,
                                    "sloc": 25,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 87.56842503028855,
                                    "difficulty": 2.6923076923076925,
                                    "effort": 235.76114431231534,
                                    "time": 13.097841350684185,
                                    "bugs": 0.029189475010096184
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "4": {
                    "description": "The agent should aim to carry as many parcels as possible to the double points delivery cell to maximize its score, while also collecting keys to unlock doors whenever necessary.",
                    "intentions": [
                        {
                            "id": 21,
                            "description": "The agent's short term goal is to move to a cell containing a key and pick it up. This will allow the agent to unlock doors, giving access to areas required to reach the double points delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_21():\n    global belief_set\n    keys = belief_set['keys']\n    agent_position = belief_set['agent']['coordinates']\n    for key_id, key_details in keys.items():\n        if key_details['carried_by_id'] is None:\n            key_position = key_details['coordinates']\n            while agent_position != key_position:\n                if agent_position[0] < key_position[0]:\n                    function_2()\n                elif agent_position[0] > key_position[0]:\n                    function_1()\n                if agent_position[1] < key_position[1]:\n                    function_4()\n                elif agent_position[1] > key_position[1]:\n                    function_3()\n            function_5()\n            break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 58.536440762104476,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 72.0,
                                    "difficulty": 2.0,
                                    "effort": 144.0,
                                    "time": 8.0,
                                    "bugs": 0.024
                                }
                            }
                        },
                        {
                            "id": 22,
                            "description": "The short term goal is to move the agent to the cell containing the closest parcel and pick it up, if the agent is not carrying any parcels. The agent's belief of its own position is updated after each move.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_22():\n    global belief_set\n    agent_position = belief_set['agent']['coordinates']\n    parcel_position = sorted(belief_set['parcels'].values(), key=lambda x: \n        abs(x['coordinates'][0] - agent_position[0]) + abs(x['coordinates']\n        [1] - agent_position[1]))[0]['coordinates']\n    while agent_position != parcel_position and len(belief_set['agent'][\n        'parcels_carried_ids']) == 0:\n        if agent_position[0] < parcel_position[0]:\n            function_2()\n        elif agent_position[0] > parcel_position[0]:\n            function_1()\n        elif agent_position[1] < parcel_position[1]:\n            function_4()\n        elif agent_position[1] > parcel_position[1]:\n            function_3()\n        agent_position = belief_set['agent']['coordinates']\n        if agent_position == parcel_position:\n            function_5()\n            break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 56.16750784254432,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 20,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 156.91128757139447,
                                    "difficulty": 3.85,
                                    "effort": 604.1084571498687,
                                    "time": 33.561580952770484,
                                    "bugs": 0.052303762523798154
                                }
                            }
                        },
                        {
                            "id": 23,
                            "description": "The short term goal of the agent is to move to the cell containing the closest parcel and pick it up if the agent is not carrying any parcels, while ensuring that it does not violate the boundaries of the map.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                26
                            ],
                            "function": "def function_23():\n    global belief_set\n    if not belief_set['agent']['parcels_carried_ids']:\n        parcel_coord = belief_set['parcels'][1]['coordinates']\n        agent_coord = belief_set['agent']['coordinates']\n        while agent_coord != parcel_coord:\n            if parcel_coord[0] < agent_coord[0]:\n                if agent_coord[0] > 0:\n                    function_1()\n            elif parcel_coord[0] > agent_coord[0]:\n                if agent_coord[0] < belief_set['map']['height'] - 1:\n                    function_2()\n            if parcel_coord[1] < agent_coord[1]:\n                if agent_coord[1] > 0:\n                    function_3()\n            elif parcel_coord[1] > agent_coord[1]:\n                if agent_coord[1] < belief_set['map']['width'] - 1:\n                    function_4()\n            agent_coord = belief_set['agent']['coordinates']\n        function_5()\n    return\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 11
                                },
                                "mi": {
                                    "mi": 54.15971641514723,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 21,
                                    "sloc": 21,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 164.51539013493823,
                                    "difficulty": 2.738095238095238,
                                    "effort": 450.4588063218547,
                                    "time": 25.025489240103038,
                                    "bugs": 0.054838463378312746
                                }
                            }
                        },
                        {
                            "id": 24,
                            "description": "The short term goal is to deliver the parcel the agent is currently carrying to the double points delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_24():\n    global belief_set\n    agent = belief_set['agent']\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'double_points_delivery_cell'][0]['cell_coordinates']\n    if agent['coordinates'][0] < delivery_cell[0]:\n        function_2()\n    elif agent['coordinates'][0] > delivery_cell[0]:\n        function_1()\n    elif agent['coordinates'][1] < delivery_cell[1]:\n        function_4()\n    elif agent['coordinates'][1] > delivery_cell[1]:\n        function_3()\n    else:\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 61.8429600039687,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 25,
                            "description": "The agent's short term goal is to move towards the double points delivery cell while carrying the parcel. If there is a door blocking the path and the agent doesn't have a key, it will go towards the nearest key.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_25():\n    global belief_set\n    agent = belief_set['agent']\n    parcels = belief_set['parcels']\n    map = belief_set['map']['grid']\n    keys = belief_set['keys']\n    doors = belief_set['doors']\n    for cell in map:\n        if cell['cell_type'] == 'double_points_delivery_cell':\n            target = cell['cell_coordinates']\n    if 'carried_by_id' in parcels[1] and parcels[1]['carried_by_id'] == agent[\n        'id']:\n        if agent['coordinates'][0] < target[0]:\n            function_2()\n        elif agent['coordinates'][0] > target[0]:\n            function_1()\n        elif agent['coordinates'][1] < target[1]:\n            function_4()\n        else:\n            function_3()\n    else:\n        if not agent['has_key']:\n            for key in keys.values():\n                if key['carried_by_id'] is None:\n                    if agent['coordinates'][0] < key['coordinates'][0]:\n                        function_2()\n                    elif agent['coordinates'][0] > key['coordinates'][0]:\n                        function_1()\n                    elif agent['coordinates'][1] < key['coordinates'][1]:\n                        function_4()\n                    else:\n                        function_3()\n        else:\n            for door in doors.values():\n                if agent['coordinates'][0] < door['coordinates'][0]:\n                    function_2()\n                elif agent['coordinates'][0] > door['coordinates'][0]:\n                    function_1()\n                elif agent['coordinates'][1] < door['coordinates'][1]:\n                    function_4()\n                else:\n                    function_3()\n        function_5()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 18
                                },
                                "mi": {
                                    "mi": 45.44322192010711,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 43,
                                    "sloc": 44,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 227.47670006346175,
                                    "difficulty": 3.5,
                                    "effort": 796.1684502221161,
                                    "time": 44.23158056789534,
                                    "bugs": 0.07582556668782059
                                }
                            }
                        },
                        {
                            "id": 26,
                            "description": "The agent's short term goal is to pick up the closest parcel if not carrying any parcels, and if carrying a parcel, to deliver it to the nearest delivery cell",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                23
                            ],
                            "called_by": [],
                            "function": "def function_26():\n    global belief_set\n    if not belief_set['agent']['parcels_carried_ids']:\n        function_23()\n    else:\n        coordinates = belief_set['agent']['coordinates']\n        delivery_cells = [cell['cell_coordinates'] for cell in belief_set[\n            'map']['grid'] if cell['cell_type'] in ['delivery_cell',\n            'double_points_delivery_cell']]\n        delivery_cells.sort(key=lambda x: abs(coordinates[0] - x[0]) + abs(\n            coordinates[1] - x[1]))\n        target_cell = delivery_cells[0]\n        while coordinates != target_cell:\n            if coordinates[0] < target_cell[0]:\n                function_2()\n            elif coordinates[0] > target_cell[0]:\n                function_1()\n            elif coordinates[1] < target_cell[1]:\n                function_4()\n            elif coordinates[1] > target_cell[1]:\n                function_3()\n            coordinates = belief_set['agent']['coordinates']\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 55.00057700217373,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 21,
                                    "sloc": 23,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 136.3127518260917,
                                    "difficulty": 3.5,
                                    "effort": 477.09463139132095,
                                    "time": 26.50525729951783,
                                    "bugs": 0.04543758394203057
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "8": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "9": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "10": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "11": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "12": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "13": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": true
                        }
                    }
                },
                "2": {
                    "n_objectives": 5,
                    "intentions": {
                        "14": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "15": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "16": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "17": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "3": {
                    "n_objectives": 4,
                    "intentions": {
                        "18": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "19": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "20": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "4": {
                    "n_objectives": 4,
                    "intentions": {
                        "21": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "22": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "23": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "24": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "25": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "26": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "4",
            "path": "experiments/4/2024-10-28-09-31-55",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['map'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            if 'map' in belief_set:\n                del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 6
                            },
                            "mi": {
                                "mi": 65.36989360791645,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 10,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 51.89147427955947,
                                "difficulty": 1.1111111111111112,
                                "effort": 57.65719364395497,
                                "time": 3.203177424664165,
                                "bugs": 0.01729715809318649
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            belief_set.setdefault('parcels', {})[event['object']['id']\n                ] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                belief_set['parcels'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                del belief_set['parcels'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 9
                            },
                            "mi": {
                                "mi": 61.22959878854188,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 11,
                                "sloc": 15,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 131.76952268336282,
                                "difficulty": 1.6666666666666667,
                                "effort": 219.61587113893805,
                                "time": 12.200881729941003,
                                "bugs": 0.04392317422778761
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_3(event, beliefs):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            beliefs['agent'] = event['object']\n        elif event['event_type'] == 'object changed':\n            beliefs['agent'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del beliefs['agent']\n    return beliefs",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] == 'key':\n        if event['event_type'] == 'object added':\n            belief_set['keys'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            belief_set['keys'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object removed':\n            belief_set['keys'].pop(event['object']['id'], None)\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.44872847079279,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_5(event, belief_set):\n    if event['object_type'] == 'door':\n        if event['event_type'] == 'object added':\n            belief_set.setdefault('doors', {})[event['object']['id']] = {'id':\n                event['object']['id'], 'coordinates': event['object'][\n                'coordinates']}\n        elif event['event_type'] == 'object changed':\n            if 'doors' in belief_set and event['object']['id'] in belief_set[\n                'doors']:\n                belief_set['doors'][event['object']['id']]['coordinates'\n                    ] = event['object']['coordinates']\n        elif event['event_type'] == 'object removed':\n            if 'doors' in belief_set and event['object']['id'] in belief_set[\n                'doors']:\n                del belief_set['doors'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 9
                            },
                            "mi": {
                                "mi": 60.40528048021907,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 12,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 131.76952268336282,
                                "difficulty": 1.6666666666666667,
                                "effort": 219.61587113893805,
                                "time": 12.200881729941003,
                                "bugs": 0.04392317422778761
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to efficiently navigate the map, gather all parcels, and deliver them to the designated delivery cells, while also opening any doors by picking up and using the keys when necessary.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The short term goal is for the agent to move towards and pick up the parcel if it is not carrying any parcels. If it is carrying a parcel, the agent will move towards the nearest delivery cell and drop the parcel there.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    agent_coords = belief_set['agent']['coordinates']\n    if not belief_set['agent']['parcels_carried_ids']:\n        parcel_coords = belief_set['parcels'][1]['coordinates']\n        if agent_coords[0] < parcel_coords[0]:\n            function_2()\n        elif agent_coords[0] > parcel_coords[0]:\n            function_1()\n        elif agent_coords[1] < parcel_coords[1]:\n            function_4()\n        elif agent_coords[1] > parcel_coords[1]:\n            function_3()\n        else:\n            function_5()\n    else:\n        delivery_coords = [cell['cell_coordinates'] for cell in belief_set[\n            'map']['grid'] if 'delivery' in cell['cell_type']][0]\n        if agent_coords[0] < delivery_coords[0]:\n            function_2()\n        elif agent_coords[0] > delivery_coords[0]:\n            function_1()\n        elif agent_coords[1] < delivery_coords[1]:\n            function_4()\n        elif agent_coords[1] > delivery_coords[1]:\n            function_3()\n        else:\n            function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 12
                                },
                                "mi": {
                                    "mi": 52.33283384505423,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 27,
                                    "sloc": 28,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 131.18329672565338,
                                    "difficulty": 2.0,
                                    "effort": 262.36659345130676,
                                    "time": 14.57592185840593,
                                    "bugs": 0.04372776557521779
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The agent's short term goal is to move towards the parcel by navigating the grid.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [
                                9,
                                10,
                                11,
                                13,
                                15,
                                16,
                                19,
                                20,
                                22
                            ],
                            "function": "def function_8():\n    global belief_set\n    agent = belief_set['agent']\n    parcel = next(iter(belief_set['parcels'].values()))\n    if agent['coordinates'][0] < parcel['coordinates'][0]:\n        function_2()\n    elif agent['coordinates'][0] > parcel['coordinates'][0]:\n        function_1()\n    elif agent['coordinates'][1] < parcel['coordinates'][1]:\n        function_4()\n    elif agent['coordinates'][1] > parcel['coordinates'][1]:\n        function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 64.579041983756,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 12,
                                    "sloc": 12,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 39.863137138648355,
                                    "difficulty": 1.0,
                                    "effort": 39.863137138648355,
                                    "time": 2.2146187299249087,
                                    "bugs": 0.013287712379549451
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short-term goal is to navigate towards the nearest parcel, pick it up and then navigate towards the nearest delivery cell to drop it off.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                8
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    function_8()\n    function_5()\n    function_8()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 1
                                },
                                "mi": {
                                    "mi": 100.0,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 6,
                                    "sloc": 6,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 0,
                                    "difficulty": 0,
                                    "effort": 0,
                                    "time": 0.0,
                                    "bugs": 0.0
                                }
                            }
                        },
                        {
                            "id": 10,
                            "description": "The agent's short term goal is to pick up the parcel that is on the ground if it is in the same cell, else it moves towards the parcel.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                8
                            ],
                            "called_by": [
                                15,
                                19,
                                22
                            ],
                            "function": "def function_10():\n    global belief_set\n    if belief_set['agent']['coordinates'] == belief_set['parcels'][1][\n        'coordinates']:\n        function_5()\n    else:\n        function_8()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 2
                                },
                                "mi": {
                                    "mi": 78.01508585192973,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 6,
                                    "sloc": 7,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 4.754887502163469,
                                    "difficulty": 0.5,
                                    "effort": 2.3774437510817346,
                                    "time": 0.1320802083934297,
                                    "bugs": 0.0015849625007211565
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to move to the nearest parcel, pick it up and then move to the nearest delivery cell to drop it.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                8
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    function_8()\n    if belief_set['agent']['coordinates'] == belief_set['parcels'][1][\n        'coordinates']:\n        function_5()\n        while belief_set['agent']['coordinates'] != [3, 0]:\n            function_2()\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 3
                                },
                                "mi": {
                                    "mi": 71.55988337877561,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 8,
                                    "sloc": 9,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 15.509775004326936,
                                    "difficulty": 1.0,
                                    "effort": 15.509775004326936,
                                    "time": 0.861654166907052,
                                    "bugs": 0.005169925001442312
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The short-term goal for the agent is to move to the nearest parcel, pick it up, then move to the nearest delivery cell to drop it off. The agent will also break from the loop if it has iterated over the same set of actions more than 100 times, to prevent the possibility of an infinite loop.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    iteration_count = 0\n    while True:\n        iteration_count += 1\n        if iteration_count > 100:\n            break\n        agent_coordinates = belief_set['agent']['coordinates']\n        if belief_set['parcels'][1]['coordinates'] == agent_coordinates:\n            function_5()\n        elif belief_set['parcels'][1]['coordinates'][0] > agent_coordinates[0]:\n            function_2()\n        elif belief_set['parcels'][1]['coordinates'][0] < agent_coordinates[0]:\n            function_1()\n        elif belief_set['parcels'][1]['coordinates'][1] > agent_coordinates[1]:\n            function_4()\n        elif belief_set['parcels'][1]['coordinates'][1] < agent_coordinates[1]:\n            function_3()\n        if belief_set['agent']['parcels_carried_ids']:\n            if belief_set['map']['grid'][12]['cell_coordinates'\n                ] == agent_coordinates:\n                function_6()\n            elif belief_set['map']['grid'][12]['cell_coordinates'][0\n                ] > agent_coordinates[0]:\n                function_2()\n            elif belief_set['map']['grid'][12]['cell_coordinates'][0\n                ] < agent_coordinates[0]:\n                function_1()\n            elif belief_set['map']['grid'][12]['cell_coordinates'][1\n                ] > agent_coordinates[1]:\n                function_4()\n            elif belief_set['map']['grid'][12]['cell_coordinates'][1\n                ] < agent_coordinates[1]:\n                function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 14
                                },
                                "mi": {
                                    "mi": 50.61268862866287,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 29,
                                    "sloc": 34,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 169.21582985307933,
                                    "difficulty": 2.1818181818181817,
                                    "effort": 369.1981742249003,
                                    "time": 20.511009679161127,
                                    "bugs": 0.05640527661769311
                                }
                            }
                        },
                        {
                            "id": 13,
                            "description": "The agent's short term goal is to navigate to the nearest parcel, if not already carrying one, pick it up and then navigate to the nearest delivery cell to drop the parcel off. The agent should stop executing actions once the parcel is delivered.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                8
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    agent = belief_set['agent']\n    parcels = belief_set['parcels']\n    map_ = belief_set['map']['grid']\n    delivered = False\n    while not delivered:\n        if not agent['parcels_carried_ids']:\n            function_8()\n            if agent['coordinates'] == parcels[1]['coordinates']:\n                function_5()\n        else:\n            delivery_cells = [cell['cell_coordinates'] for cell in map_ if \n                'delivery' in cell['cell_type']]\n            nearest_delivery_cell = min(delivery_cells, key=lambda x: abs(x\n                [0] - agent['coordinates'][0]) + abs(x[1] - agent[\n                'coordinates'][1]))\n            while agent['coordinates'] != nearest_delivery_cell:\n                if agent['coordinates'][0] < nearest_delivery_cell[0]:\n                    function_2()\n                elif agent['coordinates'][0] > nearest_delivery_cell[0]:\n                    function_1()\n                elif agent['coordinates'][1] < nearest_delivery_cell[1]:\n                    function_4()\n                elif agent['coordinates'][1] > nearest_delivery_cell[1]:\n                    function_3()\n            function_6()\n            delivered = True\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 11
                                },
                                "mi": {
                                    "mi": 52.09381927331888,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 26,
                                    "sloc": 28,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 166.83428025068963,
                                    "difficulty": 4.0,
                                    "effort": 667.3371210027585,
                                    "time": 37.074284500153254,
                                    "bugs": 0.05561142675022988
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "2": {
                    "description": "The agent's long term goal is to strategically pick up and deliver as many parcels as possible, while utilizing keys to unlock doors to reach more efficient routes to the delivery cells.",
                    "intentions": [
                        {
                            "id": 14,
                            "description": "The agent's short term goal is to navigate to the cell containing the key, pick up the key, and then proceed to the closest locked door.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_14():\n    global belief_set\n    key_coordinates = belief_set['keys'][1]['coordinates']\n    agent_coordinates = belief_set['agent']['coordinates']\n    if agent_coordinates[0] > key_coordinates[0]:\n        function_1()\n    elif agent_coordinates[0] < key_coordinates[0]:\n        function_2()\n    elif agent_coordinates[1] > key_coordinates[1]:\n        function_3()\n    elif agent_coordinates[1] < key_coordinates[1]:\n        function_4()\n    else:\n        function_5()\n        door_coordinates = belief_set['doors'][1]['coordinates']\n        if agent_coordinates[0] > door_coordinates[0]:\n            function_1()\n        elif agent_coordinates[0] < door_coordinates[0]:\n            function_2()\n        elif agent_coordinates[1] > door_coordinates[1]:\n            function_3()\n        elif agent_coordinates[1] < door_coordinates[1]:\n            function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 55.07838825856439,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 23,
                                    "sloc": 23,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 100.07820003461549,
                                    "difficulty": 1.0,
                                    "effort": 100.07820003461549,
                                    "time": 5.559900001923083,
                                    "bugs": 0.0333594000115385
                                }
                            }
                        },
                        {
                            "id": 15,
                            "description": "The agent's short term goal is to deliver the parcel it is currently carrying to the nearest delivery cell by navigating the grid.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                8,
                                10
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    agent = belief_set['agent']\n    parcels = belief_set['parcels']\n    if len(agent['parcels_carried_ids']) > 0:\n        for parcel_id in agent['parcels_carried_ids']:\n            if parcels[parcel_id]['coordinates'] == agent['coordinates']:\n                function_6()\n                return\n        if agent['coordinates'][0] < 3:\n            function_2()\n        elif agent['coordinates'][0] > 3:\n            function_1()\n        elif agent['coordinates'][1] < 0:\n            function_4()\n        elif agent['coordinates'][1] > 0:\n            function_3()\n    else:\n        function_10()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 58.35734837656097,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 19,
                                    "sloc": 19,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 64.52932501298082,
                                    "difficulty": 2.0,
                                    "effort": 129.05865002596164,
                                    "time": 7.169925001442313,
                                    "bugs": 0.02150977500432694
                                }
                            }
                        },
                        {
                            "id": 16,
                            "description": "The short term goal is to move towards the nearest parcel and pick it up, if the agent does not carry any parcels. If the agent is carrying a parcel, it should move towards the nearest delivery cell and drop the parcel there.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                8
                            ],
                            "called_by": [],
                            "function": "def function_16():\n    global belief_set\n    if not belief_set['agent']['parcels_carried_ids']:\n        function_8()\n        function_5()\n    else:\n        function_6()\n        function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 2
                                },
                                "mi": {
                                    "mi": 77.92320566425435,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 8,
                                    "sloc": 8,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 2.0,
                                    "difficulty": 0.5,
                                    "effort": 1.0,
                                    "time": 0.05555555555555555,
                                    "bugs": 0.0006666666666666666
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "3": {
                    "description": "The agent's long term goal is to collect all available parcels and deliver them to the designated delivery cells, while avoiding any obstacles and maximizing score points. Further, it should seek to open any doors by acquiring the corresponding keys when necessary.",
                    "intentions": [
                        {
                            "id": 17,
                            "description": "The agent's short term goal is to deliver the carried parcel to the nearest delivery cell. The agent will navigate through the grid, avoiding any obstacles, and drop the parcel at the delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_17():\n    global belief_set\n    agent_position = belief_set['agent']['coordinates']\n    for cell in belief_set['map']['grid']:\n        if cell['cell_type'] == 'delivery_cell' or cell['cell_type'\n            ] == 'double_points_delivery_cell':\n            delivery_position = cell['cell_coordinates']\n            break\n    if agent_position[0] > delivery_position[0]:\n        function_1()\n    elif agent_position[0] < delivery_position[0]:\n        function_2()\n    elif agent_position[1] > delivery_position[1]:\n        function_3()\n    elif agent_position[1] < delivery_position[1]:\n        function_4()\n    else:\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 58.482665080780194,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 87.56842503028855,
                                    "difficulty": 2.0,
                                    "effort": 175.1368500605771,
                                    "time": 9.729825003365395,
                                    "bugs": 0.029189475010096184
                                }
                            }
                        },
                        {
                            "id": 18,
                            "description": "The agent's short term goal is to deliver the parcel it is carrying to the designated delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_18():\n    global belief_set\n    agent = belief_set['agent']\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] in ['delivery_cell', 'double_points_delivery_cell']][0]\n    while agent['coordinates'] != delivery_cell['cell_coordinates']:\n        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 60.91731429318675,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 72.0,
                                    "difficulty": 2.0,
                                    "effort": 144.0,
                                    "time": 8.0,
                                    "bugs": 0.024
                                }
                            }
                        },
                        {
                            "id": 19,
                            "description": "The short term goal of the agent is to deliver the parcel it is carrying to the designated delivery cell by navigating the grid and avoiding any obstacles. If the agent is stuck in a certain position and cannot move further, it will attempt to move in the other coordinate direction.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                8,
                                10
                            ],
                            "called_by": [],
                            "function": "def function_19():\n    global belief_set\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] in ['delivery_cell', 'double_points_delivery_cell']][0]\n    agent_position = belief_set['agent']['coordinates']\n    parcel_carried = belief_set['agent']['parcels_carried_ids']\n    if parcel_carried:\n        while agent_position != delivery_cell['cell_coordinates']:\n            if agent_position[0] < delivery_cell['cell_coordinates'][0]:\n                function_2()\n            elif agent_position[0] > delivery_cell['cell_coordinates'][0]:\n                function_1()\n            if agent_position[1] < delivery_cell['cell_coordinates'][1]:\n                function_4()\n            elif agent_position[1] > delivery_cell['cell_coordinates'][1]:\n                function_3()\n            if agent_position == belief_set['agent']['coordinates']:\n                break\n        function_6()\n    else:\n        function_10()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 56.674006216532256,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 20,
                                    "sloc": 21,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 87.56842503028855,
                                    "difficulty": 2.6923076923076925,
                                    "effort": 235.76114431231534,
                                    "time": 13.097841350684185,
                                    "bugs": 0.029189475010096184
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "4": {
                    "description": "The agent's long term goal is to collect all the parcels and deliver them to the designated delivery cells while avoiding obstacles and collecting keys if necessary, all while aiming to maximize the score.",
                    "intentions": [
                        {
                            "id": 20,
                            "description": "The short term goal is to locate the nearest parcel and move towards it in order to pick it up.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                8
                            ],
                            "called_by": [
                                22
                            ],
                            "function": "def function_20():\n    global belief_set\n    if belief_set['agent']['coordinates'] == belief_set['parcels'][1][\n        'coordinates']:\n        function_5()\n    else:\n        function_8()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 2
                                },
                                "mi": {
                                    "mi": 78.01508585192973,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 6,
                                    "sloc": 7,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 4.754887502163469,
                                    "difficulty": 0.5,
                                    "effort": 2.3774437510817346,
                                    "time": 0.1320802083934297,
                                    "bugs": 0.0015849625007211565
                                }
                            }
                        },
                        {
                            "id": 21,
                            "description": "The agent's short term goal is to find the nearest delivery cell and move towards it, in order to deliver the parcel it is currently carrying.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_21():\n    global belief_set\n    parcel_coords = belief_set['agent']['coordinates']\n    delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map'\n        ]['grid'] if 'delivery' in cell['cell_type']]\n    nearest_delivery_cell = min(delivery_cells, key=lambda x: abs(x[0] -\n        parcel_coords[0]) + abs(x[1] - parcel_coords[1]))\n    while belief_set['agent']['coordinates'] != nearest_delivery_cell:\n        if nearest_delivery_cell[0] < belief_set['agent']['coordinates'][0]:\n            function_1()\n        elif nearest_delivery_cell[0] > belief_set['agent']['coordinates'][0]:\n            function_2()\n        elif nearest_delivery_cell[1] < belief_set['agent']['coordinates'][1]:\n            function_3()\n        else:\n            function_4()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 58.58132861260845,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 16,
                                    "sloc": 17,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 107.02635884729514,
                                    "difficulty": 3.0,
                                    "effort": 321.07907654188546,
                                    "time": 17.837726474549193,
                                    "bugs": 0.03567545294909838
                                }
                            }
                        },
                        {
                            "id": 22,
                            "description": "The short term goal of the agent is to find the nearest delivery cell and move towards it in order to deliver the parcel it is currently carrying. The agent should also ensure that it is not stuck in an infinite loop by adding a step counter and validating moves.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                8,
                                10,
                                20
                            ],
                            "called_by": [],
                            "function": "def function_22():\n    global belief_set\n    step_counter = 0\n    max_steps = 100\n    agent_pos = belief_set['agent']['coordinates']\n    delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map'\n        ]['grid'] if 'delivery' in cell['cell_type']]\n    while step_counter < max_steps and agent_pos not in delivery_cells:\n        function_8()\n        step_counter += 1\n        agent_pos = belief_set['agent']['coordinates']\n    if agent_pos in delivery_cells:\n        function_6()\n    else:\n        function_20()\n        function_10()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 60.68280301252468,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 16,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 68.53238859703687,
                                    "difficulty": 3.3333333333333335,
                                    "effort": 228.44129532345625,
                                    "time": 12.691183073525346,
                                    "bugs": 0.022844129532345624
                                }
                            }
                        },
                        {
                            "id": 23,
                            "description": "The agent's short term goal is to deliver the parcel it is currently carrying to the nearest delivery cell. It should navigate the grid efficiently, avoiding obstacles and collecting keys if necessary, and deposit the parcel at the delivery cell to increase its score.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_23():\n    global belief_set\n    delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map'\n        ]['grid'] if 'delivery' in cell['cell_type']]\n    agent_coords = belief_set['agent']['coordinates']\n    nearest_delivery_cell = min(delivery_cells, key=lambda x: abs(x[0] -\n        agent_coords[0]) + abs(x[1] - agent_coords[1]))\n    while agent_coords != nearest_delivery_cell:\n        if agent_coords[0] < nearest_delivery_cell[0]:\n            function_2()\n        elif agent_coords[0] > nearest_delivery_cell[0]:\n            function_1()\n        if agent_coords[1] < nearest_delivery_cell[1]:\n            function_4()\n        elif agent_coords[1] > nearest_delivery_cell[1]:\n            function_3()\n        agent_coords = belief_set['agent']['coordinates']\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 57.42989830568894,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 123.79398751947124,
                                    "difficulty": 3.0,
                                    "effort": 371.38196255841376,
                                    "time": 20.63233125324521,
                                    "bugs": 0.04126466250649041
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 6,
                    "intentions": {
                        "7": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "8": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "9": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "10": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "11": {
                            "n_objectives": 4,
                            "category": "grounded",
                            "one_action": false
                        },
                        "12": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "13": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 4,
                    "intentions": {
                        "14": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "15": {
                            "n_objectives": 2,
                            "category": "grounded",
                            "one_action": true
                        },
                        "16": {
                            "n_objectives": 4,
                            "category": "predetermined",
                            "one_action": false
                        }
                    }
                },
                "3": {
                    "n_objectives": 7,
                    "intentions": {
                        "17": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "18": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "19": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "4": {
                    "n_objectives": 5,
                    "intentions": {
                        "20": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "21": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "22": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "23": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        }
    ],
    "experiments/5": [
        {
            "typology": "5",
            "path": "experiments/5/2024-10-29-15-55-01",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['map'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            if 'agent' in belief_set and event['object']['id'] in belief_set[\n                'agent']:\n                belief_set['agent'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'agent' in belief_set and event['object']['id'] in belief_set[\n                'agent']:\n                del belief_set['agent'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 9
                            },
                            "mi": {
                                "mi": 60.45440787126831,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 12,
                                "sloc": 14,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 129.65784284662087,
                                "difficulty": 1.7647058823529411,
                                "effort": 228.80795796462505,
                                "time": 12.711553220256947,
                                "bugs": 0.043219280948873624
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcels' not in belief_set:\n                belief_set['parcels'] = {}\n            belief_set['parcels'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                belief_set['parcels'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                del belief_set['parcels'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.17653230125827,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to efficiently plan a path that allows it to collect as many parcels as possible and deliver them successfully, while avoiding non-walkable cells and maximizing its score.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The short term goal is to move the agent towards the nearest parcel, pick it up and then move towards the delivery cell to deliver the parcel.",
                            "executable_at_desire_end": true,
                            "executable": false,
                            "invalidation_reason": "desire_triggered_execution",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    agent_position = belief_set['agent'][1]['coordinates']\n    parcel_position = belief_set['parcels'][1]['coordinates']\n    delivery_position = [cell['cell_coordinates'] for cell in belief_set[\n        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    while agent_position != parcel_position:\n        if agent_position[0] > parcel_position[0]:\n            function_1()\n            agent_position[0] -= 1\n        elif agent_position[0] < parcel_position[0]:\n            function_2()\n            agent_position[0] += 1\n        elif agent_position[1] > parcel_position[1]:\n            function_3()\n            agent_position[1] -= 1\n        elif agent_position[1] < parcel_position[1]:\n            function_4()\n            agent_position[1] += 1\n    function_5()\n    while agent_position != delivery_position:\n        if agent_position[0] > delivery_position[0]:\n            function_1()\n            agent_position[0] -= 1\n        elif agent_position[0] < delivery_position[0]:\n            function_2()\n            agent_position[0] += 1\n        elif agent_position[1] > delivery_position[1]:\n            function_3()\n            agent_position[1] -= 1\n        elif agent_position[1] < delivery_position[1]:\n            function_4()\n            agent_position[1] += 1\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 47.836168634793644,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 33,
                                    "sloc": 34,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 294.6857250822118,
                                    "difficulty": 3.8,
                                    "effort": 1119.8057553124047,
                                    "time": 62.21143085068915,
                                    "bugs": 0.09822857502740392
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        false
                    ],
                    "error": true,
                    "trigger_function": "def function_dtf_1(belief_set):\n    if not belief_set['agent'][1]['parcels_carried_ids'] and not belief_set[\n        'parcels']:\n        return False\n    if belief_set['agent'][1]['parcels_carried_ids']:\n        return True\n    if belief_set['parcels']:\n        return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 5
                        },
                        "mi": {
                            "mi": 70.8221152295933,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 8,
                            "sloc": 9,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 18.094737505048094,
                            "difficulty": 1.0,
                            "effort": 18.094737505048094,
                            "time": 1.0052631947248942,
                            "bugs": 0.006031579168349364
                        }
                    }
                },
                "2": {
                    "description": "The long-term goal is to develop an optimal pathfinding strategy that allows the agent to collect and deliver as many parcels as possible while minimizing travel time and avoiding non-walkable cells.",
                    "intentions": [
                        {
                            "id": 8,
                            "description": "The short-term goal is to navigate the agent to the nearest parcel, pick it up and return it to the delivery cell, while avoiding non-walkable cells.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    map_grid = belief_set['map']['grid']\n    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==\n        'delivery_cell'][0]['cell_coordinates']\n    parcel_ids = [parcel['id'] for parcel in parcels.values() if parcel[\n        'carried_by_id'] is None]\n    if parcel_ids:\n        parcel_location = parcels[parcel_ids[0]]['coordinates']\n        while agent['coordinates'] != parcel_location:\n            if agent['coordinates'][0] < parcel_location[0]:\n                function_2()\n            elif agent['coordinates'][0] > parcel_location[0]:\n                function_1()\n            elif agent['coordinates'][1] < parcel_location[1]:\n                function_4()\n            elif agent['coordinates'][1] > parcel_location[1]:\n                function_3()\n        function_5()\n    while agent['coordinates'] != delivery_cell:\n        if agent['coordinates'][0] < delivery_cell[0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell[0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_cell[1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_cell[1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 16
                                },
                                "mi": {
                                    "mi": 50.275289220523035,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 29,
                                    "sloc": 31,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 173.06477719407374,
                                    "difficulty": 2.608695652173913,
                                    "effort": 451.47333181062714,
                                    "time": 25.081851767257064,
                                    "bugs": 0.057688259064691244
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short-term goal is to navigate to the nearest parcel that isn't behind a non-walkable cell, pick it up, and deliver it to the delivery cell, while avoiding non-walkable cells.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    width = belief_set['map']['width']\n    height = belief_set['map']['height']\n    grid = belief_set['map']['grid']\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    non_walkable_cells = [cell for cell in grid if cell['cell_type'] ==\n        'non_walkable']\n    for i in range(width * height):\n        for parcel in parcels.values():\n            if parcel['carried_by_id'] is None and parcel['coordinates'\n                ] not in [cell['cell_coordinates'] for cell in\n                non_walkable_cells]:\n                while agent['coordinates'][0] > parcel['coordinates'][0]:\n                    function_1()\n                while agent['coordinates'][0] < parcel['coordinates'][0]:\n                    function_2()\n                while agent['coordinates'][1] > parcel['coordinates'][1]:\n                    function_3()\n                while agent['coordinates'][1] < parcel['coordinates'][1]:\n                    function_4()\n                function_5()\n                break\n        else:\n            continue\n        break\n    delivery_cell_coordinates = [cell['cell_coordinates'] for cell in grid if\n        cell['cell_type'] == 'delivery_cell'][0]\n    for i in range(width * height):\n        while agent['coordinates'][0] > delivery_cell_coordinates[0]:\n            function_1()\n        while agent['coordinates'][0] < delivery_cell_coordinates[0]:\n            function_2()\n        while agent['coordinates'][1] > delivery_cell_coordinates[1]:\n            function_3()\n        while agent['coordinates'][1] < delivery_cell_coordinates[1]:\n            function_4()\n        function_6()\n        break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 20
                                },
                                "mi": {
                                    "mi": 46.8131728887118,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 36,
                                    "sloc": 40,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 230.81773576252348,
                                    "difficulty": 3.75,
                                    "effort": 865.566509109463,
                                    "time": 48.087028283859055,
                                    "bugs": 0.07693924525417449
                                }
                            }
                        },
                        {
                            "id": 10,
                            "description": "The agent's short-term goal is to navigate to the nearest parcel, pick it up, and then navigate to the delivery cell to drop off the parcel, all while avoiding non-walkable cells.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    map_info = belief_set['map']\n    width = map_info['width']\n    height = map_info['height']\n    delivery_cell = [cell for cell in map_info['grid'] if cell['cell_type'] ==\n        'delivery_cell'][0]['cell_coordinates']\n    for parcel_id, parcel_info in parcels.items():\n        if parcel_info['carried_by_id'] is None:\n            parcel_coordinates = parcel_info['coordinates']\n            while agent['coordinates'] != parcel_coordinates:\n                if agent['coordinates'][0] > parcel_coordinates[0] and agent[\n                    'coordinates'][0] > 0:\n                    function_1()\n                elif agent['coordinates'][0] < parcel_coordinates[0] and agent[\n                    'coordinates'][0] < width - 1:\n                    function_2()\n                if agent['coordinates'][1] > parcel_coordinates[1] and agent[\n                    'coordinates'][1] > 0:\n                    function_3()\n                elif agent['coordinates'][1] < parcel_coordinates[1] and agent[\n                    'coordinates'][1] < height - 1:\n                    function_4()\n            function_5()\n            break\n    while agent['coordinates'] != delivery_cell:\n        if agent['coordinates'][0] > delivery_cell[0] and agent['coordinates'][\n            0] > 0:\n            function_1()\n        elif agent['coordinates'][0] < delivery_cell[0] and agent['coordinates'\n            ][0] < width - 1:\n            function_2()\n        if agent['coordinates'][1] > delivery_cell[1] and agent['coordinates'][\n            1] > 0:\n            function_3()\n        elif agent['coordinates'][1] < delivery_cell[1] and agent['coordinates'\n            ][1] < height - 1:\n            function_4()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 23
                                },
                                "mi": {
                                    "mi": 44.76793413229936,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 32,
                                    "sloc": 41,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 571.60284579714,
                                    "difficulty": 4.072727272727272,
                                    "effort": 2327.9824992465337,
                                    "time": 129.33236106925187,
                                    "bugs": 0.19053428193238
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "3": {
                    "description": "The agent's long term goal is to maximize the total score by efficiently picking up and delivering as many parcels as possible while navigating through the map.",
                    "intentions": [
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to move towards the parcel spawn location, pick up any parcels if present, and then move towards the delivery cell to deliver the picked parcels.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [
                                14
                            ],
                            "function": "def function_11():\n    global belief_set\n    spawn_coordinates = [cell['cell_coordinates'] for cell in belief_set[\n        'map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]\n    delivery_coordinates = [cell['cell_coordinates'] for cell in belief_set\n        ['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    agent_coordinates = belief_set['agent'][1]['coordinates']\n    while agent_coordinates != spawn_coordinates:\n        if agent_coordinates[0] > spawn_coordinates[0]:\n            function_1()\n        elif agent_coordinates[0] < spawn_coordinates[0]:\n            function_2()\n        if agent_coordinates[1] > spawn_coordinates[1]:\n            function_3()\n        elif agent_coordinates[1] < spawn_coordinates[1]:\n            function_4()\n        agent_coordinates = belief_set['agent'][1]['coordinates']\n    function_5()\n    while agent_coordinates != delivery_coordinates:\n        if agent_coordinates[0] > delivery_coordinates[0]:\n            function_1()\n        elif agent_coordinates[0] < delivery_coordinates[0]:\n            function_2()\n        if agent_coordinates[1] > delivery_coordinates[1]:\n            function_3()\n        elif agent_coordinates[1] < delivery_coordinates[1]:\n            function_4()\n        agent_coordinates = belief_set['agent'][1]['coordinates']\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 15
                                },
                                "mi": {
                                    "mi": 51.12014298190203,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 27,
                                    "sloc": 29,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 171.1759500778849,
                                    "difficulty": 2.0869565217391304,
                                    "effort": 357.2367653799337,
                                    "time": 19.846486965551872,
                                    "bugs": 0.05705865002596163
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        true
                    ],
                    "error": false,
                    "trigger_function": "def function_dtf_2(belief_set):\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    map_grid = belief_set['map']['grid']\n    walkable_cells = [cell for cell in map_grid if cell['cell_type'] ==\n        'walkable' or cell['cell_type'] == 'parcels_spawn' or cell[\n        'cell_type'] == 'delivery_cell']\n    if len(walkable_cells) == 0 or len(parcels) == 0:\n        return False\n    if agent['score'] < 0:\n        return False\n    if len(agent['parcels_carried_ids']) > 0:\n        return True\n    return any(cell['cell_type'] == 'parcels_spawn' for cell in walkable_cells)",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 10
                        },
                        "mi": {
                            "mi": 60.171065814324585,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 12,
                            "sloc": 14,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 136.16184010614157,
                            "difficulty": 2.4705882352941178,
                            "effort": 336.39984026223215,
                            "time": 18.688880014568454,
                            "bugs": 0.04538728003538052
                        }
                    }
                },
                "4": {
                    "description": "The agent's long term goal is to optimize its pathfinding in the environment, minimizing the distance travelled while avoiding non-walkable areas, to conserve resources and enhance efficiency.",
                    "intentions": [
                        {
                            "id": 12,
                            "description": "The agent's short term goal is to move one step towards the nearest walkable cell, if it is not already in one.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    agent = belief_set['agent'][1]\n    map_grid = belief_set['map']['grid']\n    agent_x, agent_y = agent['coordinates']\n    walkable_cells = [cell for cell in map_grid if cell['cell_type'] ==\n        'walkable']\n    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[\n        'cell_coordinates'][0] - agent_x) + abs(cell['cell_coordinates'][1] -\n        agent_y))\n    if nearest_walkable_cell['cell_coordinates'][0] < agent_x:\n        function_1()\n    elif nearest_walkable_cell['cell_coordinates'][0] > agent_x:\n        function_2()\n    elif nearest_walkable_cell['cell_coordinates'][1] < agent_y:\n        function_3()\n    elif nearest_walkable_cell['cell_coordinates'][1] > agent_y:\n        function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 58.84618460003082,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 16,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 98.09910819000817,
                                    "difficulty": 3.3333333333333335,
                                    "effort": 326.99702730002724,
                                    "time": 18.16650151666818,
                                    "bugs": 0.03269970273000272
                                }
                            }
                        },
                        {
                            "id": 13,
                            "description": "The agent's short term goal is to move towards the nearest parcel, pick it up and then move towards the delivery cell to drop off the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    agent = belief_set['agent'][1]\n    if belief_set['parcels']:\n        parcel = list(belief_set['parcels'].values())[0]\n        while agent['coordinates'] != parcel['coordinates']:\n            if agent['coordinates'][0] < parcel['coordinates'][0]:\n                function_2()\n            elif agent['coordinates'][0] > parcel['coordinates'][0]:\n                function_1()\n            if agent['coordinates'][1] < parcel['coordinates'][1]:\n                function_4()\n            elif agent['coordinates'][1] > parcel['coordinates'][1]:\n                function_3()\n        function_5()\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]\n    while agent['coordinates'] != delivery_cell['cell_coordinates']:\n        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n            function_1()\n        if agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 14
                                },
                                "mi": {
                                    "mi": 51.91180423695465,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 26,
                                    "sloc": 27,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 155.11451069865606,
                                    "difficulty": 2.0,
                                    "effort": 310.2290213973121,
                                    "time": 17.234945633184008,
                                    "bugs": 0.05170483689955202
                                }
                            }
                        },
                        {
                            "id": 14,
                            "description": "The agent's short term goal is to safely navigate to the nearest parcel, pick it up, and then navigate to the delivery cell to drop off the parcel while avoiding non-walkable areas and minimizing the distance travelled.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                11
                            ],
                            "called_by": [],
                            "function": "def function_14():\n    global belief_set\n    max_iterations = 1000\n    iteration = 0\n    while True:\n        if iteration > max_iterations:\n            break\n        agent_coordinates = belief_set['agent'][1]['coordinates']\n        parcel_coordinates = belief_set['parcels'][12]['coordinates']\n        delivery_coordinates = [1, 3]\n        if agent_coordinates == parcel_coordinates:\n            function_5()\n        elif agent_coordinates == delivery_coordinates:\n            function_6()\n            break\n        else:\n            function_11()\n        iteration += 1\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 60.88022322435165,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 38.03910001730775,
                                    "difficulty": 2.0,
                                    "effort": 76.0782000346155,
                                    "time": 4.226566668589751,
                                    "bugs": 0.012679700005769252
                                }
                            }
                        },
                        {
                            "id": 15,
                            "description": "The agent's short term goal is to safely navigate to the nearest parcel, pick it up, and then navigate to the delivery cell to drop off the parcel while avoiding non-walkable areas and minimizing the distance travelled.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    agent_coordinates = belief_set['agent'][1]['coordinates']\n    delivery_coordinates = [1, 3]\n    iteration_counter = 0\n    while (agent_coordinates != delivery_coordinates and iteration_counter <\n        100):\n        if agent_coordinates[0] < delivery_coordinates[0]:\n            function_2()\n        elif agent_coordinates[0] > delivery_coordinates[0]:\n            function_1()\n        if agent_coordinates[1] < delivery_coordinates[1]:\n            function_4()\n        elif agent_coordinates[1] > delivery_coordinates[1]:\n            function_3()\n        iteration_counter += 1\n        if iteration_counter == 99:\n            break\n    function_5()\n    while (agent_coordinates != delivery_coordinates and iteration_counter <\n        200):\n        if agent_coordinates[0] < delivery_coordinates[0]:\n            function_2()\n        elif agent_coordinates[0] > delivery_coordinates[0]:\n            function_1()\n        if agent_coordinates[1] < delivery_coordinates[1]:\n            function_4()\n        elif agent_coordinates[1] > delivery_coordinates[1]:\n            function_3()\n        iteration_counter += 1\n        if iteration_counter == 199:\n            break\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 15
                                },
                                "mi": {
                                    "mi": 48.37277085484779,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 31,
                                    "sloc": 33,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 274.72299342751836,
                                    "difficulty": 3.857142857142857,
                                    "effort": 1059.6458317918566,
                                    "time": 58.86921287732537,
                                    "bugs": 0.09157433114250613
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 5,
                    "intentions": {
                        "7": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 5,
                    "intentions": {
                        "8": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "9": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "10": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "3": {
                    "n_objectives": 4,
                    "intentions": {
                        "11": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "4": {
                    "n_objectives": 5,
                    "intentions": {
                        "12": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "13": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "14": {
                            "n_objectives": 6,
                            "category": "grounded",
                            "one_action": false
                        },
                        "15": {
                            "n_objectives": 6,
                            "category": "grounded",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "5",
            "path": "experiments/5/2024-11-01-09-48-01",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added' or event['event_type'\n            ] == 'object changed':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object removed':\n            if 'map' in belief_set:\n                del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 6
                            },
                            "mi": {
                                "mi": 66.63804294389455,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 8,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 68.53238859703687,
                                "difficulty": 1.6363636363636365,
                                "effort": 112.14390861333307,
                                "time": 6.23021714518517,
                                "bugs": 0.022844129532345624
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            if 'agent' in belief_set and event['object']['id'] in belief_set[\n                'agent']:\n                belief_set['agent'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'agent' in belief_set and event['object']['id'] in belief_set[\n                'agent']:\n                del belief_set['agent'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 9
                            },
                            "mi": {
                                "mi": 60.45440787126831,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 12,
                                "sloc": 14,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 129.65784284662087,
                                "difficulty": 1.7647058823529411,
                                "effort": 228.80795796462505,
                                "time": 12.711553220256947,
                                "bugs": 0.043219280948873624
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] != 'parcel':\n        return belief_set\n    if event['event_type'] == 'object added':\n        if 'parcels' not in belief_set:\n            belief_set['parcels'] = {}\n        belief_set['parcels'][event['object']['id']] = event['object']\n    elif event['event_type'] == 'object changed':\n        if 'parcels' in belief_set and event['object']['id'] in belief_set[\n            'parcels']:\n            belief_set['parcels'][event['object']['id']].update(event['object']\n                )\n    elif event['event_type'] == 'object removed':\n        if 'parcels' in belief_set and event['object']['id'] in belief_set[\n            'parcels']:\n            del belief_set['parcels'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 58.431037053128456,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 14,
                                "sloc": 17,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 149.27754454988144,
                                "difficulty": 3.0555555555555554,
                                "effort": 456.12583056908215,
                                "time": 25.340323920504563,
                                "bugs": 0.04975918151662715
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to explore the map, identify all parcel spawn locations and delivery cells, and plan optimal routes between them for efficient parcel delivery.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The agent's short term goal is to move towards the nearest parcel spawn location, pick up the parcel and then move towards the nearest delivery cell to deliver the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'parcels_spawn'][0]\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]\n    while agent['coordinates'] != parcel_spawn['cell_coordinates']:\n        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:\n            function_3()\n    function_5()\n    while agent['coordinates'] != delivery_cell['cell_coordinates']:\n        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 15
                                },
                                "mi": {
                                    "mi": 51.81587640351487,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 25,
                                    "sloc": 27,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 173.06477719407374,
                                    "difficulty": 2.0,
                                    "effort": 346.1295543881475,
                                    "time": 19.229419688230415,
                                    "bugs": 0.057688259064691244
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [
                                14
                            ],
                            "function": "def function_8():\n    global belief_set\n    agent_position = belief_set['agent'][1]['coordinates']\n    parcel_spawn_location = [cell['cell_coordinates'] for cell in\n        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]\n    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']\n        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    max_iterations = 1000\n    i = 0\n    while agent_position != parcel_spawn_location and i < max_iterations:\n        i += 1\n        if agent_position[0] < parcel_spawn_location[0]:\n            function_2()\n            agent_position[0] += 1\n        elif agent_position[0] > parcel_spawn_location[0]:\n            function_1()\n            agent_position[0] -= 1\n        elif agent_position[1] < parcel_spawn_location[1]:\n            function_4()\n            agent_position[1] += 1\n        elif agent_position[1] > parcel_spawn_location[1]:\n            function_3()\n            agent_position[1] -= 1\n    function_5()\n    i = 0\n    while agent_position != delivery_cell and i < max_iterations:\n        i += 1\n        if agent_position[0] < delivery_cell[0]:\n            function_2()\n            agent_position[0] += 1\n        elif agent_position[0] > delivery_cell[0]:\n            function_1()\n            agent_position[0] -= 1\n        elif agent_position[1] < delivery_cell[1]:\n            function_4()\n            agent_position[1] += 1\n        elif agent_position[1] > delivery_cell[1]:\n            function_3()\n            agent_position[1] -= 1\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 17
                                },
                                "mi": {
                                    "mi": 44.842120438989454,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 38,
                                    "sloc": 40,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 425.8356662537092,
                                    "difficulty": 4.918918918918919,
                                    "effort": 2094.6511150858128,
                                    "time": 116.36950639365627,
                                    "bugs": 0.14194522208456972
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        false
                    ],
                    "error": false,
                    "trigger_function": "def function_dtf_1(belief_set):\n    spawn_cells = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'parcels_spawn']\n    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell']\n    walkable_cells = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'walkable']\n    agent_position = belief_set['agent'][1]['coordinates']\n    parcels_carried = belief_set['agent'][1]['parcels_carried_ids']\n    if len(spawn_cells) == 0 or len(delivery_cells) == 0 or len(walkable_cells\n        ) == 0:\n        return False\n    elif agent_position in [cell['cell_coordinates'] for cell in delivery_cells\n        ] and len(parcels_carried) > 0:\n        return False\n    else:\n        return True",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 13
                        },
                        "mi": {
                            "mi": 59.6780235265229,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 12,
                            "sloc": 17,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 140.2304206377674,
                            "difficulty": 2.9166666666666665,
                            "effort": 409.00539352682154,
                            "time": 22.722521862601198,
                            "bugs": 0.04674347354592247
                        }
                    }
                },
                "2": {
                    "description": "The agent should aim to maximize its score by efficiently picking up parcels from the spawn location and delivering them to the designated delivery cells, while avoiding non-walkable areas.",
                    "intentions": [
                        {
                            "id": 9,
                            "description": "The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels_spawn = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'parcels_spawn'][0]\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]\n    while agent['coordinates'] != parcels_spawn['cell_coordinates']:\n        if agent['coordinates'][0] > parcels_spawn['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][0] < parcels_spawn['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][1] > parcels_spawn['cell_coordinates'][1]:\n            function_3()\n        elif agent['coordinates'][1] < parcels_spawn['cell_coordinates'][1]:\n            function_4()\n    function_5()\n    while agent['coordinates'] != delivery_cell['cell_coordinates']:\n        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:\n            function_3()\n        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n            function_4()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 15
                                },
                                "mi": {
                                    "mi": 51.81587640351487,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 25,
                                    "sloc": 27,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 173.06477719407374,
                                    "difficulty": 2.0,
                                    "effort": 346.1295543881475,
                                    "time": 19.229419688230415,
                                    "bugs": 0.057688259064691244
                                }
                            }
                        },
                        {
                            "id": 10,
                            "description": "The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel. This should be achieved in an efficient manner, minimizing the number of moves and avoiding infinite loops.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    max_moves = 100\n    moves = 0\n    while moves < max_moves:\n        if belief_set['agent'][1]['coordinates'] == [0, 0]:\n            function_5()\n            moves += 1\n        elif belief_set['agent'][1]['coordinates'][1] > 0:\n            function_3()\n            moves += 1\n        elif belief_set['agent'][1]['coordinates'][0] > 0:\n            function_1()\n            moves += 1\n        elif belief_set['agent'][1]['coordinates'] == [1, 3]:\n            function_6()\n            moves += 1\n        elif belief_set['agent'][1]['coordinates'][1] < 3:\n            function_4()\n            moves += 1\n        elif belief_set['agent'][1]['coordinates'][0] < 1:\n            function_2()\n            moves += 1\n    if moves == max_moves:\n        return 'Max moves reached, goal not achieved'\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 52.647440062110014,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 25,
                                    "sloc": 25,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 171.67343933251428,
                                    "difficulty": 4.3076923076923075,
                                    "effort": 739.5163540477538,
                                    "time": 41.08424189154188,
                                    "bugs": 0.05722447977750476
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to move towards the nearest parcel spawn location, pick up a parcel if it isn't carrying any, then move towards the closest delivery cell and drop off the parcel. The agent should stop executing actions when its goal has been achieved.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    map_grid = belief_set['map']['grid']\n    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==\n        'delivery_cell'][0]\n    while True:\n        if not agent['parcels_carried_ids']:\n            function_5()\n            if agent['parcels_carried_ids']:\n                continue\n        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n            function_2()\n        if agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:\n            function_3()\n        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n            function_4()\n        if agent['coordinates'] == delivery_cell['cell_coordinates'] and agent[\n            'parcels_carried_ids']:\n            function_6()\n            break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 12
                                },
                                "mi": {
                                    "mi": 55.11654614259727,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 22,
                                    "sloc": 24,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 99.40434618240934,
                                    "difficulty": 2.5,
                                    "effort": 248.51086545602334,
                                    "time": 13.806159192001296,
                                    "bugs": 0.033134782060803114
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "3": {
                    "description": "The agent's long term goal is to optimize its route in order to collect as many parcels as possible and deliver them to the delivery cell in the least amount of time.",
                    "intentions": [
                        {
                            "id": 12,
                            "description": "The short term goal is for the agent to move towards the nearest parcel, pick it up, then move towards the closest delivery cell and drop off the parcel.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    min_distance = float('inf')\n    nearest_parcel = None\n    for parcel_id, parcel_info in belief_set['parcels'].items():\n        if parcel_info['carried_by_id'] is None:\n            distance = abs(belief_set['agent'][1]['coordinates'][0] -\n                parcel_info['coordinates'][0]) + abs(belief_set['agent'][1]\n                ['coordinates'][1] - parcel_info['coordinates'][1])\n            if distance < min_distance:\n                min_distance = distance\n                nearest_parcel = parcel_info\n    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'\n        ]:\n        if belief_set['agent'][1]['coordinates'][0] > nearest_parcel[\n            'coordinates'][0]:\n            function_1()\n        elif belief_set['agent'][1]['coordinates'][0] < nearest_parcel[\n            'coordinates'][0]:\n            function_2()\n        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[\n            'coordinates'][1]:\n            function_3()\n        else:\n            function_4()\n    function_5()\n    for cell in belief_set['map']['grid']:\n        if cell['cell_type'] == 'delivery_cell':\n            delivery_cell = cell\n            break\n    while belief_set['agent'][1]['coordinates'] != delivery_cell[\n        'cell_coordinates']:\n        if belief_set['agent'][1]['coordinates'][0] > delivery_cell[\n            'cell_coordinates'][0]:\n            function_1()\n        elif belief_set['agent'][1]['coordinates'][0] < delivery_cell[\n            'cell_coordinates'][0]:\n            function_2()\n        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[\n            'cell_coordinates'][1]:\n            function_3()\n        else:\n            function_4()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 14
                                },
                                "mi": {
                                    "mi": 48.371494079319575,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 34,
                                    "sloc": 44,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 215.4298867116886,
                                    "difficulty": 3.5,
                                    "effort": 754.0046034909101,
                                    "time": 41.8891446383839,
                                    "bugs": 0.07180996223722953
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        true,
                        true
                    ],
                    "error": false,
                    "trigger_function": "def function_dtf_2(belief_set):\n    if not belief_set['parcels']:\n        return False\n    if belief_set['agent'][1]['coordinates'] == [1, 3] and belief_set['agent'][\n        1]['parcels_carried_ids']:\n        return True\n    return True",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 4
                        },
                        "mi": {
                            "mi": 72.82316764952994,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 6,
                            "sloc": 7,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 24.0,
                            "difficulty": 1.5,
                            "effort": 36.0,
                            "time": 2.0,
                            "bugs": 0.008
                        }
                    }
                },
                "4": {
                    "description": "The agent's long term goal is to continually improve its strategy for avoiding non_walkable cells and efficiently navigate towards the parcels_spawn and delivery_cell areas.",
                    "intentions": [
                        {
                            "id": 13,
                            "description": "The agent's short term goal is to move towards the nearest parcel, pick it up, and then move towards the nearest delivery cell to drop off the parcel, while avoiding non-walkable cells.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    while True:\n        if belief_set['agent'][1]['coordinates'] == belief_set['parcels'][16][\n            'coordinates']:\n            function_5()\n        elif belief_set['agent'][1]['coordinates'] == [belief_set['map'][\n            'grid'][7]['cell_coordinates'][0], belief_set['map']['grid'][7]\n            ['cell_coordinates'][1]]:\n            function_6()\n        elif belief_set['agent'][1]['coordinates'][0] > belief_set['parcels'][\n            16]['coordinates'][0] and belief_set['map']['grid'][(belief_set\n            ['agent'][1]['coordinates'][0] - 1) * belief_set['map']['width'\n            ] + belief_set['agent'][1]['coordinates'][1]]['cell_type'\n            ] == 'walkable':\n            function_1()\n        elif belief_set['agent'][1]['coordinates'][0] < belief_set['parcels'][\n            16]['coordinates'][0] and belief_set['map']['grid'][(belief_set\n            ['agent'][1]['coordinates'][0] + 1) * belief_set['map']['width'\n            ] + belief_set['agent'][1]['coordinates'][1]]['cell_type'\n            ] == 'walkable':\n            function_2()\n        elif belief_set['agent'][1]['coordinates'][1] > belief_set['parcels'][\n            16]['coordinates'][1] and belief_set['map']['grid'][belief_set[\n            'agent'][1]['coordinates'][0] * belief_set['map']['width'] + (\n            belief_set['agent'][1]['coordinates'][1] - 1)]['cell_type'\n            ] == 'walkable':\n            function_3()\n        elif belief_set['agent'][1]['coordinates'][1] < belief_set['parcels'][\n            16]['coordinates'][1] and belief_set['map']['grid'][belief_set[\n            'agent'][1]['coordinates'][0] * belief_set['map']['width'] + (\n            belief_set['agent'][1]['coordinates'][1] + 1)]['cell_type'\n            ] == 'walkable':\n            function_4()\n        else:\n            break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 12
                                },
                                "mi": {
                                    "mi": 52.9890202963846,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 36,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 446.77779545592955,
                                    "difficulty": 3.9565217391304346,
                                    "effort": 1767.686060282156,
                                    "time": 98.20478112678644,
                                    "bugs": 0.1489259318186432
                                }
                            }
                        },
                        {
                            "id": 14,
                            "description": "The agent's short term goal is to move towards the nearest parcel spawn location, pick up a parcel if it's available, then move towards the nearest delivery cell and drop off the parcel if it's carrying one, while avoiding non-walkable cells.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                8
                            ],
                            "called_by": [],
                            "function": "def function_14():\n    global belief_set\n    max_iterations = 100\n    iteration = 0\n    while iteration < max_iterations:\n        function_8()\n        if belief_set['agent'][1]['parcels_carried_ids']:\n            function_6()\n        iteration += 1\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 3
                                },
                                "mi": {
                                    "mi": 70.77037628329926,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 9,
                                    "sloc": 9,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 13.931568569324174,
                                    "difficulty": 1.3333333333333333,
                                    "effort": 18.575424759098897,
                                    "time": 1.0319680421721609,
                                    "bugs": 0.004643856189774725
                                }
                            }
                        },
                        {
                            "id": 15,
                            "description": "The agent's short term goal is to move towards the nearest parcel if it's not carrying any, pick it up, then move towards the nearest delivery cell and drop off the parcel if it's carrying one, while avoiding non-walkable cells.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    map_grid = belief_set['map']['grid']\n    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==\n        'delivery_cell'][0]\n    agent_cell = [cell for cell in map_grid if cell['cell_coordinates'] ==\n        agent['coordinates']][0]\n    if not agent['parcels_carried_ids']:\n        parcel_spawn = [cell for cell in map_grid if cell['cell_type'] ==\n            'parcels_spawn'][0]\n        if agent_cell['cell_coordinates'][0] < parcel_spawn['cell_coordinates'\n            ][0]:\n            function_2()\n        elif agent_cell['cell_coordinates'][0] > parcel_spawn[\n            'cell_coordinates'][0]:\n            function_1()\n        elif agent_cell['cell_coordinates'][1] < parcel_spawn[\n            'cell_coordinates'][1]:\n            function_4()\n        elif agent_cell['cell_coordinates'][1] > parcel_spawn[\n            'cell_coordinates'][1]:\n            function_3()\n        function_5()\n    else:\n        if agent_cell['cell_coordinates'][0] < delivery_cell['cell_coordinates'\n            ][0]:\n            function_2()\n        elif agent_cell['cell_coordinates'][0] > delivery_cell[\n            'cell_coordinates'][0]:\n            function_1()\n        elif agent_cell['cell_coordinates'][1] < delivery_cell[\n            'cell_coordinates'][1]:\n            function_4()\n        elif agent_cell['cell_coordinates'][1] > delivery_cell[\n            'cell_coordinates'][1]:\n            function_3()\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 16
                                },
                                "mi": {
                                    "mi": 50.726770306263795,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 28,
                                    "sloc": 39,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 166.4210625757214,
                                    "difficulty": 2.0,
                                    "effort": 332.8421251514428,
                                    "time": 18.491229175080157,
                                    "bugs": 0.05547368752524047
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "8": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 4,
                    "intentions": {
                        "9": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "10": {
                            "n_objectives": 6,
                            "category": "grounded",
                            "one_action": false
                        },
                        "11": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "3": {
                    "n_objectives": 3,
                    "intentions": {
                        "12": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "4": {
                    "n_objectives": 4,
                    "intentions": {
                        "13": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "14": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "15": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": true
                        }
                    }
                }
            }
        },
        {
            "typology": "5",
            "path": "experiments/5/2024-11-02-09-03-00",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['map'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            belief_set['agent'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object removed':\n            del belief_set['agent'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.44872847079279,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_3(event, belief_set):\n    event_type = event['event_type']\n    object_type = event['object_type']\n    if object_type == 'parcel':\n        if 'parcels' not in belief_set.keys():\n            belief_set['parcels'] = {}\n        if event_type == 'object added':\n            belief_set['parcels'][event['object']['id']] = event['object']\n        elif event_type == 'object changed':\n            belief_set['parcels'][event['object']['id']].update(event['object']\n                )\n        elif event_type == 'object removed':\n            belief_set['parcels'].pop(event['object']['id'], None)\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 6
                            },
                            "mi": {
                                "mi": 63.00767453864186,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 14,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 49.82892142331044,
                                "difficulty": 1.25,
                                "effort": 62.28615177913805,
                                "time": 3.4603417655076694,
                                "bugs": 0.016609640474436815
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to develop an optimal path strategy to collect as many parcels as possible and deliver them to the delivery cell, while avoiding non-walkable cells, to maximize the score.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The short term goal of the agent is to move towards the parcel spawn point, pick up the parcel, and then head towards the delivery cell to drop the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels_spawn = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'parcels_spawn'][0]\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]\n    while agent['coordinates'] != parcels_spawn['cell_coordinates']:\n        if agent['coordinates'][0] < parcels_spawn['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > parcels_spawn['cell_coordinates'][0]:\n            function_1()\n        if agent['coordinates'][1] < parcels_spawn['cell_coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > parcels_spawn['cell_coordinates'][1]:\n            function_3()\n    function_5()\n    while agent['coordinates'] != delivery_cell['cell_coordinates']:\n        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n            function_1()\n        if agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 15
                                },
                                "mi": {
                                    "mi": 51.81587640351487,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 25,
                                    "sloc": 27,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 173.06477719407374,
                                    "difficulty": 2.0,
                                    "effort": 346.1295543881475,
                                    "time": 19.229419688230415,
                                    "bugs": 0.057688259064691244
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The agent's short term goal is to navigate towards the nearest parcel, pick it up, then move to the delivery cell and drop off the parcel, while avoiding non-walkable cells.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    parcel_carrying = False\n    while not parcel_carrying:\n        if belief_set['agent'][1]['coordinates'] == belief_set['map']['grid'][0\n            ]['cell_coordinates']:\n            function_5()\n            parcel_carrying = True\n        elif belief_set['agent'][1]['coordinates'][0] > belief_set['map'][\n            'grid'][0]['cell_coordinates'][0]:\n            function_1()\n        elif belief_set['agent'][1]['coordinates'][0] < belief_set['map'][\n            'grid'][0]['cell_coordinates'][0]:\n            function_2()\n        elif belief_set['agent'][1]['coordinates'][1] > belief_set['map'][\n            'grid'][0]['cell_coordinates'][1]:\n            function_3()\n        else:\n            function_4()\n    while belief_set['agent'][1]['coordinates'] != belief_set['map']['grid'][7\n        ]['cell_coordinates']:\n        if belief_set['agent'][1]['coordinates'][0] > belief_set['map']['grid'\n            ][7]['cell_coordinates'][0]:\n            function_1()\n        elif belief_set['agent'][1]['coordinates'][0] < belief_set['map'][\n            'grid'][7]['cell_coordinates'][0]:\n            function_2()\n        elif belief_set['agent'][1]['coordinates'][1] > belief_set['map'][\n            'grid'][7]['cell_coordinates'][1]:\n            function_3()\n        else:\n            function_4()\n    function_6()\n    return\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 53.334867387131304,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 26,
                                    "sloc": 34,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 115.94522208456974,
                                    "difficulty": 2.5,
                                    "effort": 289.86305521142435,
                                    "time": 16.103503067301354,
                                    "bugs": 0.038648407361523245
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        true
                    ],
                    "error": false,
                    "trigger_function": "def function_dtf_1(belief_set):\n    if not belief_set['parcels']:\n        return False\n    max_score = sum(parcel['score'] for parcel in belief_set['parcels'].\n        values())\n    if belief_set['agent'][1]['score'] < max_score:\n        return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 4
                        },
                        "mi": {
                            "mi": 73.57117501632806,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 7,
                            "sloc": 8,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 11.60964047443681,
                            "difficulty": 1.0,
                            "effort": 11.60964047443681,
                            "time": 0.6449800263576005,
                            "bugs": 0.0038698801581456034
                        }
                    }
                },
                "2": {
                    "description": "The agent's long term goal is to learn and adapt its path strategy to changes in the environment, such as new obstacles or parcel locations, while maintaining efficient parcel collection and delivery to increase its score over time.",
                    "intentions": [
                        {
                            "id": 9,
                            "description": "The agent's short term goal is to identify the closest parcel, navigate towards it while avoiding non-walkable cells, pick it up, then move to the delivery cell and drop off the parcel.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    parcel_coordinates = [parcel['coordinates'] for parcel in belief_set[\n        'parcels'].values() if parcel['carried_by_id'] is None]\n    delivery_coordinates = [cell['cell_coordinates'] for cell in belief_set\n        ['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    agent_coordinates = belief_set['agent'][1]['coordinates']\n    while agent_coordinates != parcel_coordinates[0]:\n        if agent_coordinates[0] < parcel_coordinates[0][0]:\n            function_2()\n        elif agent_coordinates[0] > parcel_coordinates[0][0]:\n            function_1()\n        if agent_coordinates[1] < parcel_coordinates[0][1]:\n            function_4()\n        elif agent_coordinates[1] > parcel_coordinates[0][1]:\n            function_3()\n        agent_coordinates = belief_set['agent'][1]['coordinates']\n    function_5()\n    while agent_coordinates != delivery_coordinates:\n        if agent_coordinates[0] < delivery_coordinates[0]:\n            function_2()\n        elif agent_coordinates[0] > delivery_coordinates[0]:\n            function_1()\n        if agent_coordinates[1] < delivery_coordinates[1]:\n            function_4()\n        elif agent_coordinates[1] > delivery_coordinates[1]:\n            function_3()\n        agent_coordinates = belief_set['agent'][1]['coordinates']\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 15
                                },
                                "mi": {
                                    "mi": 51.08677180327787,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 27,
                                    "sloc": 29,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 173.06477719407374,
                                    "difficulty": 2.608695652173913,
                                    "effort": 451.47333181062714,
                                    "time": 25.081851767257064,
                                    "bugs": 0.057688259064691244
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "3": {
                    "description": "The agent's long term goal is to improve efficiency by learning to predict when and where parcels will spawn, so it can position itself in advantageous locations ahead of time, while still avoiding non-walkable cells.",
                    "intentions": [
                        {
                            "id": 10,
                            "description": "The agent's short term goal is to move towards the nearest parcel spawn point, pick up any parcels present, then navigate to the delivery cell to drop off the parcels, while avoiding non-walkable cells.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    map_grid = belief_set['map']['grid']\n    spawn_cells = [cell for cell in map_grid if cell['cell_type'] ==\n        'parcels_spawn']\n    delivery_cells = [cell for cell in map_grid if cell['cell_type'] ==\n        'delivery_cell']\n    if len(agent['parcels_carried_ids']) == 0:\n        for cell in spawn_cells:\n            while agent['coordinates'] != cell['cell_coordinates']:\n                if agent['coordinates'][0] > cell['cell_coordinates'][0]:\n                    function_1()\n                elif agent['coordinates'][0] < cell['cell_coordinates'][0]:\n                    function_2()\n                elif agent['coordinates'][1] > cell['cell_coordinates'][1]:\n                    function_3()\n                elif agent['coordinates'][1] < cell['cell_coordinates'][1]:\n                    function_4()\n            function_5()\n    else:\n        for cell in delivery_cells:\n            while agent['coordinates'] != cell['cell_coordinates']:\n                if agent['coordinates'][0] > cell['cell_coordinates'][0]:\n                    function_1()\n                elif agent['coordinates'][0] < cell['cell_coordinates'][0]:\n                    function_2()\n                elif agent['coordinates'][1] > cell['cell_coordinates'][1]:\n                    function_3()\n                elif agent['coordinates'][1] < cell['cell_coordinates'][1]:\n                    function_4()\n            function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 18
                                },
                                "mi": {
                                    "mi": 49.068746391107474,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 31,
                                    "sloc": 33,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 191.36873322873222,
                                    "difficulty": 2.0,
                                    "effort": 382.73746645746445,
                                    "time": 21.263192580970248,
                                    "bugs": 0.06378957774291075
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to navigate to the nearest parcel spawn point, pick up any parcels present, then move to the delivery cell to drop off the parcels while avoiding non-walkable cells. The agent should also account for potential infinite loops and avoid them.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    max_iterations = 100\n    iteration_count = 0\n    agent_id = 1\n    while iteration_count < max_iterations:\n        agent_coords = belief_set['agent'][agent_id]['coordinates']\n        parcel_spawn_coords = [cell['cell_coordinates'] for cell in\n            belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][\n            0]\n        delivery_cell_coords = [cell['cell_coordinates'] for cell in\n            belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][\n            0]\n        if agent_coords == parcel_spawn_coords and len(belief_set['agent'][\n            agent_id]['parcels_carried_ids']) < 1:\n            function_5()\n        elif agent_coords == delivery_cell_coords and len(belief_set[\n            'agent'][agent_id]['parcels_carried_ids']) >= 1:\n            function_6()\n        elif agent_coords[0] > parcel_spawn_coords[0] and belief_set['map'][\n            'grid'][agent_coords[0] - 1][agent_coords[1]]['cell_type'\n            ] != 'non_walkable':\n            function_1()\n        elif agent_coords[0] < parcel_spawn_coords[0] and belief_set['map'][\n            'grid'][agent_coords[0] + 1][agent_coords[1]]['cell_type'\n            ] != 'non_walkable':\n            function_2()\n        elif agent_coords[1] > parcel_spawn_coords[1] and belief_set['map'][\n            'grid'][agent_coords[0]][agent_coords[1] - 1]['cell_type'\n            ] != 'non_walkable':\n            function_3()\n        elif agent_coords[1] < parcel_spawn_coords[1] and belief_set['map'][\n            'grid'][agent_coords[0]][agent_coords[1] + 1]['cell_type'\n            ] != 'non_walkable':\n            function_4()\n        iteration_count += 1\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 18
                                },
                                "mi": {
                                    "mi": 49.80011626658829,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 22,
                                    "sloc": 36,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 437.94736784098626,
                                    "difficulty": 5.073170731707317,
                                    "effort": 2221.78176855915,
                                    "time": 123.43232047550833,
                                    "bugs": 0.1459824559469954
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The agent's short term goal is to navigate to the parcel spawn point, pick up any parcels present, then move to the delivery cell to drop off the parcels, while avoiding non-walkable cells. The agent should also ensure not to enter an infinite loop by periodically checking if its coordinates have changed.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    agent = belief_set['agent'][1]\n    spawn_point = [item for item in belief_set['map']['grid'] if item[\n        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']\n    delivery_point = [item for item in belief_set['map']['grid'] if item[\n        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    previous_coordinates = agent['coordinates'][:]\n    while True:\n        if agent['coordinates'] == spawn_point:\n            function_5()\n        elif agent['coordinates'] == delivery_point:\n            function_6()\n        elif agent['coordinates'][0] > spawn_point[0]:\n            function_1()\n        elif agent['coordinates'][0] < spawn_point[0]:\n            function_2()\n        elif agent['coordinates'][1] > spawn_point[1]:\n            function_3()\n        elif agent['coordinates'][1] < spawn_point[1]:\n            function_4()\n        if previous_coordinates == agent['coordinates']:\n            break\n        else:\n            previous_coordinates = agent['coordinates'][:]\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 53.234271149880726,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 25,
                                    "sloc": 25,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 118.59257041502654,
                                    "difficulty": 1.5,
                                    "effort": 177.8888556225398,
                                    "time": 9.882714201252211,
                                    "bugs": 0.03953085680500885
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "4": {
                    "description": "The agent's long term goal is to enhance its efficiency by reducing the time spent on each task, achieving quick parcel pickups and deliveries, and minimizing idle time in order to increase overall productivity.",
                    "intentions": [
                        {
                            "id": 13,
                            "description": "The short term goal of the agent is to move towards the nearest parcel spawn point, pick up any parcel that might be present there and then navigate to the delivery cell to drop off the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    agent = belief_set['agent'][1]\n    while agent['coordinates'] != [0, 0]:\n        if agent['coordinates'][0] > 0:\n            function_1()\n        elif agent['coordinates'][1] > 0:\n            function_3()\n    function_5()\n    while agent['coordinates'] != [1, 3]:\n        if agent['coordinates'][0] < 1:\n            function_2()\n        elif agent['coordinates'][1] < 3:\n            function_4()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 60.54830008854806,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 68.53238859703687,
                                    "difficulty": 1.6363636363636365,
                                    "effort": 112.14390861333307,
                                    "time": 6.23021714518517,
                                    "bugs": 0.022844129532345624
                                }
                            }
                        },
                        {
                            "id": 14,
                            "description": "The short term goal of the agent is to locate the nearest parcel, navigate towards it while avoiding non-walkable cells, pick it up, and then move to the delivery cell to drop off the parcel in a time-efficient manner while updating its coordinates correctly to avoid getting stuck in an infinite loop.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_14():\n    global belief_set\n    max_iterations = 100\n    iteration_count = 0\n    while iteration_count < max_iterations and belief_set['agent'][1][\n        'coordinates'] != belief_set['parcels'][12]['coordinates']:\n        if belief_set['agent'][1]['coordinates'][0] < belief_set['parcels'][12\n            ]['coordinates'][0]:\n            function_2()\n        elif belief_set['agent'][1]['coordinates'][0] > belief_set['parcels'][\n            12]['coordinates'][0]:\n            function_1()\n        elif belief_set['agent'][1]['coordinates'][1] < belief_set['parcels'][\n            12]['coordinates'][1]:\n            function_4()\n        else:\n            function_3()\n        iteration_count += 1\n    function_5()\n    while iteration_count < max_iterations and belief_set['agent'][1][\n        'coordinates'] != [1, 3]:\n        if belief_set['agent'][1]['coordinates'][0] < 1:\n            function_2()\n        elif belief_set['agent'][1]['coordinates'][0] > 1:\n            function_1()\n        elif belief_set['agent'][1]['coordinates'][1] < 3:\n            function_4()\n        else:\n            function_3()\n        iteration_count += 1\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 11
                                },
                                "mi": {
                                    "mi": 51.581954707453,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 26,
                                    "sloc": 31,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 197.4184681619259,
                                    "difficulty": 3.3333333333333335,
                                    "effort": 658.061560539753,
                                    "time": 36.55897558554184,
                                    "bugs": 0.0658061560539753
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": "def function_dtf_2(belief_set):\n    agent = belief_set['agent'][1]\n    if agent['score'] >= 260:\n        return False\n    else:\n        walkable_cells = sum(1 for cell in belief_set['map']['grid'] if \n            cell['cell_type'] == 'walkable')\n        parcels_spawn_cells = sum(1 for cell in belief_set['map']['grid'] if\n            cell['cell_type'] == 'parcels_spawn')\n        delivery_cells = sum(1 for cell in belief_set['map']['grid'] if \n            cell['cell_type'] == 'delivery_cell')\n        if (walkable_cells > 0 and parcels_spawn_cells > 0 and \n            delivery_cells > 0):\n            return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 11
                        },
                        "mi": {
                            "mi": 61.61666663556273,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 11,
                            "sloc": 15,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 106.19818783608963,
                            "difficulty": 2.2666666666666666,
                            "effort": 240.71589242846983,
                            "time": 13.37310513491499,
                            "bugs": 0.03539939594536321
                        }
                    }
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 5,
                    "intentions": {
                        "7": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "8": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 6,
                    "intentions": {
                        "9": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "3": {
                    "n_objectives": 4,
                    "intentions": {
                        "10": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "11": {
                            "n_objectives": 6,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "12": {
                            "n_objectives": 6,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "4": {
                    "n_objectives": 6,
                    "intentions": {
                        "13": {
                            "n_objectives": 4,
                            "category": "grounded",
                            "one_action": false
                        },
                        "14": {
                            "n_objectives": 8,
                            "category": "grounded",
                            "one_action": false
                        }
                    }
                }
            }
        }
    ],
    "experiments/6": [
        {
            "typology": "6",
            "path": "experiments/6/2024-11-02-12-00-24",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if 'object_type' in event and event['object_type'] == 'map':\n        if event['event_type'] == 'object added' or event['event_type'\n            ] == 'object changed':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object removed':\n            if 'map' in belief_set:\n                del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 7
                            },
                            "mi": {
                                "mi": 65.29574547510987,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 8,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 101.95026032264605,
                                "difficulty": 2.1333333333333333,
                                "effort": 217.49388868831156,
                                "time": 12.082993816017309,
                                "bugs": 0.03398342010754868
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['agent'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['agent']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "battery": [
                    {
                        "function": "def function_3(event, belief_set):\n    if 'battery' not in belief_set:\n        belief_set['battery'] = {}\n    if event['object_type'] == 'battery':\n        if event['event_type'] == 'object added':\n            belief_set['battery'][event['object']['id']] = event['object'][\n                'coordinates']\n        elif event['event_type'] == 'object changed':\n            if event['object']['id'] in belief_set['battery']:\n                belief_set['battery'][event['object']['id']] = event['object'][\n                    'coordinates']\n        elif event['event_type'] == 'object removed':\n            if event['object']['id'] in belief_set['battery']:\n                del belief_set['battery'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 8
                            },
                            "mi": {
                                "mi": 61.150627517624486,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 15,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 84.0,
                                "difficulty": 1.6153846153846154,
                                "effort": 135.6923076923077,
                                "time": 7.538461538461539,
                                "bugs": 0.028
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcels' not in belief_set:\n                belief_set['parcels'] = {}\n            belief_set['parcels'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                belief_set['parcels'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                del belief_set['parcels'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.17653230125827,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to optimize its path to collect as many parcels as possible while maintaining sufficient energy levels, by strategically using battery spawn points for recharging.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The agent's short term goal is to move towards the parcel spawn location and pick up any parcels on the ground.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                15
                            ],
                            "function": "def function_7():\n    global belief_set\n    agent_coords = belief_set['agent']['coordinates']\n    parcel_coords = belief_set['parcels'][1]['coordinates']\n    while agent_coords != parcel_coords:\n        if agent_coords[0] > parcel_coords[0]:\n            function_1()\n            agent_coords[0] -= 1\n        elif agent_coords[0] < parcel_coords[0]:\n            function_2()\n            agent_coords[0] += 1\n        if agent_coords[1] > parcel_coords[1]:\n            function_3()\n            agent_coords[1] -= 1\n        elif agent_coords[1] < parcel_coords[1]:\n            function_4()\n            agent_coords[1] += 1\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 57.33706280113289,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 116.69205856195879,
                                    "difficulty": 3.0,
                                    "effort": 350.07617568587636,
                                    "time": 19.44867642699313,
                                    "bugs": 0.03889735285398626
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The agent's short term goal is to move towards the delivery cell to deliver the parcels it is carrying, and recharge its energy if the energy level is low.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                2,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    while belief_set['agent']['coordinates'] != [2, 3]:\n        if belief_set['agent']['coordinates'][0] < 2:\n            function_2()\n        elif belief_set['agent']['coordinates'][1] < 3:\n            function_4()\n        if belief_set['agent']['energy'] <= 40 and belief_set['agent'][\n            'coordinates'] == [2, 0]:\n            function_5()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 64.30817616174438,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 10,
                                    "sloc": 11,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 73.57433114250613,
                                    "difficulty": 2.5,
                                    "effort": 183.93582785626532,
                                    "time": 10.218657103125851,
                                    "bugs": 0.02452477704750204
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short term goal is to navigate towards the nearest parcel, pick it up and then move towards the delivery cell. If the energy level falls below 50, the agent should move towards the battery spawn cell to recharge.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    agent = belief_set['agent']\n    parcel_location = belief_set['parcels'][3]['coordinates']\n    delivery_location = [cell for cell in belief_set['map']['grid'] if cell\n        ['cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    battery_location = belief_set['battery'][1]\n    if agent['energy'] < 50:\n        if agent['coordinates'][0] > battery_location[0]:\n            function_1()\n        elif agent['coordinates'][0] < battery_location[0]:\n            function_2()\n        elif agent['coordinates'][1] > battery_location[1]:\n            function_3()\n        else:\n            function_4()\n    elif len(agent['parcels_carried_ids']) == 0:\n        if agent['coordinates'][0] > parcel_location[0]:\n            function_1()\n        elif agent['coordinates'][0] < parcel_location[0]:\n            function_2()\n        elif agent['coordinates'][1] > parcel_location[1]:\n            function_3()\n        else:\n            function_4()\n        function_5()\n    else:\n        if agent['coordinates'][0] > delivery_location[0]:\n            function_1()\n        elif agent['coordinates'][0] < delivery_location[0]:\n            function_2()\n        elif agent['coordinates'][1] > delivery_location[1]:\n            function_3()\n        else:\n            function_4()\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 14
                                },
                                "mi": {
                                    "mi": 48.796118790756765,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 35,
                                    "sloc": 36,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 171.1759500778849,
                                    "difficulty": 1.5,
                                    "effort": 256.76392511682735,
                                    "time": 14.264662506490408,
                                    "bugs": 0.05705865002596163
                                }
                            }
                        },
                        {
                            "id": 10,
                            "description": "The short term goal is to move the agent towards parcels, pick them up if present, and then move towards the battery spawn location when the energy level is below a certain threshold.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    current_position = belief_set['agent']['coordinates']\n    parcels_position = belief_set['map']['grid'][0]['cell_coordinates']\n    batteries_position = belief_set['map']['grid'][8]['cell_coordinates']\n    energy = belief_set['agent']['energy']\n    if energy < 30:\n        if current_position[0] > batteries_position[0]:\n            function_1()\n        elif current_position[0] < batteries_position[0]:\n            function_2()\n        elif current_position[1] > batteries_position[1]:\n            function_3()\n        elif current_position[1] < batteries_position[1]:\n            function_4()\n    else:\n        if current_position[0] > parcels_position[0]:\n            function_1()\n        elif current_position[0] < parcels_position[0]:\n            function_2()\n        elif current_position[1] > parcels_position[1]:\n            function_3()\n        elif current_position[1] < parcels_position[1]:\n            function_4()\n        if current_position == parcels_position:\n            function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 11
                                },
                                "mi": {
                                    "mi": 52.72178428049785,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 26,
                                    "sloc": 26,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 135.7068586817104,
                                    "difficulty": 1.5,
                                    "effort": 203.5602880225656,
                                    "time": 11.308904890142534,
                                    "bugs": 0.04523561956057014
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "2": {
                    "description": "The agent should aim to collect all parcels efficiently and deliver them to the delivery cell, while managing its energy levels by collecting batteries as needed.",
                    "intentions": [
                        {
                            "id": 11,
                            "description": "The short-term goal is to navigate to the closest parcel, pick it up, and then move towards the delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    parcels = belief_set['parcels']\n    agent_location = belief_set['agent']['coordinates']\n    delivery_location = [cell for cell in belief_set['map']['grid'] if cell\n        ['cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    closest_parcel = min(parcels.values(), key=lambda x: abs(x[\n        'coordinates'][0] - agent_location[0]) + abs(x['coordinates'][1] -\n        agent_location[1]))\n    parcel_location = closest_parcel['coordinates']\n    while agent_location != parcel_location:\n        if agent_location[0] < parcel_location[0]:\n            function_2()\n        elif agent_location[0] > parcel_location[0]:\n            function_1()\n        if agent_location[1] < parcel_location[1]:\n            function_4()\n        elif agent_location[1] > parcel_location[1]:\n            function_3()\n    function_5()\n    while agent_location != delivery_location:\n        if agent_location[0] < delivery_location[0]:\n            function_2()\n        elif agent_location[0] > delivery_location[0]:\n            function_1()\n        if agent_location[1] < delivery_location[1]:\n            function_4()\n        elif agent_location[1] > delivery_location[1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 50.39611792585392,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 28,
                                    "sloc": 30,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 211.86455301305503,
                                    "difficulty": 3.111111111111111,
                                    "effort": 659.1341649295045,
                                    "time": 36.618564718305805,
                                    "bugs": 0.07062151767101835
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The agent's immediate goal is to navigate to the nearest parcel, pick it up, and then move towards the delivery cell, while ensuring to update its location after each movement and avoid any infinite loops.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    parcels = belief_set['parcels']\n    agent = belief_set['agent']\n    delivery_cell_coords = [cell['cell_coordinates'] for cell in belief_set\n        ['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    while True:\n        if len(parcels) == 0 or agent['energy'] <= 0:\n            break\n        else:\n            closest_parcel_coords = min(parcels.values(), key=lambda x: abs\n                (x['coordinates'][0] - agent['coordinates'][0]) + abs(x[\n                'coordinates'][1] - agent['coordinates'][1]))['coordinates']\n            while agent['coordinates'] != closest_parcel_coords:\n                if agent['coordinates'][0] < closest_parcel_coords[0]:\n                    function_2()\n                elif agent['coordinates'][0] > closest_parcel_coords[0]:\n                    function_1()\n                elif agent['coordinates'][1] < closest_parcel_coords[1]:\n                    function_4()\n                else:\n                    function_3()\n                agent['coordinates'] = closest_parcel_coords\n            function_5()\n            while agent['coordinates'] != delivery_cell_coords:\n                if agent['coordinates'][0] < delivery_cell_coords[0]:\n                    function_2()\n                elif agent['coordinates'][0] > delivery_cell_coords[0]:\n                    function_1()\n                elif agent['coordinates'][1] < delivery_cell_coords[1]:\n                    function_4()\n                else:\n                    function_3()\n                agent['coordinates'] = delivery_cell_coords\n            function_6()\n            parcels = {k: v for k, v in parcels.items() if v[\n                'carried_by_id'] is None}\n    return\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 16
                                },
                                "mi": {
                                    "mi": 47.042808479682165,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 36,
                                    "sloc": 38,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 255.45254855459342,
                                    "difficulty": 4.645161290322581,
                                    "effort": 1186.618290060047,
                                    "time": 65.92323833666927,
                                    "bugs": 0.0851508495181978
                                }
                            }
                        },
                        {
                            "id": 13,
                            "description": "The agent's short term goal is to move towards the nearest parcel or battery, depending on its current energy level. If the energy level is sufficient, it should pick up a parcel. If the energy level is low, it should pick up a battery. After picking up a parcel, the agent should move towards the delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    agent = belief_set['agent']\n    parcels = belief_set['parcels']\n    battery_position = belief_set['battery'][1]\n    delivery_position = [2, 3]\n    while agent['coordinates'] != battery_position and agent['energy'] < 20:\n        if agent['coordinates'][0] < battery_position[0]:\n            function_2()\n        elif agent['coordinates'][0] > battery_position[0]:\n            function_1()\n        elif agent['coordinates'][1] < battery_position[1]:\n            function_4()\n        elif agent['coordinates'][1] > battery_position[1]:\n            function_3()\n    function_5()\n    for parcel in parcels.values():\n        if parcel['carried_by_id'] is None:\n            target_position = parcel['coordinates']\n            while agent['coordinates'] != target_position:\n                if agent['coordinates'][0] < target_position[0]:\n                    function_2()\n                elif agent['coordinates'][0] > target_position[0]:\n                    function_1()\n                elif agent['coordinates'][1] < target_position[1]:\n                    function_4()\n                elif agent['coordinates'][1] > target_position[1]:\n                    function_3()\n            function_5()\n            break\n    while agent['coordinates'] != delivery_position:\n        if agent['coordinates'][0] < delivery_position[0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_position[0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_position[1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_position[1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 19
                                },
                                "mi": {
                                    "mi": 45.26268923636237,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 40,
                                    "sloc": 40,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 289.30780824937654,
                                    "difficulty": 2.5,
                                    "effort": 723.2695206234414,
                                    "time": 40.181640034635635,
                                    "bugs": 0.0964359360831255
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "3": {
                    "description": "The agent should aim to collect as many parcels as possible and deliver them to the delivery cell, while ensuring that its energy level is sufficient for it to perform its tasks.",
                    "intentions": [
                        {
                            "id": 14,
                            "description": "The short term goal is for the agent to move towards the delivery cell to deliver all the parcels it is carrying and then move towards the battery spawn location to recharge its energy.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [
                                15
                            ],
                            "function": "def function_14():\n    global belief_set\n    agent_coordinates = belief_set['agent']['coordinates']\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    while agent_coordinates != delivery_cell:\n        if agent_coordinates[0] < delivery_cell[0]:\n            function_2()\n        elif agent_coordinates[0] > delivery_cell[0]:\n            function_1()\n        elif agent_coordinates[1] < delivery_cell[1]:\n            function_4()\n        else:\n            function_3()\n        agent_coordinates = belief_set['agent']['coordinates']\n    function_6()\n    battery_spawn = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'batteries_spawn'][0]['cell_coordinates']\n    while agent_coordinates != battery_spawn:\n        if agent_coordinates[0] < battery_spawn[0]:\n            function_2()\n        elif agent_coordinates[0] > battery_spawn[0]:\n            function_1()\n        elif agent_coordinates[1] < battery_spawn[1]:\n            function_4()\n        else:\n            function_3()\n        agent_coordinates = belief_set['agent']['coordinates']\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 52.49619815500762,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 26,
                                    "sloc": 28,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 133.78294855911892,
                                    "difficulty": 2.2222222222222223,
                                    "effort": 297.2954412424865,
                                    "time": 16.51641340236036,
                                    "bugs": 0.044594316186372975
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        false
                    ],
                    "error": false,
                    "trigger_function": "def function_dtf_1(belief_set):\n    if belief_set['agent']['energy'] > 5 and any(parcel['carried_by_id'] is\n        None for parcel in belief_set['parcels'].values()):\n        return True\n    else:\n        return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 4
                        },
                        "mi": {
                            "mi": 74.02471157127255,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 5,
                            "sloc": 6,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 28.529325012980813,
                            "difficulty": 1.5,
                            "effort": 42.793987519471216,
                            "time": 2.377443751081734,
                            "bugs": 0.009509775004326938
                        }
                    }
                },
                "4": {
                    "description": "The agent should aim to pick up as many parcels as possible, maintain a high energy level by collecting batteries, and deliver the parcels to the delivery cell to maximize its score.",
                    "intentions": [
                        {
                            "id": 15,
                            "description": "The agent's short term goal is to move towards the battery spawn location to recharge its energy, then move towards the parcel spawn location to pick up any parcels on the ground, and finally move towards the delivery cell to deliver all the parcels it is carrying.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                5,
                                6,
                                7,
                                14
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    function_14()\n    function_7()\n    function_5()\n    function_14()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 1
                                },
                                "mi": {
                                    "mi": 100.0,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 7,
                                    "sloc": 7,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 0,
                                    "difficulty": 0,
                                    "effort": 0,
                                    "time": 0.0,
                                    "bugs": 0.0
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "8": {
                            "n_objectives": 3,
                            "category": "grounded",
                            "one_action": false
                        },
                        "9": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "10": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        }
                    }
                },
                "2": {
                    "n_objectives": 4,
                    "intentions": {
                        "11": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "12": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "13": {
                            "n_objectives": 4,
                            "category": "grounded",
                            "one_action": false
                        }
                    }
                },
                "3": {
                    "n_objectives": 3,
                    "intentions": {
                        "14": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "4": {
                    "n_objectives": 5,
                    "intentions": {
                        "15": {
                            "n_objectives": 6,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "6",
            "path": "experiments/6/2024-11-02-10-59-50",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['map'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            belief_set.pop('map', None)\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            belief_set['agent'][event['object']['id']].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['agent'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.44872847079279,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "battery": [
                    {
                        "function": "def function_3(event, belief_set):\n    if 'batteries' not in belief_set:\n        belief_set['batteries'] = {}\n    if event['event_type'] == 'object added':\n        belief_set['batteries'][event['object']['id']] = event['object']\n    elif event['event_type'] == 'object changed':\n        belief_set['batteries'][event['object']['id']].update(event['object'])\n    elif event['event_type'] == 'object removed':\n        del belief_set['batteries'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.30629883759347,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 10,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 39.863137138648355,
                                "difficulty": 1.0,
                                "effort": 39.863137138648355,
                                "time": 2.2146187299249087,
                                "bugs": 0.013287712379549451
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            belief_set['parcels'] = belief_set.get('parcels', {})\n            belief_set['parcels'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                belief_set['parcels'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                del belief_set['parcels'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 9
                            },
                            "mi": {
                                "mi": 60.40528048021907,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 12,
                                "sloc": 15,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 131.76952268336282,
                                "difficulty": 1.6666666666666667,
                                "effort": 219.61587113893805,
                                "time": 12.200881729941003,
                                "bugs": 0.04392317422778761
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent should aim to efficiently collect and deliver as many parcels as possible within the map while maintaining sufficient energy levels by picking up batteries when necessary.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The short term goal is to navigate the agent to the nearest parcel, pick it up and deliver it to the delivery cell.",
                            "executable_at_desire_end": true,
                            "executable": false,
                            "invalidation_reason": "desire_triggered_execution",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    agent_loc = belief_set['agent'][1]['coordinates']\n    parcel_loc = belief_set['parcels'][1]['coordinates']\n    delivery_loc = [cell['cell_coordinates'] for cell in belief_set['map'][\n        'grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    while agent_loc != parcel_loc:\n        if agent_loc[0] < parcel_loc[0]:\n            function_2()\n        elif agent_loc[0] > parcel_loc[0]:\n            function_1()\n        elif agent_loc[1] < parcel_loc[1]:\n            function_4()\n        else:\n            function_3()\n        agent_loc = belief_set['agent'][1]['coordinates']\n    function_5()\n    while agent_loc != delivery_loc:\n        if agent_loc[0] < delivery_loc[0]:\n            function_2()\n        elif agent_loc[0] > delivery_loc[0]:\n            function_1()\n        elif agent_loc[1] < delivery_loc[1]:\n            function_4()\n        else:\n            function_3()\n        agent_loc = belief_set['agent'][1]['coordinates']\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 11
                                },
                                "mi": {
                                    "mi": 52.77417239759694,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 27,
                                    "sloc": 28,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 118.59257041502654,
                                    "difficulty": 2.1176470588235294,
                                    "effort": 251.13720793770327,
                                    "time": 13.952067107650182,
                                    "bugs": 0.03953085680500885
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        false
                    ],
                    "error": true,
                    "trigger_function": "def function_dtf_1(belief_set):\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    batteries = belief_set['batteries']\n    if len(parcels) > 0 or len(batteries) > 0 or agent['energy'] < 50:\n        return True\n    else:\n        return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 4
                        },
                        "mi": {
                            "mi": 68.18805145482973,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 8,
                            "sloc": 8,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 44.97261104228487,
                            "difficulty": 1.6875,
                            "effort": 75.89128113385571,
                            "time": 4.216182285214206,
                            "bugs": 0.01499087034742829
                        }
                    }
                },
                "2": {
                    "description": "The agent's long term goal is to efficiently navigate the map, collecting parcels from the spawn area and delivering them to the designated delivery cell while managing its energy level by collecting batteries from the batteries spawn area.",
                    "intentions": [
                        {
                            "id": 8,
                            "description": "The short term goal is to navigate the agent towards the parcel spawn cell to pick up a parcel. By doing so, the agent progresses towards its long-term goal of delivering parcels.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcel_spawn_cell = [cell for cell in belief_set['map']['grid'] if cell\n        ['cell_type'] == 'parcels_spawn'][0]\n    parcel_spawn_coordinates = parcel_spawn_cell['cell_coordinates']\n    while agent['coordinates'] != parcel_spawn_coordinates:\n        if agent['coordinates'][0] > parcel_spawn_coordinates[0]:\n            function_1()\n        elif agent['coordinates'][0] < parcel_spawn_coordinates[0]:\n            function_2()\n        elif agent['coordinates'][1] > parcel_spawn_coordinates[1]:\n            function_3()\n        elif agent['coordinates'][1] < parcel_spawn_coordinates[1]:\n            function_4()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 60.263697615941936,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 16,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 72.0,
                                    "difficulty": 2.0,
                                    "effort": 144.0,
                                    "time": 8.0,
                                    "bugs": 0.024
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The agent's short term goal is to navigate towards the nearest parcel spawn cell while ensuring that the path to the target is clear. If the path is not clear, the agent should alter its course and if the agent is stuck in a loop, it should break out of it after a certain number of attempts.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [
                                10,
                                11,
                                13
                            ],
                            "function": "def function_9():\n    global belief_set\n    agent = belief_set['agent'][1]\n    target_cell = None\n    for cell in belief_set['map']['grid']:\n        if cell['cell_type'] == 'parcels_spawn':\n            target_cell = cell['cell_coordinates']\n    if target_cell is None:\n        return\n    x_diff = target_cell[0] - agent['coordinates'][0]\n    y_diff = target_cell[1] - agent['coordinates'][1]\n    attempt_count = 0\n    while agent['coordinates'] != target_cell and attempt_count < 100:\n        if x_diff > 0:\n            function_2()\n            x_diff -= 1\n        elif x_diff < 0:\n            function_1()\n            x_diff += 1\n        if y_diff > 0:\n            function_4()\n            y_diff -= 1\n        elif y_diff < 0:\n            function_3()\n            y_diff += 1\n        attempt_count += 1\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 51.34722592145824,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 26,
                                    "sloc": 26,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 222.90509710918678,
                                    "difficulty": 7.529411764705882,
                                    "effort": 1678.344260586818,
                                    "time": 93.24134781037878,
                                    "bugs": 0.0743016990363956
                                }
                            }
                        },
                        {
                            "id": 10,
                            "description": "The agent's short term goal is to move towards the nearest batteries spawn cell while ensuring that its energy level is above a certain threshold. If the energy level is below the threshold, the agent should pick up a battery to replenish its energy.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                9
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    agent = belief_set['agent'][1]\n    battery_spawn = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'batteries_spawn'][0]['cell_coordinates']\n    if agent['energy'] < 30:\n        if agent['coordinates'] == battery_spawn:\n            function_5()\n        else:\n            function_9()\n    elif agent['coordinates'][0] < battery_spawn[0]:\n        function_2()\n    elif agent['coordinates'][0] > battery_spawn[0]:\n        function_1()\n    elif agent['coordinates'][1] < battery_spawn[1]:\n        function_4()\n    elif agent['coordinates'][1] > battery_spawn[1]:\n        function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 58.4089006048386,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 85.83671966625714,
                                    "difficulty": 1.5,
                                    "effort": 128.75507949938572,
                                    "time": 7.153059972188095,
                                    "bugs": 0.02861223988875238
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to pick up a parcel from the spawn cell, if it's currently in that cell. If not, it should navigate towards the nearest parcel spawn cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                9
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    agent_coordinates = belief_set['agent'][1]['coordinates']\n    for cell in belief_set['map']['grid']:\n        if cell['cell_type'] == 'parcels_spawn':\n            spawn_coordinates = cell['cell_coordinates']\n            break\n    if agent_coordinates == spawn_coordinates:\n        function_5()\n    else:\n        function_9()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 4
                                },
                                "mi": {
                                    "mi": 68.73478256020752,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 11,
                                    "sloc": 11,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 13.931568569324174,
                                    "difficulty": 0.5,
                                    "effort": 6.965784284662087,
                                    "time": 0.3869880158145604,
                                    "bugs": 0.004643856189774725
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The agent's short term goal is to navigate to the parcel spawn location, pick up any parcels, and then move to the delivery cell to drop off the parcels.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": "desire_triggered_execution",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [
                                13
                            ],
                            "function": "def function_12():\n    global belief_set\n    current_position = belief_set['agent'][1]['coordinates']\n    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    while current_position != parcel_spawn:\n        if parcel_spawn[0] < current_position[0]:\n            function_1()\n        elif parcel_spawn[0] > current_position[0]:\n            function_2()\n        if parcel_spawn[1] < current_position[1]:\n            function_3()\n        elif parcel_spawn[1] > current_position[1]:\n            function_4()\n        current_position = belief_set['agent'][1]['coordinates']\n    function_5()\n    while current_position != delivery_cell:\n        if delivery_cell[0] < current_position[0]:\n            function_1()\n        elif delivery_cell[0] > current_position[0]:\n            function_2()\n        if delivery_cell[1] < current_position[1]:\n            function_3()\n        elif delivery_cell[1] > current_position[1]:\n            function_4()\n        current_position = belief_set['agent'][1]['coordinates']\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 15
                                },
                                "mi": {
                                    "mi": 51.15516536346449,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 27,
                                    "sloc": 29,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 169.21582985307933,
                                    "difficulty": 2.1818181818181817,
                                    "effort": 369.1981742249003,
                                    "time": 20.511009679161127,
                                    "bugs": 0.05640527661769311
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        true
                    ],
                    "error": false,
                    "trigger_function": "def function_dtf_2(belief_set):\n    if belief_set['parcels'] or belief_set['agent'][1]['parcels_carried_ids']:\n        return True\n    elif belief_set['agent'][1]['energy'] < 30 and belief_set['batteries']:\n        return True\n    else:\n        return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 5
                        },
                        "mi": {
                            "mi": 70.70257693193707,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 7,
                            "sloc": 7,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 28.529325012980813,
                            "difficulty": 1.5,
                            "effort": 42.793987519471216,
                            "time": 2.377443751081734,
                            "bugs": 0.009509775004326938
                        }
                    }
                },
                "3": {
                    "description": "The agent's long term goal is to optimize its path planning in the environment, ensuring it minimizes energy consumption by using the shortest paths and avoiding non-walkable cells, while simultaneously maximizing its score by timely parcel delivery.",
                    "intentions": [
                        {
                            "id": 13,
                            "description": "The agent's short term goal is to navigate to the nearest parcel, pick it up, and then move to the delivery cell to drop off the parcel.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": "desire_triggered_execution",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                5,
                                6,
                                9,
                                12
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    function_9()\n    function_5()\n    function_12()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 1
                                },
                                "mi": {
                                    "mi": 100.0,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 6,
                                    "sloc": 6,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 0,
                                    "difficulty": 0,
                                    "effort": 0,
                                    "time": 0.0,
                                    "bugs": 0.0
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 5,
                    "intentions": {
                        "8": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "9": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "10": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "11": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "12": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "3": {
                    "n_objectives": 5,
                    "intentions": {
                        "13": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "6",
            "path": "experiments/6/2024-11-02-12-16-06",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            for cell in event['object']['grid']:\n                for belief_cell in belief_set['map']['grid']:\n                    if belief_cell['cell_coordinates'] == cell[\n                        'cell_coordinates']:\n                        belief_cell['cell_type'] = cell['cell_type']\n                        break\n        elif event['event_type'] == 'object removed':\n            del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 8
                            },
                            "mi": {
                                "mi": 62.615331570271195,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 14,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 51.89147427955947,
                                "difficulty": 0.5,
                                "effort": 25.945737139779734,
                                "time": 1.4414298410988742,
                                "bugs": 0.01729715809318649
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            belief_set['agent'][event['object']['id']].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['agent'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.44872847079279,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "battery": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] != 'battery':\n        return belief_set\n    if 'batteries' not in belief_set:\n        belief_set['batteries'] = {}\n    if event['event_type'] == 'object added':\n        belief_set['batteries'][event['object']['id']] = event['object']\n    elif event['event_type'] == 'object changed':\n        belief_set['batteries'][event['object']['id']] = event['object']\n    elif event['event_type'] == 'object removed':\n        del belief_set['batteries'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 6
                            },
                            "mi": {
                                "mi": 63.437837789466705,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 12,
                                "sloc": 12,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 55.506595772116384,
                                "difficulty": 1.5,
                                "effort": 83.25989365817458,
                                "time": 4.625549647676365,
                                "bugs": 0.01850219859070546
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcels' not in belief_set:\n                belief_set['parcels'] = {}\n            belief_set['parcels'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object removed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                del belief_set['parcels'][event['object']['id']]\n        elif event['event_type'] == 'object changed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                belief_set['parcels'][event['object']['id']] = event['object']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.17653230125827,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 15,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent should aim to collect all available parcels and deliver them to the delivery cell, while efficiently managing its energy by collecting batteries when necessary.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The short term goal is to move the agent towards the battery spawn if its energy level is below 50, otherwise move it towards the parcel spawn.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    agent = belief_set['agent'][1]\n    if agent['energy'] < 50:\n        battery_spawn = next(cell for cell in belief_set['map']['grid'] if \n            cell['cell_type'] == 'batteries_spawn')['cell_coordinates']\n        if agent['coordinates'][0] > battery_spawn[0]:\n            function_1()\n        elif agent['coordinates'][0] < battery_spawn[0]:\n            function_2()\n        elif agent['coordinates'][1] > battery_spawn[1]:\n            function_3()\n        else:\n            function_4()\n    else:\n        parcel_spawn = next(cell for cell in belief_set['map']['grid'] if \n            cell['cell_type'] == 'parcels_spawn')['cell_coordinates']\n        if agent['coordinates'][0] > parcel_spawn[0]:\n            function_1()\n        elif agent['coordinates'][0] < parcel_spawn[0]:\n            function_2()\n        elif agent['coordinates'][1] > parcel_spawn[1]:\n            function_3()\n        else:\n            function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 12
                                },
                                "mi": {
                                    "mi": 54.158705105911515,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 23,
                                    "sloc": 25,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 118.59257041502654,
                                    "difficulty": 1.5,
                                    "effort": 177.8888556225398,
                                    "time": 9.882714201252211,
                                    "bugs": 0.03953085680500885
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The short term goal is to move the agent to the cell containing the parcels and pick them up.",
                            "executable_at_desire_end": true,
                            "executable": false,
                            "invalidation_reason": "desire_triggered_execution",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    agent_coordinates = belief_set['agent'][1]['coordinates']\n    parcels_coordinates = belief_set['parcels'][1]['coordinates']\n    while agent_coordinates[0] < parcels_coordinates[0]:\n        function_2()\n        agent_coordinates[0] += 1\n    while agent_coordinates[0] > parcels_coordinates[0]:\n        function_1()\n        agent_coordinates[0] -= 1\n    while agent_coordinates[1] < parcels_coordinates[1]:\n        function_4()\n        agent_coordinates[1] += 1\n    while agent_coordinates[1] > parcels_coordinates[1]:\n        function_3()\n        agent_coordinates[1] -= 1\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 58.540851925512555,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 17,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 98.09910819000817,
                                    "difficulty": 2.4615384615384617,
                                    "effort": 241.47472785232782,
                                    "time": 13.415262658462657,
                                    "bugs": 0.03269970273000272
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short term goal is to move the agent to the cell containing the delivery point and deliver the parcels.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell\n        ['cell_type'] == 'delivery_cell')\n    agent = belief_set['agent'][1]\n    while agent['coordinates'] != delivery_cell['cell_coordinates']:\n        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n            function_4()\n        else:\n            function_3()\n    function_6()\n    return\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 61.102728214471206,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 16,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 57.110323830864054,
                                    "difficulty": 2.0,
                                    "effort": 114.22064766172811,
                                    "time": 6.345591536762672,
                                    "bugs": 0.019036774610288017
                                }
                            }
                        },
                        {
                            "id": 10,
                            "description": "The agent's short term goal is to move to the cell containing the delivery point and deliver all the parcels it is carrying.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    delivery_cell = None\n    for cell in belief_set['map']['grid']:\n        if cell['cell_type'] == 'delivery_cell':\n            delivery_cell = cell\n            break\n    agent = belief_set['agent'][1]\n    while agent['coordinates'] != delivery_cell['cell_coordinates']:\n        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n            function_4()\n        else:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 59.37547136063374,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 57.110323830864054,
                                    "difficulty": 2.0,
                                    "effort": 114.22064766172811,
                                    "time": 6.345591536762672,
                                    "bugs": 0.019036774610288017
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The agent should aim to move to the delivery cell and drop off all the parcels it is carrying, while also checking that it has enough energy to perform the action. If the agent finds itself on the batteries spawn cell while having less than 50% energy, it should pick up a battery before moving to the delivery cell.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [
                                21,
                                22,
                                23
                            ],
                            "function": "def function_11():\n    global belief_set\n    delivery_cell = [item['cell_coordinates'] for item in belief_set['map']\n        ['grid'] if item['cell_type'] == 'delivery_cell'][0]\n    agent = belief_set['agent'][1]\n    while agent['coordinates'] != delivery_cell:\n        if agent['coordinates'][0] > delivery_cell[0]:\n            function_1()\n        elif agent['coordinates'][0] < delivery_cell[0]:\n            function_2()\n        elif agent['coordinates'][1] > delivery_cell[1]:\n            function_3()\n        elif agent['coordinates'][1] < delivery_cell[1]:\n            function_4()\n        agent = belief_set['agent'][1]\n        if agent['coordinates'] == [item['cell_coordinates'] for item in\n            belief_set['map']['grid'] if item['cell_type'] == 'batteries_spawn'\n            ][0] and agent['energy'] < 50:\n            function_5()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 12
                                },
                                "mi": {
                                    "mi": 56.5714920592441,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 20,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 137.5488750216347,
                                    "difficulty": 2.6315789473684212,
                                    "effort": 361.97072374114396,
                                    "time": 20.109484652285776,
                                    "bugs": 0.04584962500721157
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The agent should move towards the parcels spawn cell, pick up all available parcels and then proceed to the delivery cell if the energy level allows it. If the energy is less than 50%, the agent should go to the batteries spawn cell first, pick up a battery and then proceed to the delivery cell.",
                            "executable_at_desire_end": true,
                            "executable": false,
                            "invalidation_reason": "three_times_in_wrong_intentions_or_dependency",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [
                                14,
                                15,
                                16,
                                17
                            ],
                            "function": "def function_12():\n    global belief_set\n    while belief_set['agent'][1]['coordinates'] != [0, 0]:\n        if belief_set['agent'][1]['coordinates'][0] > 0:\n            function_1()\n        elif belief_set['agent'][1]['coordinates'][1] > 0:\n            function_3()\n    function_5()\n    if belief_set['agent'][1]['energy'] < 50:\n        while belief_set['agent'][1]['coordinates'] != [2, 0]:\n            if belief_set['agent'][1]['coordinates'][0] < 2:\n                function_2()\n            elif belief_set['agent'][1]['coordinates'][1] > 0:\n                function_3()\n        function_5()\n    while belief_set['agent'][1]['coordinates'] != [2, 3]:\n        if belief_set['agent'][1]['coordinates'][0] < 2:\n            function_2()\n        elif belief_set['agent'][1]['coordinates'][1] < 3:\n            function_4()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 11
                                },
                                "mi": {
                                    "mi": 54.88377876919003,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 21,
                                    "sloc": 21,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 129.65784284662087,
                                    "difficulty": 1.7647058823529411,
                                    "effort": 228.80795796462505,
                                    "time": 12.711553220256947,
                                    "bugs": 0.043219280948873624
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        false
                    ],
                    "error": true,
                    "trigger_function": "def function_dtf_1(belief_set):\n    if len(belief_set['parcels']) > 0:\n        return True\n    if len(belief_set['agent'][1]['parcels_carried_ids']) > 0:\n        return True\n    if belief_set['agent'][1]['energy'] < 20:\n        return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 4
                        },
                        "mi": {
                            "mi": 69.94141346234306,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 8,
                            "sloc": 8,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 25.26619429851844,
                            "difficulty": 1.2,
                            "effort": 30.319433158222125,
                            "time": 1.6844129532345624,
                            "bugs": 0.008422064766172813
                        }
                    }
                },
                "2": {
                    "description": "The agent should aim to explore all walkable cells on the map, while preserving its energy by collecting batteries as needed.",
                    "intentions": [
                        {
                            "id": 13,
                            "description": "The agent should aim to move towards the batteries spawn cell, pick up a battery if the energy level is less than 50%, then proceed to visit all walkable cells on the grid.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    agent = belief_set['agent'][1]\n    if agent['energy'] < 50:\n        function_2()\n        function_5()\n    elif agent['coordinates'][0] < belief_set['map']['width'] - 1:\n        function_2()\n    elif agent['coordinates'][1] < belief_set['map']['height'] - 1:\n        function_4()\n    else:\n        function_1()\n        function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 4
                                },
                                "mi": {
                                    "mi": 63.153343266177636,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 13,
                                    "sloc": 13,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 51.89147427955947,
                                    "difficulty": 1.1111111111111112,
                                    "effort": 57.65719364395497,
                                    "time": 3.203177424664165,
                                    "bugs": 0.01729715809318649
                                }
                            }
                        },
                        {
                            "id": 14,
                            "description": "The agent should aim to move towards the battery spawn cell to pick up a battery if the energy level is less than 50%. If the energy level is above 50%, the agent should move towards the parcels spawn cell, pick up all available parcels, and then proceed to the delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "three_times_in_wrong_intentions_or_dependency",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                12
                            ],
                            "called_by": [
                                15,
                                16,
                                17
                            ],
                            "function": "def function_14():\n    global belief_set\n    agent = belief_set['agent'][1]\n    if agent['energy'] < 50:\n        function_2()\n    else:\n        function_12()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 2
                                },
                                "mi": {
                                    "mi": 76.55471099040834,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 7,
                                    "sloc": 7,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 4.754887502163469,
                                    "difficulty": 0.5,
                                    "effort": 2.3774437510817346,
                                    "time": 0.1320802083934297,
                                    "bugs": 0.0015849625007211565
                                }
                            }
                        },
                        {
                            "id": 15,
                            "description": "The agent should aim to move to the nearest unexplored walkable cell. If the agent's energy level drops below 50%, it should first go to the nearest batteries spawn cell to recharge.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                12,
                                14
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    agent = belief_set['agent'][1]\n    location = agent['coordinates']\n    energy = agent['energy']\n    if energy < 50:\n        function_14()\n    else:\n        unexplored_cells = [cell for cell in belief_set['map']['grid'] if \n            cell['cell_type'] == 'walkable' and cell['cell_coordinates'] !=\n            location]\n        if unexplored_cells:\n            nearest_cell = min(unexplored_cells, key=lambda cell: abs(cell[\n                'cell_coordinates'][0] - location[0]) + abs(cell[\n                'cell_coordinates'][1] - location[1]))\n            while location != nearest_cell['cell_coordinates']:\n                if nearest_cell['cell_coordinates'][0] < location[0]:\n                    function_1()\n                elif nearest_cell['cell_coordinates'][0] > location[0]:\n                    function_2()\n                elif nearest_cell['cell_coordinates'][1] < location[1]:\n                    function_3()\n                elif nearest_cell['cell_coordinates'][1] > location[1]:\n                    function_4()\n                location = belief_set['agent'][1]['coordinates']\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 11
                                },
                                "mi": {
                                    "mi": 53.50262185786598,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 22,
                                    "sloc": 25,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 176.64806144190666,
                                    "difficulty": 3.652173913043478,
                                    "effort": 645.149441787833,
                                    "time": 35.84163565487961,
                                    "bugs": 0.05888268714730222
                                }
                            }
                        },
                        {
                            "id": 16,
                            "description": "The short term goal is for the agent to move towards the battery spawn cell, pick up a battery if the energy level is less than 50%, and then go towards the parcels spawn cell, pick up all available parcels, and finally, proceed to the delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                12,
                                14
                            ],
                            "called_by": [],
                            "function": "def function_16():\n    global belief_set\n    if belief_set['agent'][1]['energy'] < 50:\n        function_14()\n    else:\n        function_12()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 2
                                },
                                "mi": {
                                    "mi": 78.01508585192973,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 6,
                                    "sloc": 6,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 4.754887502163469,
                                    "difficulty": 0.5,
                                    "effort": 2.3774437510817346,
                                    "time": 0.1320802083934297,
                                    "bugs": 0.0015849625007211565
                                }
                            }
                        },
                        {
                            "id": 17,
                            "description": "The short term goal is to check the agent's energy level. If it's less than 50%, the agent should move to the battery spawn cell and pick up a battery. If the energy level is above 50%, the agent should explore the nearest unvisited walkable cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                12,
                                14
                            ],
                            "called_by": [],
                            "function": "def function_17():\n    global belief_set\n    agent = belief_set['agent'][1]\n    if agent['energy'] < 50:\n        function_14()\n    elif agent['coordinates'][0] + 1 < belief_set['map']['width'] and {\n        'cell_coordinates': [agent['coordinates'][0] + 1, agent[\n        'coordinates'][1]], 'cell_type': 'walkable'} in belief_set['map'][\n        'grid']:\n        function_2()\n    elif agent['coordinates'][0] - 1 >= 0 and {'cell_coordinates': [agent[\n        'coordinates'][0] - 1, agent['coordinates'][1]], 'cell_type':\n        'walkable'} in belief_set['map']['grid']:\n        function_1()\n    elif agent['coordinates'][1] + 1 < belief_set['map']['height'] and {\n        'cell_coordinates': [agent['coordinates'][0], agent['coordinates'][\n        1] + 1], 'cell_type': 'walkable'} in belief_set['map']['grid']:\n        function_4()\n    elif agent['coordinates'][1] - 1 >= 0 and {'cell_coordinates': [agent[\n        'coordinates'][0], agent['coordinates'][1] - 1], 'cell_type':\n        'walkable'} in belief_set['map']['grid']:\n        function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 56.67249964435885,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 13,
                                    "sloc": 22,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 335.28146997790384,
                                    "difficulty": 3.7058823529411766,
                                    "effort": 1242.5136828592908,
                                    "time": 69.02853793662727,
                                    "bugs": 0.11176048999263462
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "3": {
                    "description": "The agent should aim to optimize its route in order to collect as many parcels and batteries as possible, while minimizing energy expenditure and avoiding non-walkable areas.",
                    "intentions": [
                        {
                            "id": 18,
                            "description": "The short term goal is for the agent to move towards and pickup a parcel if its energy is above 50% and it is not currently carrying any parcels. If the agent's energy is below 50%, it will move towards and pickup a battery. If the agent is carrying a parcel, it will move towards the delivery cell to deliver the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_18():\n    global belief_set\n    agent = belief_set['agent'][1]\n    if agent['energy'] > 50:\n        if not agent['parcels_carried_ids']:\n            if belief_set['parcels'] and agent['coordinates'][0] > belief_set[\n                'parcels'][list(belief_set['parcels'].keys())[0]]['coordinates'\n                ][0]:\n                function_1()\n            elif belief_set['parcels'] and agent['coordinates'][0\n                ] < belief_set['parcels'][list(belief_set['parcels'].keys())[0]\n                ]['coordinates'][0]:\n                function_2()\n            elif belief_set['parcels'] and agent['coordinates'][1\n                ] > belief_set['parcels'][list(belief_set['parcels'].keys())[0]\n                ]['coordinates'][1]:\n                function_3()\n            elif belief_set['parcels'] and agent['coordinates'][1\n                ] < belief_set['parcels'][list(belief_set['parcels'].keys())[0]\n                ]['coordinates'][1]:\n                function_4()\n            else:\n                function_5()\n        elif agent['coordinates'][0] > belief_set['map']['grid'][11][\n            'cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][0] < belief_set['map']['grid'][11][\n            'cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][1] > belief_set['map']['grid'][11][\n            'cell_coordinates'][1]:\n            function_3()\n        elif agent['coordinates'][1] < belief_set['map']['grid'][11][\n            'cell_coordinates'][1]:\n            function_4()\n        else:\n            function_6()\n    elif belief_set['batteries'] and agent['coordinates'][0] > belief_set[\n        'batteries'][list(belief_set['batteries'].keys())[0]]['coordinates'][0\n        ]:\n        function_1()\n    elif belief_set['batteries'] and agent['coordinates'][0] < belief_set[\n        'batteries'][list(belief_set['batteries'].keys())[0]]['coordinates'][0\n        ]:\n        function_2()\n    elif belief_set['batteries'] and agent['coordinates'][1] > belief_set[\n        'batteries'][list(belief_set['batteries'].keys())[0]]['coordinates'][1\n        ]:\n        function_3()\n    elif belief_set['batteries'] and agent['coordinates'][1] < belief_set[\n        'batteries'][list(belief_set['batteries'].keys())[0]]['coordinates'][1\n        ]:\n        function_4()\n    else:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 23
                                },
                                "mi": {
                                    "mi": 45.316082273624964,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 35,
                                    "sloc": 55,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 361.04827535904644,
                                    "difficulty": 2.0,
                                    "effort": 722.0965507180929,
                                    "time": 40.11647503989405,
                                    "bugs": 0.12034942511968215
                                }
                            }
                        },
                        {
                            "id": 19,
                            "description": "The agent should aim to move towards the parcels_spawn location, picking up any parcels on the way, and then move to the batteries_spawn location, picking up batteries if its energy is less than 50%. The agent should then move towards the delivery_cell to drop off any parcels it is carrying.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_19():\n    global belief_set\n    agent_location = belief_set['agent'][1]['coordinates']\n    parcels_spawn_location = [cell['cell_coordinates'] for cell in\n        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]\n    batteries_spawn_location = [cell['cell_coordinates'] for cell in\n        belief_set['map']['grid'] if cell['cell_type'] == 'batteries_spawn'][0]\n    delivery_cell_location = [cell['cell_coordinates'] for cell in\n        belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    while agent_location != parcels_spawn_location:\n        if agent_location[0] < parcels_spawn_location[0]:\n            function_2()\n        elif agent_location[0] > parcels_spawn_location[0]:\n            function_1()\n        elif agent_location[1] < parcels_spawn_location[1]:\n            function_4()\n        else:\n            function_3()\n        function_5()\n    while agent_location != batteries_spawn_location:\n        if agent_location[0] < batteries_spawn_location[0]:\n            function_2()\n        elif agent_location[0] > batteries_spawn_location[0]:\n            function_1()\n        elif agent_location[1] < batteries_spawn_location[1]:\n            function_4()\n        else:\n            function_3()\n        if belief_set['agent'][1]['energy'] < 50:\n            function_5()\n    while agent_location != delivery_cell_location:\n        if agent_location[0] < delivery_cell_location[0]:\n            function_2()\n        elif agent_location[0] > delivery_cell_location[0]:\n            function_1()\n        elif agent_location[1] < delivery_cell_location[1]:\n            function_4()\n        else:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 20
                                },
                                "mi": {
                                    "mi": 46.38224121346541,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 37,
                                    "sloc": 40,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 244.19821638001633,
                                    "difficulty": 2.1333333333333333,
                                    "effort": 520.9561949440348,
                                    "time": 28.942010830224156,
                                    "bugs": 0.08139940546000544
                                }
                            }
                        },
                        {
                            "id": 20,
                            "description": "The agent's short term goal is to move towards the 'parcels_spawn' location, pick up any parcels, move to the 'batteries_spawn' location, pick up batteries if its energy is less than 50%, then move towards the 'delivery_cell' while avoiding non-walkable areas to drop off any parcels it is carrying.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [
                                21,
                                22,
                                23
                            ],
                            "function": "def function_20():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels_spawn = next(cell['cell_coordinates'] for cell in belief_set[\n        'map']['grid'] if cell['cell_type'] == 'parcels_spawn')\n    batteries_spawn = next(cell['cell_coordinates'] for cell in belief_set[\n        'map']['grid'] if cell['cell_type'] == 'batteries_spawn')\n    delivery_cell = next(cell['cell_coordinates'] for cell in belief_set[\n        'map']['grid'] if cell['cell_type'] == 'delivery_cell')\n    while agent['coordinates'] != parcels_spawn:\n        if agent['coordinates'][0] < parcels_spawn[0]:\n            function_2()\n        elif agent['coordinates'][0] > parcels_spawn[0]:\n            function_1()\n        elif agent['coordinates'][1] < parcels_spawn[1]:\n            function_4()\n        elif agent['coordinates'][1] > parcels_spawn[1]:\n            function_3()\n        agent = belief_set['agent'][1]\n    function_5()\n    while agent['coordinates'] != batteries_spawn:\n        if agent['coordinates'][0] < batteries_spawn[0]:\n            function_2()\n        elif agent['coordinates'][0] > batteries_spawn[0]:\n            function_1()\n        elif agent['coordinates'][1] < batteries_spawn[1]:\n            function_4()\n        elif agent['coordinates'][1] > batteries_spawn[1]:\n            function_3()\n        agent = belief_set['agent'][1]\n    if agent['energy'] < 50:\n        function_5()\n    while agent['coordinates'] != delivery_cell:\n        if agent['coordinates'][0] < delivery_cell[0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell[0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_cell[1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_cell[1]:\n            function_3()\n        agent = belief_set['agent'][1]\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 23
                                },
                                "mi": {
                                    "mi": 44.601492921242034,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 40,
                                    "sloc": 43,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 301.26792647514816,
                                    "difficulty": 2.1714285714285713,
                                    "effort": 654.1817832031788,
                                    "time": 36.3434324001766,
                                    "bugs": 0.10042264215838272
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        true,
                        false
                    ],
                    "error": false,
                    "trigger_function": "def function_dtf_2(belief_set):\n    agent = belief_set['agent'][1]\n    has_parcels_on_map = bool(belief_set['parcels'])\n    has_batteries_on_map = bool(belief_set['batteries'])\n    has_energy = agent['energy'] > 0\n    return has_parcels_on_map or has_batteries_on_map and has_energy",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 3
                        },
                        "mi": {
                            "mi": 72.43195764141169,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 6,
                            "sloc": 6,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 28.529325012980813,
                            "difficulty": 1.5,
                            "effort": 42.793987519471216,
                            "time": 2.377443751081734,
                            "bugs": 0.009509775004326938
                        }
                    }
                },
                "4": {
                    "description": "The agent should strive to maintain a high energy level for maximum operational uptime and efficiency while ensuring the timely delivery of parcels to their respective locations.",
                    "intentions": [
                        {
                            "id": 21,
                            "description": "The agent should aim to move towards the parcels spawn location, pick up any parcels, and then move to the delivery cell to drop off the parcels it is carrying. During this process, it should also check its energy levels. If the energy level is less than 50% and the agent is on the batteries spawn cell, it should pick up a battery.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                5,
                                11,
                                20
                            ],
                            "called_by": [],
                            "function": "def function_21():\n    global belief_set\n    function_20()\n    agent = belief_set['agent'][1]\n    if agent['energy'] < 50:\n        for cell in belief_set['map']['grid']:\n            if cell['cell_type'] == 'batteries_spawn' and cell[\n                'cell_coordinates'] == agent['coordinates']:\n                function_5()\n    function_11()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 67.1811139707765,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 9,
                                    "sloc": 10,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 41.51317942364757,
                                    "difficulty": 1.5,
                                    "effort": 62.26976913547136,
                                    "time": 3.4594316186372978,
                                    "bugs": 0.01383772647454919
                                }
                            }
                        },
                        {
                            "id": 22,
                            "description": "The agent should aim to efficiently pick up parcels and batteries when necessary, and deliver parcels to the delivery cell, while maintaining a high energy level.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                11,
                                20
                            ],
                            "called_by": [],
                            "function": "def function_22():\n    global belief_set\n    function_20()\n    if belief_set['agent'][1]['energy'] < 50:\n        function_5()\n    function_11()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 2
                                },
                                "mi": {
                                    "mi": 76.55471099040834,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 7,
                                    "sloc": 7,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 4.754887502163469,
                                    "difficulty": 0.5,
                                    "effort": 2.3774437510817346,
                                    "time": 0.1320802083934297,
                                    "bugs": 0.0015849625007211565
                                }
                            }
                        },
                        {
                            "id": 23,
                            "description": "The agent's short-term goal is to move towards the parcel spawn location, pick up any parcels, then move to the battery spawn location, pick up a battery if its energy is less than 50%, and finally move towards the delivery cell to drop off the parcels it is carrying.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                5,
                                11,
                                20
                            ],
                            "called_by": [],
                            "function": "def function_23():\n    global belief_set\n    function_20()\n    if belief_set['agent'][1]['energy'] < 50:\n        function_5()\n    function_11()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 2
                                },
                                "mi": {
                                    "mi": 78.01508585192973,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 6,
                                    "sloc": 6,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 4.754887502163469,
                                    "difficulty": 0.5,
                                    "effort": 2.3774437510817346,
                                    "time": 0.1320802083934297,
                                    "bugs": 0.0015849625007211565
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "8": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "9": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "10": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "11": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "12": {
                            "n_objectives": 6,
                            "category": "grounded",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 3,
                    "intentions": {
                        "13": {
                            "n_objectives": 3,
                            "category": "predetermined",
                            "one_action": false
                        },
                        "14": {
                            "n_objectives": 5,
                            "category": "predetermined",
                            "one_action": false
                        },
                        "15": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "16": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "17": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        }
                    }
                },
                "3": {
                    "n_objectives": 5,
                    "intentions": {
                        "18": {
                            "n_objectives": 6,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "19": {
                            "n_objectives": 6,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "20": {
                            "n_objectives": 7,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "4": {
                    "n_objectives": 2,
                    "intentions": {
                        "21": {
                            "n_objectives": 6,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "22": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "23": {
                            "n_objectives": 6,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        }
    ],
    "experiments/7": [
        {
            "typology": "7",
            "path": "experiments/7/2024-11-04-09-33-19",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            for key, value in event['object'].items():\n                belief_set['map'][key] = value\n        elif event['event_type'] == 'object removed':\n            del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 6
                            },
                            "mi": {
                                "mi": 66.31422554681617,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 10,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['agent'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['agent']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'key':\n        if event['event_type'] == 'object added':\n            if 'keys' not in belief_set:\n                belief_set['keys'] = []\n            belief_set['keys'].append(event['object'])\n        elif event['event_type'] == 'object changed':\n            for key in belief_set['keys']:\n                if key['id'] == event['object']['id']:\n                    key.update(event['object'])\n        elif event['event_type'] == 'object removed':\n            belief_set['keys'] = [key for key in belief_set['keys'] if key[\n                'id'] != event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 60.815845974916826,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 14,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 85.83671966625714,
                                "difficulty": 1.5,
                                "effort": 128.75507949938572,
                                "time": 7.153059972188095,
                                "bugs": 0.02861223988875238
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] == 'door':\n        if event['event_type'] == 'object added':\n            if 'doors' not in belief_set:\n                belief_set['doors'] = []\n            belief_set['doors'].append(event['object'])\n        elif event['event_type'] == 'object changed':\n            for door in belief_set['doors']:\n                if door['id'] == event['object']['id']:\n                    door.update(event['object'])\n        elif event['event_type'] == 'object removed':\n            belief_set['doors'] = [door for door in belief_set['doors'] if \n                door['id'] != event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 60.815845974916826,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 14,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 85.83671966625714,
                                "difficulty": 1.5,
                                "effort": 128.75507949938572,
                                "time": 7.153059972188095,
                                "bugs": 0.02861223988875238
                            }
                        }
                    }
                ],
                "battery": [
                    {
                        "function": "def function_5(event, belief_set):\n    if event['object_type'] != 'battery':\n        return belief_set\n    if event['event_type'] == 'object added':\n        if 'batteries' not in belief_set:\n            belief_set['batteries'] = []\n        belief_set['batteries'].append(event['object'])\n    elif event['event_type'] == 'object changed':\n        for i, battery in enumerate(belief_set.get('batteries', [])):\n            if battery['id'] == event['object']['id']:\n                belief_set['batteries'][i] = event['object']\n                break\n    elif event['event_type'] == 'object removed':\n        belief_set['batteries'] = [battery for battery in belief_set.get(\n            'batteries', []) if battery['id'] != event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.460153772005185,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 15,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 85.83671966625714,
                                "difficulty": 1.5,
                                "effort": 128.75507949938572,
                                "time": 7.153059972188095,
                                "bugs": 0.02861223988875238
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_6(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcels' not in belief_set.keys():\n                belief_set['parcels'] = [event['object']]\n            else:\n                belief_set['parcels'].append(event['object'])\n        elif event['event_type'] == 'object changed':\n            for i, parcel in enumerate(belief_set['parcels']):\n                if parcel['id'] == event['object']['id']:\n                    belief_set['parcels'][i] = event['object']\n        elif event['event_type'] == 'object removed':\n            belief_set['parcels'] = [parcel for parcel in belief_set[\n                'parcels'] if parcel['id'] != event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 60.11377044925,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 14,
                                "sloc": 15,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 85.83671966625714,
                                "difficulty": 1.5,
                                "effort": 128.75507949938572,
                                "time": 7.153059972188095,
                                "bugs": 0.02861223988875238
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent should aim to collect all keys and use them to open doors, then collect and deliver all parcels while maintaining its energy level by collecting batteries when needed.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The agent should aim to move towards the key, pick it up and then move towards the nearest door to open it.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                9
                            ],
                            "function": "def function_7():\n    global belief_set\n    agent_position = belief_set['agent']['coordinates']\n    key_position = belief_set['keys'][0]['coordinates']\n    while agent_position[0] != key_position[0]:\n        if agent_position[0] > key_position[0]:\n            function_1()\n        else:\n            function_2()\n    while agent_position[1] != key_position[1]:\n        if agent_position[1] > key_position[1]:\n            function_3()\n        else:\n            function_4()\n    function_5()\n    door_position = belief_set['doors'][0]['coordinates']\n    while agent_position[0] != door_position[0]:\n        if agent_position[0] > door_position[0]:\n            function_1()\n        else:\n            function_2()\n    while agent_position[1] != door_position[1]:\n        if agent_position[1] > door_position[1]:\n            function_3()\n        else:\n            function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 53.916892575584384,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 26,
                                    "sloc": 26,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 100.07820003461549,
                                    "difficulty": 1.0,
                                    "effort": 100.07820003461549,
                                    "time": 5.559900001923083,
                                    "bugs": 0.0333594000115385
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The agent's short term goal is to move towards the nearest key, pick it up and then move towards the nearest door to open it, while ensuring the agent's position is updated after each move.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    target_key = belief_set['keys'][0]['coordinates']\n    target_door = belief_set['doors'][0]['coordinates']\n    agent_position = belief_set['agent']['coordinates']\n    max_iterations = 1000\n    while agent_position != target_key and max_iterations > 0:\n        if agent_position[0] < target_key[0]:\n            function_2()\n        elif agent_position[0] > target_key[0]:\n            function_1()\n        elif agent_position[1] < target_key[1]:\n            function_4()\n        elif agent_position[1] > target_key[1]:\n            function_3()\n        agent_position = belief_set['agent']['coordinates']\n        max_iterations -= 1\n    function_5()\n    while agent_position != target_door and max_iterations > 0:\n        if agent_position[0] < target_door[0]:\n            function_2()\n        elif agent_position[0] > target_door[0]:\n            function_1()\n        elif agent_position[1] < target_door[1]:\n            function_4()\n        elif agent_position[1] > target_door[1]:\n            function_3()\n        agent_position = belief_set['agent']['coordinates']\n        max_iterations -= 1\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 49.71247983712894,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 29,
                                    "sloc": 29,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 237.80142289857002,
                                    "difficulty": 3.076923076923077,
                                    "effort": 731.696685841754,
                                    "time": 40.64981588009744,
                                    "bugs": 0.07926714096619
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short term goal is for the agent to move towards the nearest door, open it using the key it possesses, and then proceed to the nearest parcel for pick up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                7
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    current_coordinates = belief_set['agent']['coordinates']\n    doors = belief_set['doors']\n    nearest_door_coordinates = min(doors, key=lambda x: abs(x['coordinates'\n        ][0] - current_coordinates[0]) + abs(x['coordinates'][1] -\n        current_coordinates[1]))['coordinates']\n    while current_coordinates != nearest_door_coordinates:\n        if nearest_door_coordinates[0] < current_coordinates[0]:\n            function_1()\n        elif nearest_door_coordinates[0] > current_coordinates[0]:\n            function_2()\n        elif nearest_door_coordinates[1] < current_coordinates[1]:\n            function_3()\n        else:\n            function_4()\n        current_coordinates = belief_set['agent']['coordinates']\n    function_7()\n    parcels = belief_set['parcels']\n    nearest_parcel_coordinates = min(parcels, key=lambda x: abs(x[\n        'coordinates'][0] - current_coordinates[0]) + abs(x['coordinates'][\n        1] - current_coordinates[1]))['coordinates']\n    while current_coordinates != nearest_parcel_coordinates:\n        if nearest_parcel_coordinates[0] < current_coordinates[0]:\n            function_1()\n        elif nearest_parcel_coordinates[0] > current_coordinates[0]:\n            function_2()\n        elif nearest_parcel_coordinates[1] < current_coordinates[1]:\n            function_3()\n        else:\n            function_4()\n        current_coordinates = belief_set['agent']['coordinates']\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 49.99675329099989,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 31,
                                    "sloc": 33,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 210.0,
                                    "difficulty": 2.5925925925925926,
                                    "effort": 544.4444444444445,
                                    "time": 30.246913580246915,
                                    "bugs": 0.07
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "2": {
                    "description": "The agent's long term goal is to efficiently navigate through the environment, pick up all the parcels, and deliver them to the specified delivery cell while maintaining its energy level by collecting batteries as needed.",
                    "intentions": [
                        {
                            "id": 10,
                            "description": "The agent's short term goal is to move towards the delivery cell by one cell if it is carrying parcels and the energy level allows it.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    agent = belief_set['agent']\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    if agent['parcels_carried_ids'] and agent['energy'] > 0:\n        if agent['coordinates'][0] < delivery_cell[0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell[0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_cell[1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_cell[1]:\n            function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 60.88961045085844,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 13,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 87.56842503028855,
                                    "difficulty": 2.0,
                                    "effort": 175.1368500605771,
                                    "time": 9.729825003365395,
                                    "bugs": 0.029189475010096184
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to navigate to the next parcel that is not currently being carried and pick it up.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    for parcel in belief_set['parcels']:\n        if parcel['carried_by_id'] is None:\n            target_coordinates = parcel['coordinates']\n            break\n    x_diff = belief_set['agent']['coordinates'][0] - target_coordinates[0]\n    y_diff = belief_set['agent']['coordinates'][1] - target_coordinates[1]\n    if x_diff > 0:\n        for _ in range(x_diff):\n            function_1()\n    elif x_diff < 0:\n        for _ in range(-x_diff):\n            function_2()\n    if y_diff > 0:\n        for _ in range(y_diff):\n            function_3()\n    elif y_diff < 0:\n        for _ in range(-y_diff):\n            function_4()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 11
                                },
                                "mi": {
                                    "mi": 55.82369694146138,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 21,
                                    "sloc": 21,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 95.18387305144009,
                                    "difficulty": 4.444444444444445,
                                    "effort": 423.0394357841782,
                                    "time": 23.502190876898787,
                                    "bugs": 0.03172795768381336
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The agent's short term goal is to deliver all the parcels it's currently carrying to the delivery cell.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']\n        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    agent_coords = belief_set['agent']['coordinates']\n    while agent_coords != delivery_cell:\n        if agent_coords[0] < delivery_cell[0]:\n            function_2()\n        elif agent_coords[0] > delivery_cell[0]:\n            function_1()\n        elif agent_coords[1] < delivery_cell[1]:\n            function_4()\n        elif agent_coords[1] > delivery_cell[1]:\n            function_3()\n        agent_coords = belief_set['agent']['coordinates']\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 60.33531939807733,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 16,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 70.32403072095333,
                                    "difficulty": 2.1818181818181817,
                                    "effort": 153.43424884571635,
                                    "time": 8.52412493587313,
                                    "bugs": 0.02344134357365111
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "3": {
                    "description": "The agent's long term goal is to collect all the batteries in the environment to ensure that it has enough energy to perform its tasks.",
                    "intentions": [
                        {
                            "id": 13,
                            "description": "The agent's short term goal is to navigate to the nearest battery and pick it up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    agent = belief_set['agent']\n    batteries = belief_set['batteries']\n    closest_battery = min(batteries, key=lambda battery: abs(battery[\n        'coordinates'][0] - agent['coordinates'][0]) + abs(battery[\n        'coordinates'][1] - agent['coordinates'][1]))\n    while agent['coordinates'][0] < closest_battery['coordinates'][0]:\n        function_2()\n    while agent['coordinates'][0] > closest_battery['coordinates'][0]:\n        function_1()\n    while agent['coordinates'][1] < closest_battery['coordinates'][1]:\n        function_4()\n    while agent['coordinates'][1] > closest_battery['coordinates'][1]:\n        function_3()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 60.07192994385323,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 16,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 87.56842503028855,
                                    "difficulty": 2.0,
                                    "effort": 175.1368500605771,
                                    "time": 9.729825003365395,
                                    "bugs": 0.029189475010096184
                                }
                            }
                        },
                        {
                            "id": 14,
                            "description": "The agent's short term goal is to navigate to the nearest battery and pick it up.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_14():\n    global belief_set\n    battery_coords = belief_set['batteries'][0]['coordinates']\n    while belief_set['agent']['coordinates'] != battery_coords:\n        if belief_set['agent']['coordinates'][0] < battery_coords[0]:\n            function_2()\n        elif belief_set['agent']['coordinates'][0] > battery_coords[0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][1] < battery_coords[1]:\n            function_4()\n        elif belief_set['agent']['coordinates'][1] > battery_coords[1]:\n            function_3()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 62.679538453612146,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 13,
                                    "sloc": 13,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        true
                    ],
                    "error": false,
                    "trigger_function": "def function_dtf_1(belief_set):\n    if 'batteries' in belief_set and len(belief_set['batteries']) > 0:\n        return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 3
                        },
                        "mi": {
                            "mi": 76.27320603401535,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 4,
                            "sloc": 4,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 28.529325012980813,
                            "difficulty": 1.5,
                            "effort": 42.793987519471216,
                            "time": 2.377443751081734,
                            "bugs": 0.009509775004326938
                        }
                    }
                },
                "4": {
                    "description": "The agent's long term goal is to collect all parcels from the spawn point and deliver them to the delivery cell, maximizing its score while ensuring it has enough energy to perform these tasks.",
                    "intentions": [
                        {
                            "id": 15,
                            "description": "The short term goal is to navigate to the parcel spawn point, pick up all the available parcels, then navigate to the delivery cell to deliver the parcels.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    while belief_set['agent']['coordinates'] != [0, 0]:\n        if belief_set['agent']['coordinates'][0] > 0:\n            function_1()\n        else:\n            function_3()\n    function_5()\n    while belief_set['agent']['coordinates'] != [1, 3]:\n        if belief_set['agent']['coordinates'][0] < 1:\n            function_2()\n        else:\n            function_4()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 62.99533000181719,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 41.51317942364757,
                                    "difficulty": 1.5,
                                    "effort": 62.26976913547136,
                                    "time": 3.4594316186372978,
                                    "bugs": 0.01383772647454919
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        true
                    ],
                    "error": false,
                    "trigger_function": "def function_dtf_2(belief_set):\n    agent = belief_set['agent']\n    if agent['energy'] < 20:\n        return False\n    if len(belief_set['parcels']) == 0 and len(agent['parcels_carried_ids']\n        ) == 0:\n        return False\n    return True",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 4
                        },
                        "mi": {
                            "mi": 69.81982754625282,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 7,
                            "sloc": 8,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 39.863137138648355,
                            "difficulty": 1.7142857142857142,
                            "effort": 68.33680652339717,
                            "time": 3.796489251299843,
                            "bugs": 0.013287712379549451
                        }
                    }
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 6,
                    "intentions": {
                        "7": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "8": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "9": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 5,
                    "intentions": {
                        "10": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "11": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "12": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "3": {
                    "n_objectives": 1,
                    "intentions": {
                        "13": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "14": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "4": {
                    "n_objectives": 4,
                    "intentions": {
                        "15": {
                            "n_objectives": 4,
                            "category": "grounded",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "7",
            "path": "experiments/7/2024-11-04-11-25-26",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['map'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            if 'agent' in belief_set and event['object']['id'] in belief_set[\n                'agent']:\n                belief_set['agent'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'agent' in belief_set and event['object']['id'] in belief_set[\n                'agent']:\n                del belief_set['agent'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 9
                            },
                            "mi": {
                                "mi": 60.45440787126831,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 12,
                                "sloc": 14,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 129.65784284662087,
                                "difficulty": 1.7647058823529411,
                                "effort": 228.80795796462505,
                                "time": 12.711553220256947,
                                "bugs": 0.043219280948873624
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'key':\n        if event['event_type'] == 'object added':\n            if 'keys' not in belief_set:\n                belief_set['keys'] = [event['object']]\n            else:\n                belief_set['keys'].append(event['object'])\n        elif event['event_type'] == 'object changed':\n            for i, key in enumerate(belief_set.get('keys', [])):\n                if key['id'] == event['object']['id']:\n                    belief_set['keys'][i] = event['object']\n        elif event['event_type'] == 'object removed':\n            belief_set['keys'] = [key for key in belief_set.get('keys', []) if\n                key['id'] != event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 60.11377044925,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 14,
                                "sloc": 15,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 85.83671966625714,
                                "difficulty": 1.5,
                                "effort": 128.75507949938572,
                                "time": 7.153059972188095,
                                "bugs": 0.02861223988875238
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] != 'door':\n        return belief_set\n    if event['event_type'] == 'object added':\n        if 'doors' not in belief_set:\n            belief_set['doors'] = []\n        belief_set['doors'].append(event['object'])\n    elif event['event_type'] == 'object changed':\n        for door in belief_set['doors']:\n            if door['id'] == event['object']['id']:\n                door.update(event['object'])\n    elif event['event_type'] == 'object removed':\n        belief_set['doors'] = [door for door in belief_set['doors'] if door\n            ['id'] != event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 60.11377044925,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 14,
                                "sloc": 15,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 85.83671966625714,
                                "difficulty": 1.5,
                                "effort": 128.75507949938572,
                                "time": 7.153059972188095,
                                "bugs": 0.02861223988875238
                            }
                        }
                    }
                ],
                "battery": [
                    {
                        "function": "def function_5(event, belief_set):\n    if event['object_type'] == 'battery':\n        if 'batteries' not in belief_set:\n            belief_set['batteries'] = []\n        if event['event_type'] == 'object added':\n            belief_set['batteries'].append(event['object'])\n        elif event['event_type'] == 'object changed':\n            for battery in belief_set['batteries']:\n                if battery['id'] == event['object']['id']:\n                    battery['coordinates'] = event['object']['coordinates']\n        elif event['event_type'] == 'object removed':\n            belief_set['batteries'] = [battery for battery in belief_set[\n                'batteries'] if battery['id'] != event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 60.815845974916826,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 14,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 85.83671966625714,
                                "difficulty": 1.5,
                                "effort": 128.75507949938572,
                                "time": 7.153059972188095,
                                "bugs": 0.02861223988875238
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_6(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcels' not in belief_set:\n                belief_set['parcels'] = []\n            belief_set['parcels'].append(event['object'])\n        elif event['event_type'] == 'object changed':\n            for parcel in belief_set['parcels']:\n                if parcel['id'] == event['object']['id']:\n                    parcel.update(event['object'])\n        elif event['event_type'] == 'object removed':\n            belief_set['parcels'] = [parcel for parcel in belief_set[\n                'parcels'] if parcel['id'] != event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 60.815845974916826,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 14,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 85.83671966625714,
                                "difficulty": 1.5,
                                "effort": 128.75507949938572,
                                "time": 7.153059972188095,
                                "bugs": 0.02861223988875238
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to explore the entire map, identify all important locations (like spawn and delivery cells), and map the fastest routes between these locations while avoiding non-walkable cells.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The agent's short term goal is to move one cell towards the nearest important location (like spawn and delivery cells) that has not been visited yet.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "three_times_in_wrong_intentions_or_dependency",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [
                                8,
                                9,
                                10
                            ],
                            "function": "def function_7():\n    global belief_set\n    agent = belief_set['agent'][1]\n    map = belief_set['map']['grid']\n    unvisited_cells = [cell for cell in map if cell['cell_type'] in [\n        'parcels_spawn', 'batteries_spawn', 'delivery_cell'] and cell[\n        'cell_coordinates'] != agent['coordinates']]\n    if not unvisited_cells:\n        return\n    nearest_cell = min(unvisited_cells, key=lambda cell: abs(cell[\n        'cell_coordinates'][0] - agent['coordinates'][0]) + abs(cell[\n        'cell_coordinates'][1] - agent['coordinates'][1]))\n    if nearest_cell['cell_coordinates'][0] < agent['coordinates'][0]:\n        function_1()\n    elif nearest_cell['cell_coordinates'][0] > agent['coordinates'][0]:\n        function_2()\n    elif nearest_cell['cell_coordinates'][1] < agent['coordinates'][1]:\n        function_3()\n    elif nearest_cell['cell_coordinates'][1] > agent['coordinates'][1]:\n        function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 56.60285260558921,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 20,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 155.45539184408233,
                                    "difficulty": 4.0,
                                    "effort": 621.8215673763293,
                                    "time": 34.54564263201829,
                                    "bugs": 0.05181846394802744
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The agent's short term goal is to move towards the nearest unvisited important location and pick up any uncollected parcel on the way.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                7
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    agent_id = 1\n    agent_position = belief_set['agent'][agent_id]['coordinates']\n    parcels = [parcel for parcel in belief_set['parcels'] if parcel[\n        'carried_by_id'] == None and parcel['coordinates'] == agent_position]\n    if parcels:\n        function_5()\n    else:\n        function_7()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 68.48924569820511,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 9,
                                    "sloc": 10,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 27.0,
                                    "difficulty": 1.0,
                                    "effort": 27.0,
                                    "time": 1.5,
                                    "bugs": 0.009
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short term goal is to move the agent towards the nearest unvisited important location, such as spawn or delivery cells, and pick up any objects found in the cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                7
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    function_7()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 1
                                },
                                "mi": {
                                    "mi": 100.0,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 4,
                                    "sloc": 4,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 0,
                                    "difficulty": 0,
                                    "effort": 0,
                                    "time": 0.0,
                                    "bugs": 0.0
                                }
                            }
                        },
                        {
                            "id": 10,
                            "description": "The agent's short term goal is to move towards the nearest unvisited important location. If the agent encounters any pickups on the way, it should pick them up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                7
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    function_7()\n    for cell in belief_set['map']['grid']:\n        if cell['cell_coordinates'] == belief_set['agent'][1]['coordinates'\n            ] and 'spawn' in cell['cell_type']:\n            function_5()\n    return\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 4
                                },
                                "mi": {
                                    "mi": 70.83707985591369,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 7,
                                    "sloc": 8,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 28.529325012980813,
                                    "difficulty": 1.5,
                                    "effort": 42.793987519471216,
                                    "time": 2.377443751081734,
                                    "bugs": 0.009509775004326938
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "2": {
                    "description": "The agent's long term goal is to collect all the parcels, navigate through the grid avoiding non-walkable cells, pick up keys to unlock doors when necessary, recharge energy using batteries, and finally deliver all parcels to the delivery cell to maximize the score while maintaining sufficient energy.",
                    "intentions": [
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to navigate towards the key, pick it up and then move towards the closest door to unlock it.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    agent = belief_set['agent'][1]\n    key = belief_set['keys'][0]\n    door = belief_set['doors'][0]\n    while agent['coordinates'] != key['coordinates']:\n        if agent['coordinates'][0] < key['coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > key['coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < key['coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > key['coordinates'][1]:\n            function_3()\n    function_5()\n    while agent['coordinates'] != door['coordinates']:\n        if agent['coordinates'][0] < door['coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > door['coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < door['coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > door['coordinates'][1]:\n            function_3()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 11
                                },
                                "mi": {
                                    "mi": 53.09334893142368,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 25,
                                    "sloc": 25,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 135.7068586817104,
                                    "difficulty": 1.5,
                                    "effort": 203.5602880225656,
                                    "time": 11.308904890142534,
                                    "bugs": 0.04523561956057014
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The agent should move towards the closest battery, pick it up and then move towards the delivery cell to drop the parcels and increase the score.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    agent_coordinates = belief_set['agent'][1]['coordinates']\n    battery_coordinates = belief_set['batteries'][0]['coordinates']\n    delivery_coordinates = [i['cell_coordinates'] for i in belief_set['map'\n        ]['grid'] if i['cell_type'] == 'delivery_cell'][0]\n    while agent_coordinates != battery_coordinates:\n        if agent_coordinates[0] < battery_coordinates[0]:\n            function_2()\n        elif agent_coordinates[0] > battery_coordinates[0]:\n            function_1()\n        elif agent_coordinates[1] < battery_coordinates[1]:\n            function_4()\n        elif agent_coordinates[1] > battery_coordinates[1]:\n            function_3()\n        agent_coordinates = belief_set['agent'][1]['coordinates']\n    function_5()\n    while agent_coordinates != delivery_coordinates:\n        if agent_coordinates[0] < delivery_coordinates[0]:\n            function_2()\n        elif agent_coordinates[0] > delivery_coordinates[0]:\n            function_1()\n        elif agent_coordinates[1] < delivery_coordinates[1]:\n            function_4()\n        elif agent_coordinates[1] > delivery_coordinates[1]:\n            function_3()\n        agent_coordinates = belief_set['agent'][1]['coordinates']\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 51.725595876881194,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 27,
                                    "sloc": 28,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 153.24725426256592,
                                    "difficulty": 2.0952380952380953,
                                    "effort": 321.0894851215667,
                                    "time": 17.838304728975928,
                                    "bugs": 0.05108241808752197
                                }
                            }
                        },
                        {
                            "id": 13,
                            "description": "The agent's short term goal is to move towards the closest battery if the battery is reachable and not blocked by non-walkable cells, pick it up to recharge energy and then move towards the delivery cell to drop the parcels and increase the score. The agent should ensure that it's not stuck in an infinite loop by limiting the number of movements and check if the target cells are reachable.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    agent = belief_set['agent'][1]\n    batteries = belief_set['batteries']\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]\n    max_movements = 10\n    movement_count = 0\n    while agent['coordinates'] != batteries[0]['coordinates'\n        ] and movement_count < max_movements:\n        if agent['coordinates'][0] > batteries[0]['coordinates'][0\n            ] and belief_set['map']['grid'][agent['coordinates'][0] - 1][agent\n            ['coordinates'][1]]['cell_type'] != 'non_walkable':\n            function_1()\n        elif agent['coordinates'][0] < batteries[0]['coordinates'][0\n            ] and belief_set['map']['grid'][agent['coordinates'][0] + 1][agent\n            ['coordinates'][1]]['cell_type'] != 'non_walkable':\n            function_2()\n        elif agent['coordinates'][1] > batteries[0]['coordinates'][1\n            ] and belief_set['map']['grid'][agent['coordinates'][0]][agent[\n            'coordinates'][1] - 1]['cell_type'] != 'non_walkable':\n            function_3()\n        elif agent['coordinates'][1] < batteries[0]['coordinates'][1\n            ] and belief_set['map']['grid'][agent['coordinates'][0]][agent[\n            'coordinates'][1] + 1]['cell_type'] != 'non_walkable':\n            function_4()\n        agent['coordinates'] = [agent['coordinates'][0] + i[0], agent[\n            'coordinates'][1] + i[1]]\n        movement_count += 1\n    if agent['coordinates'] == batteries[0]['coordinates']:\n        function_5()\n    while agent['coordinates'] != delivery_cell['cell_coordinates'\n        ] and movement_count < max_movements:\n        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0\n            ] and belief_set['map']['grid'][agent['coordinates'][0] - 1][agent\n            ['coordinates'][1]]['cell_type'] != 'non_walkable':\n            function_1()\n        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0\n            ] and belief_set['map']['grid'][agent['coordinates'][0] + 1][agent\n            ['coordinates'][1]]['cell_type'] != 'non_walkable':\n            function_2()\n        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1\n            ] and belief_set['map']['grid'][agent['coordinates'][0]][agent[\n            'coordinates'][1] - 1]['cell_type'] != 'non_walkable':\n            function_3()\n        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1\n            ] and belief_set['map']['grid'][agent['coordinates'][0]][agent[\n            'coordinates'][1] + 1]['cell_type'] != 'non_walkable':\n            function_4()\n        agent['coordinates'] = [agent['coordinates'][0] + i[0], agent[\n            'coordinates'][1] + i[1]]\n        movement_count += 1\n    if agent['coordinates'] == delivery_cell['cell_coordinates']:\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 25
                                },
                                "mi": {
                                    "mi": 42.84759035428165,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 33,
                                    "sloc": 54,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 893.9188504067322,
                                    "difficulty": 4.445945945945946,
                                    "effort": 3974.314888970471,
                                    "time": 220.79527160947063,
                                    "bugs": 0.2979729501355774
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "3": {
                    "description": "The agent's long term goal is to collect and deliver as many parcels as possible while maintaining a sufficient energy level by collecting batteries when needed.",
                    "intentions": [
                        {
                            "id": 14,
                            "description": "The agent's short term goal is to find and pick up a parcel if there is one in its vicinity. The agent will move towards the parcel, pick it up and increase its score.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_14():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    for parcel in parcels:\n        if parcel['carried_by_id'] is None:\n            parcel_coords = parcel['coordinates']\n            while agent['coordinates'] != parcel_coords:\n                if agent['coordinates'][0] < parcel_coords[0]:\n                    function_2()\n                elif agent['coordinates'][0] > parcel_coords[0]:\n                    function_1()\n                elif agent['coordinates'][1] < parcel_coords[1]:\n                    function_4()\n                elif agent['coordinates'][1] > parcel_coords[1]:\n                    function_3()\n            function_5()\n            break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 58.536440762104476,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 72.0,
                                    "difficulty": 2.0,
                                    "effort": 144.0,
                                    "time": 8.0,
                                    "bugs": 0.024
                                }
                            }
                        },
                        {
                            "id": 15,
                            "description": "The agent's short term goal is to move towards the nearest parcel, if it's reachable, and collect it. If the parcel is not reachable or there is no parcel in its vicinity, the agent will break the loop and stop moving.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    map_grid = belief_set['map']['grid']\n    max_iterations = belief_set['map']['width'] * belief_set['map']['height']\n    iterations = 0\n    while iterations < max_iterations:\n        for parcel in parcels:\n            if parcel['carried_by_id'] is None:\n                parcel_coordinates = parcel['coordinates']\n                for cell in map_grid:\n                    if cell['cell_coordinates'] == parcel_coordinates and cell[\n                        'cell_type'] == 'walkable':\n                        if agent['coordinates'][0] < parcel_coordinates[0]:\n                            function_2()\n                        elif agent['coordinates'][0] > parcel_coordinates[0]:\n                            function_1()\n                        elif agent['coordinates'][1] < parcel_coordinates[1]:\n                            function_4()\n                        elif agent['coordinates'][1] > parcel_coordinates[1]:\n                            function_3()\n                        elif agent['coordinates'] == parcel_coordinates:\n                            function_5()\n                            return\n        iterations += 1\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 12
                                },
                                "mi": {
                                    "mi": 52.187528643853916,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 25,
                                    "sloc": 26,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 174.88731582459263,
                                    "difficulty": 3.8181818181818183,
                                    "effort": 667.751569512081,
                                    "time": 37.09730941733783,
                                    "bugs": 0.05829577194153088
                                }
                            }
                        },
                        {
                            "id": 16,
                            "description": "The agent's short term goal is to move towards the nearest parcel on the map, collect it, and then check if the energy level is sufficient. If not, the agent should move towards the nearest battery and collect it as well.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_16():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    batteries = belief_set['batteries']\n    nearest_parcel = min(parcels, key=lambda x: abs(x['coordinates'][0] -\n        agent['coordinates'][0]) + abs(x['coordinates'][1] - agent[\n        'coordinates'][1]))\n    while agent['coordinates'] != nearest_parcel['coordinates']:\n        if agent['coordinates'][0] < nearest_parcel['coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > nearest_parcel['coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < nearest_parcel['coordinates'][1]:\n            function_4()\n        else:\n            function_3()\n    function_5()\n    if agent['energy'] < 20:\n        nearest_battery = min(batteries, key=lambda x: abs(x['coordinates']\n            [0] - agent['coordinates'][0]) + abs(x['coordinates'][1] -\n            agent['coordinates'][1]))\n        while agent['coordinates'] != nearest_battery['coordinates']:\n            if agent['coordinates'][0] < nearest_battery['coordinates'][0]:\n                function_2()\n            elif agent['coordinates'][0] > nearest_battery['coordinates'][0]:\n                function_1()\n            elif agent['coordinates'][1] < nearest_battery['coordinates'][1]:\n                function_4()\n            else:\n                function_3()\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 49.88545898231533,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 30,
                                    "sloc": 32,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 230.81773576252348,
                                    "difficulty": 2.5,
                                    "effort": 577.0443394063087,
                                    "time": 32.05801885590604,
                                    "bugs": 0.07693924525417449
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "4": {
                    "description": "The agent's long term goal is to collect all the parcels from the spawn point, deliver them to the delivery cell, and ensure that its energy level is maintained by regularly collecting batteries from the batteries spawn point.",
                    "intentions": [
                        {
                            "id": 17,
                            "description": "The short term goal is to navigate the agent to the parcel spawn point and pick up any parcels it finds there.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "three_times_in_wrong_intentions_or_dependency",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                22,
                                23,
                                24
                            ],
                            "function": "def function_17():\n    global belief_set\n    for cell in belief_set['map']['grid']:\n        if cell['cell_type'] == 'parcels_spawn':\n            parcel_spawn_coordinates = cell['cell_coordinates']\n    agent_coordinates = belief_set['agent'][1]['coordinates']\n    while agent_coordinates != parcel_spawn_coordinates:\n        if agent_coordinates[0] < parcel_spawn_coordinates[0]:\n            function_2()\n        elif agent_coordinates[0] > parcel_spawn_coordinates[0]:\n            function_1()\n        elif agent_coordinates[1] < parcel_spawn_coordinates[1]:\n            function_4()\n        elif agent_coordinates[1] > parcel_spawn_coordinates[1]:\n            function_3()\n        agent_coordinates = belief_set['agent'][1]['coordinates']\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 59.07794152479872,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 17,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 72.0,
                                    "difficulty": 2.0,
                                    "effort": 144.0,
                                    "time": 8.0,
                                    "bugs": 0.024
                                }
                            }
                        },
                        {
                            "id": 18,
                            "description": "The short term goal is to deliver the parcels the agent is currently carrying to the delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_18():\n    global belief_set\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell']\n    agent = belief_set['agent'][1]\n    while agent['coordinates'] != delivery_cell[0]['cell_coordinates']:\n        if agent['coordinates'][0] < delivery_cell[0]['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell[0]['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_cell[0]['cell_coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_cell[0]['cell_coordinates'][1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 60.91731429318675,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 72.0,
                                    "difficulty": 2.0,
                                    "effort": 144.0,
                                    "time": 8.0,
                                    "bugs": 0.024
                                }
                            }
                        },
                        {
                            "id": 19,
                            "description": "The short term goal is to navigate the agent to the delivery cell, avoiding any non-walkable cells, and deliver all the parcels it is carrying.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "three_times_in_wrong_intentions_or_dependency",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [
                                22,
                                23,
                                24
                            ],
                            "function": "def function_19():\n    global belief_set\n    MAX_ITERATIONS = 1000\n    iteration = 0\n    delivery_cell = [c['cell_coordinates'] for c in belief_set['map'][\n        'grid'] if c['cell_type'] == 'delivery_cell'][0]\n    while belief_set['agent'][1]['coordinates'\n        ] != delivery_cell and iteration < MAX_ITERATIONS:\n        x_diff = belief_set['agent'][1]['coordinates'][0] - delivery_cell[0]\n        y_diff = belief_set['agent'][1]['coordinates'][1] - delivery_cell[1]\n        if x_diff > 0:\n            function_1()\n        elif x_diff < 0:\n            function_2()\n        if y_diff > 0:\n            function_3()\n        elif y_diff < 0:\n            function_4()\n        iteration += 1\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 56.22808616848578,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 20,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 147.1612434150308,
                                    "difficulty": 5.133333333333334,
                                    "effort": 755.4277161971582,
                                    "time": 41.96820645539768,
                                    "bugs": 0.04905374780501027
                                }
                            }
                        },
                        {
                            "id": 20,
                            "description": "The agent's short term goal is to navigate towards the battery spawn point and pick up any batteries it finds there, to ensure sufficient energy level is maintained for further operations.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_20():\n    global belief_set\n    agent = belief_set['agent'][1]\n    battery_spawn = next(cell for cell in belief_set['map']['grid'] if cell\n        ['cell_type'] == 'batteries_spawn')\n    while agent['coordinates'] != battery_spawn['cell_coordinates']:\n        if agent['coordinates'][0] < battery_spawn['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > battery_spawn['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < battery_spawn['cell_coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > battery_spawn['cell_coordinates'][1]:\n            function_3()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 60.91731429318675,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 72.0,
                                    "difficulty": 2.0,
                                    "effort": 144.0,
                                    "time": 8.0,
                                    "bugs": 0.024
                                }
                            }
                        },
                        {
                            "id": 21,
                            "description": "The short term goal is to navigate the agent to the battery spawn point, pick up any batteries it finds there to maintain its energy level, and to ensure the agent doesn't fall into an infinite loop of actions by including an appropriate exit condition.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "three_times_in_wrong_intentions_or_dependency",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                22,
                                23,
                                24
                            ],
                            "function": "def function_21():\n    global belief_set\n    battery_spawn = [cell['cell_coordinates'] for cell in belief_set['map']\n        ['grid'] if cell['cell_type'] == 'batteries_spawn'][0]\n    agent_pos = belief_set['agent'][1]['coordinates']\n    while True:\n        if agent_pos[0] > battery_spawn[0]:\n            function_1()\n        elif agent_pos[0] < battery_spawn[0]:\n            function_2()\n        elif agent_pos[1] > battery_spawn[1]:\n            function_3()\n        elif agent_pos[1] < battery_spawn[1]:\n            function_4()\n        agent_pos = belief_set['agent'][1]['coordinates']\n        if agent_pos == battery_spawn:\n            function_5()\n            break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 59.015060382957515,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 70.32403072095333,
                                    "difficulty": 1.5,
                                    "effort": 105.48604608143,
                                    "time": 5.860335893412778,
                                    "bugs": 0.02344134357365111
                                }
                            }
                        },
                        {
                            "id": 22,
                            "description": "The short term goal is to navigate the agent to the parcels spawn point, pick up any parcels available there and then navigate to the delivery point to deliver the parcels. If the agent's energy level falls below 50, it will go to the batteries spawn point to recharge.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                17,
                                19,
                                21
                            ],
                            "called_by": [],
                            "function": "def function_22():\n    global belief_set\n    while True:\n        if belief_set['agent'][1]['energy'] < 50:\n            function_21()\n        elif len(belief_set['agent'][1]['parcels_carried_ids']) == 0:\n            function_17()\n        else:\n            function_19()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 4
                                },
                                "mi": {
                                    "mi": 70.30954116963326,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 9,
                                    "sloc": 9,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 15.509775004326936,
                                    "difficulty": 1.0,
                                    "effort": 15.509775004326936,
                                    "time": 0.861654166907052,
                                    "bugs": 0.005169925001442312
                                }
                            }
                        },
                        {
                            "id": 23,
                            "description": "The agent's short term goal is to collect parcels from the spawn point, deliver them to the delivery cell, and if its energy level drops below 50, it should collect batteries from the battery spawn point. The goal also includes a safety mechanism to prevent the agent from getting stuck in an infinite loop by limiting the number of consecutive actions.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                17,
                                19,
                                21
                            ],
                            "called_by": [],
                            "function": "def function_23():\n    global belief_set\n    counter = 0\n    while True:\n        counter += 1\n        if counter > 100:\n            break\n        if belief_set['agent'][1]['energy'] < 50:\n            function_21()\n            continue\n        if len(belief_set['agent'][1]['parcels_carried_ids']) > 0:\n            function_19()\n        else:\n            function_17()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 63.118667122234626,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 39.863137138648355,
                                    "difficulty": 1.7142857142857142,
                                    "effort": 68.33680652339717,
                                    "time": 3.796489251299843,
                                    "bugs": 0.013287712379549451
                                }
                            }
                        },
                        {
                            "id": 24,
                            "description": "The short term goal is to navigate the agent to the parcel spawn point, collect a parcel, head towards the delivery cell to deliver the parcel, and if the energy level drops below 50, navigate to the battery spawn point to collect a battery. The goal also includes avoiding an infinite loop of actions.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                17,
                                19,
                                21
                            ],
                            "called_by": [],
                            "function": "def function_24():\n    global belief_set\n    while True:\n        if belief_set['agent'][1]['energy'] < 50:\n            function_21()\n        elif len(belief_set['agent'][1]['parcels_carried_ids']) == 0:\n            function_17()\n        else:\n            function_19()\n        if belief_set['agent'][1]['score'] == belief_set['agent'][1]['score']:\n            break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 66.58815489908999,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 11,
                                    "sloc": 11,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 27.0,
                                    "difficulty": 1.0,
                                    "effort": 27.0,
                                    "time": 1.5,
                                    "bugs": 0.009
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "8": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "9": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "10": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 8,
                    "intentions": {
                        "11": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "12": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "13": {
                            "n_objectives": 7,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "3": {
                    "n_objectives": 4,
                    "intentions": {
                        "14": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "15": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "16": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "4": {
                    "n_objectives": 4,
                    "intentions": {
                        "17": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "18": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "19": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "20": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "21": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "22": {
                            "n_objectives": 6,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "23": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "24": {
                            "n_objectives": 7,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "7",
            "path": "experiments/7/2024-11-14-10-26-25",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['map'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            belief_set.pop('map', None)\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = event['object']\n        elif event['event_type'] == 'object changed':\n            belief_set['agent'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['agent']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'key':\n        if event['event_type'] == 'object added':\n            if 'keys' not in belief_set:\n                belief_set['keys'] = []\n            belief_set['keys'].append(event['object'])\n        elif event['event_type'] == 'object changed':\n            for key in belief_set['keys']:\n                if key['id'] == event['object']['id']:\n                    key.update(event['object'])\n        elif event['event_type'] == 'object removed':\n            for key in belief_set['keys']:\n                if key['id'] == event['object']['id']:\n                    belief_set['keys'].remove(key)\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.52592946675963,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 15,
                                "sloc": 15,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 84.0,
                                "difficulty": 1.0,
                                "effort": 84.0,
                                "time": 4.666666666666667,
                                "bugs": 0.028
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] == 'door':\n        if 'doors' not in belief_set:\n            belief_set['doors'] = []\n        if event['event_type'] == 'object added':\n            belief_set['doors'].append(event['object'])\n        elif event['event_type'] == 'object changed':\n            for door in belief_set['doors']:\n                if door['id'] == event['object']['id']:\n                    door.update(event['object'])\n        elif event['event_type'] == 'object removed':\n            belief_set['doors'] = [door for door in belief_set['doors'] if \n                door['id'] != event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 60.815845974916826,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 14,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 85.83671966625714,
                                "difficulty": 1.5,
                                "effort": 128.75507949938572,
                                "time": 7.153059972188095,
                                "bugs": 0.02861223988875238
                            }
                        }
                    }
                ],
                "battery": [
                    {
                        "function": "def function_5(event, belief_set):\n    if event['object_type'] != 'battery':\n        return belief_set\n    if event['event_type'] == 'object added':\n        if 'batteries' not in belief_set:\n            belief_set['batteries'] = []\n        belief_set['batteries'].append(event['object'])\n    elif event['event_type'] == 'object changed':\n        for battery in belief_set['batteries']:\n            if battery['id'] == event['object']['id']:\n                battery['coordinates'] = event['object']['coordinates']\n    elif event['event_type'] == 'object removed':\n        belief_set['batteries'] = [battery for battery in belief_set[\n            'batteries'] if battery['id'] != event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 60.11377044925,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 14,
                                "sloc": 15,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 85.83671966625714,
                                "difficulty": 1.5,
                                "effort": 128.75507949938572,
                                "time": 7.153059972188095,
                                "bugs": 0.02861223988875238
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_6(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcels' in belief_set:\n                belief_set['parcels'].append(event['object'])\n            else:\n                belief_set['parcels'] = [event['object']]\n        elif event['event_type'] == 'object changed':\n            parcels = belief_set.get('parcels', [])\n            for i, parcel in enumerate(parcels):\n                if parcel['id'] == event['object']['id']:\n                    parcels[i] = event['object']\n                    break\n        elif event['event_type'] == 'object removed':\n            parcels = belief_set.get('parcels', [])\n            parcels = [parcel for parcel in parcels if parcel['id'] !=\n                event['object']['id']]\n            belief_set['parcels'] = parcels\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 57.732896918167725,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 18,
                                "sloc": 19,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 85.83671966625714,
                                "difficulty": 1.5,
                                "effort": 128.75507949938572,
                                "time": 7.153059972188095,
                                "bugs": 0.02861223988875238
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long term goal is to efficiently manage its energy by collecting batteries, while picking up and delivering parcels to increase its score.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The agent's short term goal is to move towards the nearest parcel on the map and pick it up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    agent_coordinates = belief_set['agent']['coordinates']\n    nearest_parcel_coordinates = min(belief_set['parcels'], key=lambda p: \n        abs(p['coordinates'][0] - agent_coordinates[0]) + abs(p[\n        'coordinates'][1] - agent_coordinates[1]))['coordinates']\n    while agent_coordinates[0] != nearest_parcel_coordinates[0]:\n        if agent_coordinates[0] < nearest_parcel_coordinates[0]:\n            function_2()\n        else:\n            function_1()\n    while agent_coordinates[1] != nearest_parcel_coordinates[1]:\n        if agent_coordinates[1] < nearest_parcel_coordinates[1]:\n            function_4()\n        else:\n            function_3()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 59.4605123751815,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 16,
                                    "sloc": 17,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 87.56842503028855,
                                    "difficulty": 2.0,
                                    "effort": 175.1368500605771,
                                    "time": 9.729825003365395,
                                    "bugs": 0.029189475010096184
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The agent's short term goal is to find the nearest parcel and move to its location. Once the agent is at the parcel's location, it will pick up the parcel. If the agent cannot reach the parcel because of an obstacle, it will move to the next nearest parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    parcels = belief_set['parcels']\n    agent = belief_set['agent']\n    map_width = belief_set['map']['width']\n    map_height = belief_set['map']['height']\n    parcel_distances = [(abs(parcel['coordinates'][0] - agent['coordinates'\n        ][0]) + abs(parcel['coordinates'][1] - agent['coordinates'][1]),\n        parcel) for parcel in parcels if parcel['carried_by_id'] is None]\n    parcel_distances.sort(key=lambda x: x[0])\n    for distance, parcel in parcel_distances:\n        dx = parcel['coordinates'][0] - agent['coordinates'][0]\n        dy = parcel['coordinates'][1] - agent['coordinates'][1]\n        while dx != 0 and 0 <= agent['coordinates'][0] + dx < map_width:\n            if dx > 0:\n                function_2()\n                dx -= 1\n            else:\n                function_1()\n                dx += 1\n        while dy != 0 and 0 <= agent['coordinates'][1] + dy < map_height:\n            if dy > 0:\n                function_4()\n                dy -= 1\n            else:\n                function_3()\n                dy += 1\n        if dx == 0 and dy == 0:\n            function_5()\n            return\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 12
                                },
                                "mi": {
                                    "mi": 48.419268318163944,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 29,
                                    "sloc": 30,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 380.29009569091335,
                                    "difficulty": 7.714285714285714,
                                    "effort": 2933.6664524727603,
                                    "time": 162.98146958182002,
                                    "bugs": 0.12676336523030446
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short term goal of the agent is to deliver the parcels it is carrying to the delivery cell. This involves moving to the delivery cell and dropping the parcels at that location.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    agent_coordinates = belief_set['agent']['coordinates']\n    delivery_cell_coordinates = [cell['cell_coordinates'] for cell in\n        belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    while agent_coordinates != delivery_cell_coordinates:\n        if agent_coordinates[0] < delivery_cell_coordinates[0]:\n            function_2()\n        elif agent_coordinates[0] > delivery_cell_coordinates[0]:\n            function_1()\n        elif agent_coordinates[1] < delivery_cell_coordinates[1]:\n            function_4()\n        else:\n            function_3()\n        agent_coordinates = belief_set['agent']['coordinates']\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 61.102728214471206,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 16,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 57.110323830864054,
                                    "difficulty": 2.0,
                                    "effort": 114.22064766172811,
                                    "time": 6.345591536762672,
                                    "bugs": 0.019036774610288017
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "2": {
                    "description": "The agent's long term goal is to collect all available keys in the environment to unlock the doors, while maintaining its energy by collecting batteries when needed.",
                    "intentions": [
                        {
                            "id": 10,
                            "description": "The agent's short term goal is to move to the cell containing the key and pick it up. If the agent's energy level is low, it should first move to the cell containing the battery, pick up the battery to recharge its energy, and then proceed to the cell with the key.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    agent = belief_set['agent']\n    keys = belief_set['keys']\n    batteries = belief_set['batteries']\n    if agent['energy'] < 20:\n        for battery in batteries:\n            while agent['coordinates'] != battery['coordinates']:\n                if agent['coordinates'][0] < battery['coordinates'][0]:\n                    function_2()\n                elif agent['coordinates'][0] > battery['coordinates'][0]:\n                    function_1()\n                if agent['coordinates'][1] < battery['coordinates'][1]:\n                    function_4()\n                elif agent['coordinates'][1] > battery['coordinates'][1]:\n                    function_3()\n        function_5()\n    for key in keys:\n        while agent['coordinates'] != key['coordinates']:\n            if agent['coordinates'][0] < key['coordinates'][0]:\n                function_2()\n            elif agent['coordinates'][0] > key['coordinates'][0]:\n                function_1()\n            if agent['coordinates'][1] < key['coordinates'][1]:\n                function_4()\n            elif agent['coordinates'][1] > key['coordinates'][1]:\n                function_3()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 14
                                },
                                "mi": {
                                    "mi": 51.246557376548935,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 28,
                                    "sloc": 28,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 153.24725426256592,
                                    "difficulty": 1.5,
                                    "effort": 229.8708813938489,
                                    "time": 12.770604521880493,
                                    "bugs": 0.05108241808752197
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to move to the cell with the key, pick it up if the agent's energy level is above a certain threshold, and move to the cell with the battery to recharge if the energy level is lower than the threshold.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    key_coord = belief_set['keys'][0]['coordinates']\n    bat_coord = belief_set['batteries'][0]['coordinates']\n    agent_coord = belief_set['agent']['coordinates']\n    while belief_set['agent']['energy'] > 30:\n        if agent_coord[0] < key_coord[0]:\n            function_2()\n        elif agent_coord[0] > key_coord[0]:\n            function_1()\n        elif agent_coord[1] < key_coord[1]:\n            function_4()\n        elif agent_coord[1] > key_coord[1]:\n            function_3()\n        if agent_coord == key_coord:\n            function_5()\n            break\n    while belief_set['agent']['energy'] <= 30:\n        if agent_coord[0] < bat_coord[0]:\n            function_2()\n        elif agent_coord[0] > bat_coord[0]:\n            function_1()\n        elif agent_coord[1] < bat_coord[1]:\n            function_4()\n        elif agent_coord[1] > bat_coord[1]:\n            function_3()\n        if agent_coord == bat_coord:\n            function_5()\n            break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 50.74719155263948,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 29,
                                    "sloc": 29,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 169.21582985307933,
                                    "difficulty": 2.1818181818181817,
                                    "effort": 369.1981742249003,
                                    "time": 20.511009679161127,
                                    "bugs": 0.05640527661769311
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The agent's short term goal is to move towards the battery cell to recharge its energy, if the energy level is low. If the energy level is sufficient, the agent should move towards the cell with the key to collect it.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    agent = belief_set['agent']\n    batteries = belief_set['batteries']\n    keys = belief_set['keys']\n    if agent['energy'] < 50:\n        if batteries[0]['coordinates'][0] > agent['coordinates'][0]:\n            function_2()\n        elif batteries[0]['coordinates'][0] < agent['coordinates'][0]:\n            function_1()\n        elif batteries[0]['coordinates'][1] > agent['coordinates'][1]:\n            function_4()\n        elif batteries[0]['coordinates'][1] < agent['coordinates'][1]:\n            function_3()\n        function_5()\n    else:\n        if keys[0]['coordinates'][0] > agent['coordinates'][0]:\n            function_2()\n        elif keys[0]['coordinates'][0] < agent['coordinates'][0]:\n            function_1()\n        elif keys[0]['coordinates'][1] > agent['coordinates'][1]:\n            function_4()\n        elif keys[0]['coordinates'][1] < agent['coordinates'][1]:\n            function_3()\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 53.68690731285978,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 25,
                                    "sloc": 25,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 116.69205856195879,
                                    "difficulty": 1.0,
                                    "effort": 116.69205856195879,
                                    "time": 6.4828921423310435,
                                    "bugs": 0.03889735285398626
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "3": {
                    "description": "The agent's long term goal is to collect as many parcels as possible, recharge its energy as needed, and deliver the parcels to the delivery cell, all while managing its energy and avoiding non-walkable areas.",
                    "intentions": [
                        {
                            "id": 13,
                            "description": "The short term goal is to move the agent towards the parcel spawn location, pick up any parcels present there and recharge its energy if it's below a certain threshold.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    parcel_spawn_location = [cell['cell_coordinates'] for cell in\n        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]\n    agent_location = belief_set['agent']['coordinates']\n    while agent_location != parcel_spawn_location:\n        if agent_location[0] < parcel_spawn_location[0]:\n            function_2()\n        elif agent_location[0] > parcel_spawn_location[0]:\n            function_1()\n        elif agent_location[1] < parcel_spawn_location[1]:\n            function_4()\n        else:\n            function_3()\n        agent_location = belief_set['agent']['coordinates']\n    function_5()\n    if belief_set['agent']['energy'] < 30:\n        battery_spawn_location = [cell['cell_coordinates'] for cell in\n            belief_set['map']['grid'] if cell['cell_type'] == 'batteries_spawn'\n            ][0]\n        while agent_location != battery_spawn_location:\n            if agent_location[0] < battery_spawn_location[0]:\n                function_2()\n            elif agent_location[0] > battery_spawn_location[0]:\n                function_1()\n            elif agent_location[1] < battery_spawn_location[1]:\n                function_4()\n            else:\n                function_3()\n            agent_location = belief_set['agent']['coordinates']\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 14
                                },
                                "mi": {
                                    "mi": 51.246557376548935,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 28,
                                    "sloc": 31,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 153.24725426256592,
                                    "difficulty": 2.0952380952380953,
                                    "effort": 321.0894851215667,
                                    "time": 17.838304728975928,
                                    "bugs": 0.05108241808752197
                                }
                            }
                        },
                        {
                            "id": 14,
                            "description": "The agent's short term goal is to move one cell upwards in order to eventually reach the delivery cell, provided that the next cell upwards is walkable.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1
                            ],
                            "called_by": [],
                            "function": "def function_14():\n    global belief_set\n    agent_coordinates = belief_set['agent']['coordinates']\n    next_cell_coordinates = [agent_coordinates[0] - 1, agent_coordinates[1]]\n    next_cell = next((cell for cell in belief_set['map']['grid'] if cell[\n        'cell_coordinates'] == next_cell_coordinates), None)\n    if next_cell and next_cell['cell_type'] == 'walkable':\n        function_1()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 69.56198750185877,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 7,
                                    "sloc": 8,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 41.51317942364757,
                                    "difficulty": 1.5,
                                    "effort": 62.26976913547136,
                                    "time": 3.4594316186372978,
                                    "bugs": 0.01383772647454919
                                }
                            }
                        },
                        {
                            "id": 15,
                            "description": "The agent's short term goal is to deliver all the parcels it is currently carrying to the delivery cell. The agent will move towards the delivery cell while avoiding non-walkable cells and deliver the parcels.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    agent_coordinates = belief_set['agent']['coordinates']\n    if agent_coordinates[0] < delivery_cell[0]:\n        function_2()\n    elif agent_coordinates[0] > delivery_cell[0]:\n        function_1()\n    elif agent_coordinates[1] < delivery_cell[1]:\n        function_4()\n    elif agent_coordinates[1] > delivery_cell[1]:\n        function_3()\n    else:\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 61.8429600039687,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "4": {
                    "description": "The agent's long term goal is to gather all the parcels and deliver them to the designated delivery cell while maintaining sufficient energy levels by collecting batteries, and using keys to unlock doors if necessary.",
                    "intentions": [
                        {
                            "id": 16,
                            "description": "The short term goal is to deliver the parcels that the agent is currently carrying to the designated delivery cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_16():\n    global belief_set\n    agent = belief_set['agent']\n    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell\n        ['cell_type'] == 'delivery_cell')\n    while agent['coordinates'] != delivery_cell['cell_coordinates']:\n        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 60.91731429318675,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 72.0,
                                    "difficulty": 2.0,
                                    "effort": 144.0,
                                    "time": 8.0,
                                    "bugs": 0.024
                                }
                            }
                        },
                        {
                            "id": 17,
                            "description": "The agent's short term goal is to move to the delivery cell and deliver all the parcels it is carrying. If the delivery cell is not reachable, the agent should stay in its current location.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_17():\n    global belief_set\n    agent_x, agent_y = belief_set['agent']['coordinates']\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    delivery_x, delivery_y = delivery_cell\n    max_steps = belief_set['map']['width'] * belief_set['map']['height']\n    steps = 0\n    while (agent_x, agent_y) != (delivery_x, delivery_y) and steps < max_steps:\n        if agent_x > delivery_x:\n            function_1()\n            agent_x -= 1\n        elif agent_x < delivery_x:\n            function_2()\n            agent_x += 1\n        if agent_y > delivery_y:\n            function_3()\n            agent_y -= 1\n        elif agent_y < delivery_y:\n            function_4()\n            agent_y += 1\n        steps += 1\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 53.550217345476206,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 22,
                                    "sloc": 23,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 189.98960215439456,
                                    "difficulty": 7.466666666666667,
                                    "effort": 1418.5890294194794,
                                    "time": 78.81050163441552,
                                    "bugs": 0.06332986738479819
                                }
                            }
                        },
                        {
                            "id": 18,
                            "description": "The short term goal is to move towards the nearest parcel, pick it up and then move to the delivery cell to deliver the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_18():\n    global belief_set\n    agent_coords = belief_set['agent']['coordinates']\n    parcels = belief_set['parcels']\n    for parcel in parcels:\n        parcel_coords = parcel['coordinates']\n        if parcel_coords[0] < agent_coords[0]:\n            function_1()\n        elif parcel_coords[0] > agent_coords[0]:\n            function_2()\n        elif parcel_coords[1] < agent_coords[1]:\n            function_3()\n        elif parcel_coords[1] > agent_coords[1]:\n            function_4()\n    function_5()\n    delivery_cell_coords = [coord['cell_coordinates'] for coord in\n        belief_set['map']['grid'] if coord['cell_type'] == 'delivery_cell'][0]\n    if delivery_cell_coords[0] < agent_coords[0]:\n        function_1()\n    elif delivery_cell_coords[0] > agent_coords[0]:\n        function_2()\n    elif delivery_cell_coords[1] < agent_coords[1]:\n        function_3()\n    elif delivery_cell_coords[1] > agent_coords[1]:\n        function_4()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 12
                                },
                                "mi": {
                                    "mi": 53.368774073857345,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 25,
                                    "sloc": 26,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 118.59257041502654,
                                    "difficulty": 1.5,
                                    "effort": 177.8888556225398,
                                    "time": 9.882714201252211,
                                    "bugs": 0.03953085680500885
                                }
                            }
                        },
                        {
                            "id": 19,
                            "description": "The agent's short term goal is to move towards the parcel spawn cell, pick up any parcels at its current location and then move towards the delivery cell to deliver the parcels.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_19():\n    global belief_set\n    parcel_spawn_cell = [cell['cell_coordinates'] for cell in belief_set[\n        'map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]\n    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']\n        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    agent_coordinates = belief_set['agent']['coordinates']\n    while agent_coordinates != parcel_spawn_cell:\n        if agent_coordinates[0] < parcel_spawn_cell[0]:\n            function_2()\n        elif agent_coordinates[0] > parcel_spawn_cell[0]:\n            function_1()\n        elif agent_coordinates[1] < parcel_spawn_cell[1]:\n            function_4()\n        elif agent_coordinates[1] > parcel_spawn_cell[1]:\n            function_3()\n        agent_coordinates = belief_set['agent']['coordinates']\n    function_5()\n    while agent_coordinates != delivery_cell:\n        if agent_coordinates[0] < delivery_cell[0]:\n            function_2()\n        elif agent_coordinates[0] > delivery_cell[0]:\n            function_1()\n        elif agent_coordinates[1] < delivery_cell[1]:\n            function_4()\n        elif agent_coordinates[1] > delivery_cell[1]:\n            function_3()\n        agent_coordinates = belief_set['agent']['coordinates']\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 15
                                },
                                "mi": {
                                    "mi": 51.15516536346449,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 27,
                                    "sloc": 29,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 169.21582985307933,
                                    "difficulty": 2.1818181818181817,
                                    "effort": 369.1981742249003,
                                    "time": 20.511009679161127,
                                    "bugs": 0.05640527661769311
                                }
                            }
                        },
                        {
                            "id": 20,
                            "description": "The short term goal is to move the agent towards the parcels spawn cell, pick up any parcels at its current location, then move towards the delivery cell and deliver the parcels if the path is clear and reachable. If the path is not clear, the agent will stay at its current location.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_20():\n    global belief_set\n    parcel_spawn_cell = next(cell for cell in belief_set['map']['grid'] if \n        cell['cell_type'] == 'parcels_spawn')['cell_coordinates']\n    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell\n        ['cell_type'] == 'delivery_cell')['cell_coordinates']\n    agent_coords = belief_set['agent']['coordinates']\n    for i in range(30):\n        if agent_coords[0] < parcel_spawn_cell[0]:\n            function_2()\n            agent_coords = belief_set['agent']['coordinates']\n        elif agent_coords[0] > parcel_spawn_cell[0]:\n            function_1()\n            agent_coords = belief_set['agent']['coordinates']\n        elif agent_coords[1] < parcel_spawn_cell[1]:\n            function_4()\n            agent_coords = belief_set['agent']['coordinates']\n        elif agent_coords[1] > parcel_spawn_cell[1]:\n            function_3()\n            agent_coords = belief_set['agent']['coordinates']\n        function_5()\n        if agent_coords[0] < delivery_cell[0]:\n            function_2()\n            agent_coords = belief_set['agent']['coordinates']\n        elif agent_coords[0] > delivery_cell[0]:\n            function_1()\n            agent_coords = belief_set['agent']['coordinates']\n        elif agent_coords[1] < delivery_cell[1]:\n            function_4()\n            agent_coords = belief_set['agent']['coordinates']\n        elif agent_coords[1] > delivery_cell[1]:\n            function_3()\n            agent_coords = belief_set['agent']['coordinates']\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 14
                                },
                                "mi": {
                                    "mi": 50.35116573698467,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 32,
                                    "sloc": 34,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 135.7068586817104,
                                    "difficulty": 1.5,
                                    "effort": 203.5602880225656,
                                    "time": 11.308904890142534,
                                    "bugs": 0.04523561956057014
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "8": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "9": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 4,
                    "intentions": {
                        "10": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "11": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "12": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": true
                        }
                    }
                },
                "3": {
                    "n_objectives": 5,
                    "intentions": {
                        "13": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "14": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "15": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        }
                    }
                },
                "4": {
                    "n_objectives": 4,
                    "intentions": {
                        "16": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "17": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "18": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "19": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "20": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        }
    ],
    "experiments/8": [
        {
            "typology": "8",
            "path": "experiments/8/2024-11-08-10-51-41",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['event_type'] == 'object added' or event['event_type'\n        ] == 'object changed':\n        if 'map' in belief_set:\n            belief_set['map'].update(event['object'])\n        else:\n            belief_set['map'] = event['object']\n    elif event['event_type'] == 'object removed':\n        if 'map' in belief_set:\n            del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 6
                            },
                            "mi": {
                                "mi": 64.61066651738103,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 11,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 66.60791492653966,
                                "difficulty": 1.8,
                                "effort": 119.8942468677714,
                                "time": 6.660791492653967,
                                "bugs": 0.022202638308846556
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] != 'agent':\n        return belief_set\n    if event['event_type'] == 'object added':\n        belief_set['agent'] = {event['object']['id']: event['object']}\n    elif event['event_type'] == 'object changed':\n        belief_set['agent'][event['object']['id']] = event['object']\n    elif event['event_type'] == 'object removed':\n        del belief_set['agent'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 65.40336029207882,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 11,
                                "sloc": 10,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 39.863137138648355,
                                "difficulty": 1.0,
                                "effort": 39.863137138648355,
                                "time": 2.2146187299249087,
                                "bugs": 0.013287712379549451
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcels' not in belief_set:\n                belief_set['parcels'] = {}\n            belief_set['parcels'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                belief_set['parcels'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                del belief_set['parcels'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.17653230125827,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ],
                "battery": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] == 'battery':\n        if event['event_type'] == 'object added':\n            if 'batteries' not in belief_set:\n                belief_set['batteries'] = {}\n            belief_set['batteries'][event['object']['id']] = {'coordinates':\n                event['object']['coordinates']}\n        elif event['event_type'] == 'object changed':\n            if 'batteries' in belief_set and event['object']['id'\n                ] in belief_set['batteries']:\n                belief_set['batteries'][event['object']['id']]['coordinates'\n                    ] = event['object']['coordinates']\n        elif event['event_type'] == 'object removed':\n            if 'batteries' in belief_set and event['object']['id'\n                ] in belief_set['batteries']:\n                del belief_set['batteries'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 58.47445677559144,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 14,
                                "sloc": 17,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_5(event, belief_set):\n    if event['object_type'] == 'key':\n        if event['event_type'] == 'object added':\n            belief_set['keys'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            belief_set['keys'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object removed':\n            del belief_set['keys'][event['object']['id']]\n    return belief_set",
                        "error_event": "{'event_type': 'object removed', 'object_type': 'key', 'object': {'id': 1, 'coordinates': [3, 2], 'carried_by_id': 1}}",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.44872847079279,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    },
                    {
                        "function": "def function_7(event, belief_set):\n    if event['object_type'] != 'key':\n        return belief_set\n    key_id = event['object']['id']\n    if event['event_type'] == 'object added':\n        belief_set['keys'][key_id] = event['object']\n    elif event['event_type'] == 'object changed':\n        belief_set['keys'][key_id].update(event['object'])\n    elif event['event_type'] == 'object removed':\n        if key_id in belief_set['keys']:\n            del belief_set['keys'][key_id]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 6
                            },
                            "mi": {
                                "mi": 63.437837789466705,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 12,
                                "sloc": 12,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 55.506595772116384,
                                "difficulty": 1.5,
                                "effort": 83.25989365817458,
                                "time": 4.625549647676365,
                                "bugs": 0.01850219859070546
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_6(event, belief_set):\n    if event['object_type'] == 'door':\n        if event['event_type'] == 'object added':\n            if 'doors' not in belief_set:\n                belief_set['doors'] = {}\n            belief_set['doors'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'doors' in belief_set and event['object']['id'] in belief_set[\n                'doors']:\n                belief_set['doors'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'doors' in belief_set and event['object']['id'] in belief_set[\n                'doors']:\n                del belief_set['doors'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.17653230125827,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent should aim to optimize its path in order to collect and deliver as many parcels as possible, while also managing its energy levels efficiently.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The agent should move towards the nearest parcel, pick it up and deliver it to a specified location",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_7():\n    global belief_set\n    agent_coords = belief_set['agent'][1]['coordinates']\n    parcel_coords = belief_set['parcels'][1]['coordinates']\n    while agent_coords[0] < parcel_coords[0]:\n        function_2()\n        agent_coords[0] += 1\n    while agent_coords[1] < parcel_coords[1]:\n        function_4()\n        agent_coords[1] += 1\n    function_5()\n    while agent_coords[0] > 0:\n        function_1()\n        agent_coords[0] -= 1\n    while agent_coords[1] > 0:\n        function_3()\n        agent_coords[1] -= 1\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 58.06512685757274,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 96.0,
                                    "difficulty": 2.6666666666666665,
                                    "effort": 256.0,
                                    "time": 14.222222222222221,
                                    "bugs": 0.032
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The agent should aim to move towards the parcels, pick them up, and then move towards the delivery point",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    map = belief_set['map']['grid']\n    delivery_point = [cell for cell in map if cell['cell_type'] ==\n        'parcels_spawn'][0]['cell_coordinates']\n    for parcel_id, parcel in parcels.items():\n        if parcel['carried_by_id'] is None:\n            if agent['coordinates'] == parcel['coordinates']:\n                function_5()\n            elif agent['coordinates'][0] < parcel['coordinates'][0]:\n                function_2()\n            elif agent['coordinates'][0] > parcel['coordinates'][0]:\n                function_1()\n            elif agent['coordinates'][1] < parcel['coordinates'][1]:\n                function_4()\n            else:\n                function_3()\n        elif parcel['carried_by_id'] == agent['id']:\n            if agent['coordinates'] == delivery_point:\n                function_6()\n            elif agent['coordinates'][0] < delivery_point[0]:\n                function_2()\n            elif agent['coordinates'][0] > delivery_point[0]:\n                function_1()\n            elif agent['coordinates'][1] < delivery_point[1]:\n                function_4()\n            else:\n                function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 14
                                },
                                "mi": {
                                    "mi": 50.877284628865254,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 29,
                                    "sloc": 30,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 155.11451069865606,
                                    "difficulty": 2.0,
                                    "effort": 310.2290213973121,
                                    "time": 17.234945633184008,
                                    "bugs": 0.05170483689955202
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The agent's short term goal is to move towards the parcel spawn location, ensuring it doesn't run out of energy.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    parcel_spawn_location = None\n    for cell in belief_set['map']['grid']:\n        if cell['cell_type'] == 'parcels_spawn':\n            parcel_spawn_location = cell['cell_coordinates']\n            break\n    if parcel_spawn_location is not None:\n        agent_location = belief_set['agent'][1]['coordinates']\n        if agent_location[0] < parcel_spawn_location[0]:\n            function_2()\n        elif agent_location[0] > parcel_spawn_location[0]:\n            function_1()\n        elif agent_location[1] < parcel_spawn_location[1]:\n            function_4()\n        elif agent_location[1] > parcel_spawn_location[1]:\n            function_3()\n        if belief_set['agent'][1]['energy'] < 20:\n            belief_set['agent'][1]['energy'] += 20\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 56.77950888349237,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 19,
                                    "sloc": 19,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 103.72627427729671,
                                    "difficulty": 2.6666666666666665,
                                    "effort": 276.6033980727912,
                                    "time": 15.366855448488401,
                                    "bugs": 0.0345754247590989
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "2": {
                    "description": "The agent's long term goal is to optimize its path and energy usage in order to deliver all the carried parcels to the designated delivery cells within the environment.",
                    "intentions": [
                        {
                            "id": 10,
                            "description": "The short term goal is to move the agent towards the delivery cell while preserving energy.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    agent = belief_set['agent'][1]\n    delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map'\n        ]['grid'] if cell['cell_type'] == 'delivery_cell']\n    for cell in delivery_cells:\n        if agent['coordinates'][0] > cell[0]:\n            function_1()\n        elif agent['coordinates'][0] < cell[0]:\n            function_2()\n        elif agent['coordinates'][1] > cell[1]:\n            function_3()\n        elif agent['coordinates'][1] < cell[1]:\n            function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 62.41053260565893,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 13,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The short term goal is to move the agent one step closer to the delivery cell while preserving energy.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [
                                26
                            ],
                            "function": "def function_11():\n    global belief_set\n    agent = belief_set['agent'][1]\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]\n    if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n        function_1()\n    elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n        function_2()\n    elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:\n        function_3()\n    elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n        function_4()\n    else:\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 61.8429600039687,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 12,
                            "description": "The short term goal is to move the agent to a cell that is one step closer to the nearest delivery cell, if such a cell is walkable and the agent has enough energy to make the move.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map'\n        ]['grid'] if cell['cell_type'] == 'delivery_cell']\n    agent_position = belief_set['agent'][1]['coordinates']\n    agent_energy = belief_set['agent'][1]['energy']\n    if agent_energy >= 5:\n        for cell in delivery_cells:\n            if cell[0] < agent_position[0] and belief_set['map']['grid'][\n                agent_position[0] - 1][agent_position[1]]['cell_type'\n                ] == 'walkable':\n                function_1()\n                break\n            elif cell[0] > agent_position[0] and belief_set['map']['grid'][\n                agent_position[0] + 1][agent_position[1]]['cell_type'\n                ] == 'walkable':\n                function_2()\n                break\n            elif cell[1] < agent_position[1] and belief_set['map']['grid'][\n                agent_position[0]][agent_position[1] - 1]['cell_type'\n                ] == 'walkable':\n                function_3()\n                break\n            elif cell[1] > agent_position[1] and belief_set['map']['grid'][\n                agent_position[0]][agent_position[1] + 1]['cell_type'\n                ] == 'walkable':\n                function_4()\n                break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 53.207544946890216,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 19,
                                    "sloc": 28,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 281.3104817439633,
                                    "difficulty": 4.2,
                                    "effort": 1181.504023324646,
                                    "time": 65.63911240692477,
                                    "bugs": 0.0937701605813211
                                }
                            }
                        },
                        {
                            "id": 13,
                            "description": "The short term goal is to move the agent one step closer to the nearest delivery cell, if such a cell is walkable and the agent has enough energy to make the move.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [
                                14,
                                23,
                                30,
                                31,
                                33
                            ],
                            "function": "def function_13():\n    global belief_set\n    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell']\n    delivery_cells.sort(key=lambda x: abs(x['cell_coordinates'][0] -\n        belief_set['agent'][1]['coordinates'][0]) + abs(x[\n        'cell_coordinates'][1] - belief_set['agent'][1]['coordinates'][1]))\n    for cell in delivery_cells:\n        dx = cell['cell_coordinates'][0] - belief_set['agent'][1]['coordinates'\n            ][0]\n        dy = cell['cell_coordinates'][1] - belief_set['agent'][1]['coordinates'\n            ][1]\n        if dx < 0 and belief_set['agent'][1]['energy'] >= 5:\n            function_1()\n            break\n        elif dx > 0 and belief_set['agent'][1]['energy'] >= 5:\n            function_2()\n            break\n        elif dy < 0 and belief_set['agent'][1]['energy'] >= 5:\n            function_3()\n            break\n        elif dy > 0 and belief_set['agent'][1]['energy'] >= 5:\n            function_4()\n            break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 12
                                },
                                "mi": {
                                    "mi": 52.903273401042654,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 20,
                                    "sloc": 24,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 276.9812829150282,
                                    "difficulty": 4.5,
                                    "effort": 1246.415773117627,
                                    "time": 69.24532072875705,
                                    "bugs": 0.0923270943050094
                                }
                            }
                        },
                        {
                            "id": 14,
                            "description": "The short term goal is to move the agent towards the nearest delivery cell while preserving energy. If the agent is already at a delivery cell, it should drop all the parcels it's carrying.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6,
                                13
                            ],
                            "called_by": [
                                23,
                                30,
                                33
                            ],
                            "function": "def function_14():\n    global belief_set\n    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell']\n    agent = belief_set['agent'][1]\n    if agent['coordinates'] in [cell['cell_coordinates'] for cell in\n        delivery_cells]:\n        function_6()\n    else:\n        function_13()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 71.29087753082239,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 8,
                                    "sloc": 10,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 15.509775004326936,
                                    "difficulty": 1.0,
                                    "effort": 15.509775004326936,
                                    "time": 0.861654166907052,
                                    "bugs": 0.005169925001442312
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        false
                    ],
                    "error": false,
                    "trigger_function": "def function_dtf_1(belief_set):\n    agent = belief_set['agent'][1]\n    if agent['parcels_carried_ids'] and agent['energy'] > 0:\n        return True\n    else:\n        return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 3
                        },
                        "mi": {
                            "mi": 74.28529248621352,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 6,
                            "sloc": 6,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 15.509775004326936,
                            "difficulty": 1.0,
                            "effort": 15.509775004326936,
                            "time": 0.861654166907052,
                            "bugs": 0.005169925001442312
                        }
                    }
                },
                "3": {
                    "description": "The agent's long term goal is to strategically locate batteries and plan its route such that it always maintains a high energy level, ensuring its ability to continuously operate and respond to new tasks in the environment.",
                    "intentions": [
                        {
                            "id": 15,
                            "description": "The agent's short term goal is to move towards the battery spawn location in order to recharge its energy levels.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    agent_coordinates = belief_set['agent'][1]['coordinates']\n    battery_spawn_coordinates = [cell['cell_coordinates'] for cell in\n        belief_set['map']['grid'] if cell['cell_type'] == 'batteries_spawn'][0]\n    x_diff = battery_spawn_coordinates[0] - agent_coordinates[0]\n    y_diff = battery_spawn_coordinates[1] - agent_coordinates[1]\n    if x_diff > 0:\n        function_2()\n    elif x_diff < 0:\n        function_1()\n    elif y_diff > 0:\n        function_4()\n    elif y_diff < 0:\n        function_3()\n    if agent_coordinates == battery_spawn_coordinates:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 58.84907915294404,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 16,
                                    "sloc": 17,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 93.76537429460444,
                                    "difficulty": 2.909090909090909,
                                    "effort": 272.7719979479402,
                                    "time": 15.153999885996676,
                                    "bugs": 0.03125512476486815
                                }
                            }
                        },
                        {
                            "id": 16,
                            "description": "The short term goal is to move the agent to the nearest battery cell to recharge its energy level.",
                            "executable_at_desire_end": true,
                            "executable": false,
                            "invalidation_reason": "three_times_in_wrong_intentions_or_dependency",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                22,
                                23,
                                26,
                                28,
                                29,
                                30,
                                31
                            ],
                            "function": "def function_16():\n    global belief_set\n    agent = belief_set['agent'][1]\n    battery_location = belief_set['batteries'][1]['coordinates']\n    while agent['coordinates'] != battery_location:\n        if agent['coordinates'][0] < battery_location[0]:\n            function_2()\n            agent['coordinates'][0] += 1\n        elif agent['coordinates'][0] > battery_location[0]:\n            function_1()\n            agent['coordinates'][0] -= 1\n        if agent['coordinates'][1] < battery_location[1]:\n            function_4()\n            agent['coordinates'][1] += 1\n        elif agent['coordinates'][1] > battery_location[1]:\n            function_3()\n            agent['coordinates'][1] -= 1\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 57.33706280113289,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 116.69205856195879,
                                    "difficulty": 3.0,
                                    "effort": 350.07617568587636,
                                    "time": 19.44867642699313,
                                    "bugs": 0.03889735285398626
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "4": {
                    "description": "The agent's long term goal is to strategically explore the environment to locate and acquire keys, which can be used to unlock special cells or items that enhance its performance and overall score.",
                    "intentions": [
                        {
                            "id": 17,
                            "description": "The short term goal is to move the agent towards the nearest key, pick it up if it's in the same cell, and if the agent already has a key, to keep it.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_17():\n    global belief_set\n    agent_coords = belief_set['agent'][1]['coordinates']\n    key_coords = belief_set['keys'][1]['coordinates']\n    has_key = belief_set['agent'][1]['has_key']\n    if not has_key:\n        if agent_coords[0] > key_coords[0]:\n            function_1()\n        elif agent_coords[0] < key_coords[0]:\n            function_2()\n        elif agent_coords[1] > key_coords[1]:\n            function_3()\n        elif agent_coords[1] < key_coords[1]:\n            function_4()\n        if agent_coords == key_coords:\n            function_5()\n    else:\n        pass\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 58.91638052784671,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 66.41714012534482,
                                    "difficulty": 2.0,
                                    "effort": 132.83428025068963,
                                    "time": 7.379682236149424,
                                    "bugs": 0.02213904670844827
                                }
                            }
                        },
                        {
                            "id": 18,
                            "description": "The short term goal is to guide the agent to move towards the nearest key while maintaining its energy. If the agent is already at a key, it should pick it up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_18():\n    global belief_set\n    agent = belief_set['agent'][1]\n    key = belief_set['keys'][1]\n    if agent['coordinates'] == key['coordinates']:\n        function_5()\n    elif agent['coordinates'][0] > key['coordinates'][0]:\n        function_1()\n    elif agent['coordinates'][0] < key['coordinates'][0]:\n        function_2()\n    elif agent['coordinates'][1] > key['coordinates'][1]:\n        function_3()\n    else:\n        function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 62.99533000181719,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 41.51317942364757,
                                    "difficulty": 1.5,
                                    "effort": 62.26976913547136,
                                    "time": 3.4594316186372978,
                                    "bugs": 0.01383772647454919
                                }
                            }
                        },
                        {
                            "id": 19,
                            "description": "The short term goal is to move the agent to the cell containing the key, pick up the key, and then move down one cell.",
                            "executable_at_desire_end": true,
                            "executable": false,
                            "invalidation_reason": "desire_triggered_execution",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_19():\n    global belief_set\n    key_coordinates = belief_set['keys'][1]['coordinates']\n    agent_coordinates = belief_set['agent'][1]['coordinates']\n    while agent_coordinates[0] > key_coordinates[0]:\n        function_1()\n        agent_coordinates = belief_set['agent'][1]['coordinates']\n    while agent_coordinates[0] < key_coordinates[0]:\n        function_2()\n        agent_coordinates = belief_set['agent'][1]['coordinates']\n    while agent_coordinates[1] > key_coordinates[1]:\n        function_3()\n        agent_coordinates = belief_set['agent'][1]['coordinates']\n    while agent_coordinates[1] < key_coordinates[1]:\n        function_4()\n        agent_coordinates = belief_set['agent'][1]['coordinates']\n    function_5()\n    function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 60.73779359115235,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 39.863137138648355,
                                    "difficulty": 1.0,
                                    "effort": 39.863137138648355,
                                    "time": 2.2146187299249087,
                                    "bugs": 0.013287712379549451
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        false
                    ],
                    "error": true,
                    "trigger_function": "def function_dtf_2(belief_set):\n    agent = belief_set['agent'][1]\n    keys = belief_set['keys']\n    for key in keys.values():\n        if key['carried_by_id'] is None:\n            return True\n    if not agent['has_key']:\n        return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 4
                        },
                        "mi": {
                            "mi": 71.19030148524578,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 9,
                            "sloc": 9,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 11.60964047443681,
                            "difficulty": 1.0,
                            "effort": 11.60964047443681,
                            "time": 0.6449800263576005,
                            "bugs": 0.0038698801581456034
                        }
                    }
                },
                "5": {
                    "description": "The agent's long term goal is to maintain its energy levels by locating and acquiring batteries, and to use the keys it carries to unlock doors, therefore accessing new areas of the environment for further exploration and parcel delivery.",
                    "intentions": [
                        {
                            "id": 20,
                            "description": "The agent's short term goal is to move towards the door by adjusting its coordinates in the environment, if the agent already has a key, it should attempt to unlock the door to access new areas.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_20():\n    global belief_set\n    agent = belief_set['agent'][1]\n    door = belief_set['doors'][1]\n    if agent['has_key']:\n        if agent['coordinates'][0] < door['coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > door['coordinates'][0]:\n            function_1()\n        if agent['coordinates'][1] < door['coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > door['coordinates'][1]:\n            function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 63.68623972392484,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 13,
                                    "sloc": 13,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 39.863137138648355,
                                    "difficulty": 1.0,
                                    "effort": 39.863137138648355,
                                    "time": 2.2146187299249087,
                                    "bugs": 0.013287712379549451
                                }
                            }
                        },
                        {
                            "id": 21,
                            "description": "The short term goal is to move the agent to the nearest door and attempt to open it if the agent has a key. If the agent does not have a key, it should then move towards the nearest key.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_21():\n    global belief_set\n    agent = belief_set['agent'][1]\n    if agent['has_key']:\n        door_coordinates = belief_set['doors'][1]['coordinates']\n        if agent['coordinates'][0] < door_coordinates[0]:\n            function_2()\n        elif agent['coordinates'][0] > door_coordinates[0]:\n            function_1()\n        elif agent['coordinates'][1] < door_coordinates[1]:\n            function_4()\n        else:\n            function_3()\n    else:\n        key_coordinates = belief_set['keys'][1]['coordinates']\n        if agent['coordinates'][0] < key_coordinates[0]:\n            function_2()\n        elif agent['coordinates'][0] > key_coordinates[0]:\n            function_1()\n        elif agent['coordinates'][1] < key_coordinates[1]:\n            function_4()\n        else:\n            function_3()\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 55.96113120329606,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 24,
                                    "sloc": 24,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 68.53238859703687,
                                    "difficulty": 1.0,
                                    "effort": 68.53238859703687,
                                    "time": 3.8073549220576037,
                                    "bugs": 0.022844129532345624
                                }
                            }
                        },
                        {
                            "id": 22,
                            "description": "The agent's short term goal is to move towards the nearest door if it possesses a key and has enough energy.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                16
                            ],
                            "called_by": [],
                            "function": "def function_22():\n    global belief_set\n    agent = belief_set['agent'][1]\n    if agent['has_key'] and agent['energy'] > 10:\n        door = belief_set['doors'][1]\n        if agent['coordinates'][0] > door['coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][0] < door['coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][1] > door['coordinates'][1]:\n            function_3()\n        elif agent['coordinates'][1] < door['coordinates'][1]:\n            function_4()\n    elif agent['energy'] <= 10:\n        function_16()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 59.729159619958416,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 85.83671966625714,
                                    "difficulty": 2.1538461538461537,
                                    "effort": 184.87908851193845,
                                    "time": 10.27106047288547,
                                    "bugs": 0.02861223988875238
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "6": {
                    "description": "The agent's long term goal is to efficiently gather all available parcels, batteries, and keys in the environment while navigating through doors and avoiding obstacles, to maximize the score and maintain optimal energy levels.",
                    "intentions": [
                        {
                            "id": 23,
                            "description": "The short term goal is to move the agent towards the nearest parcel or key, pick them up if possible, and if the energy level is below a certain threshold, move the agent towards the nearest battery cell to recharge its energy level.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                13,
                                14,
                                16
                            ],
                            "called_by": [],
                            "function": "def function_23():\n    global belief_set\n    agent = belief_set['agent'][1]\n    if agent['energy'] < 30:\n        function_16()\n    else:\n        function_14()\n    if 'parcels' in belief_set and agent['coordinates'] in [parcel[\n        'coordinates'] for parcel in belief_set['parcels'].values()]:\n        function_5()\n    if 'keys' in belief_set and agent['coordinates'] == belief_set['keys'][2][\n        'coordinates']:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 62.80197239102401,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 11,
                                    "sloc": 13,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 85.83671966625714,
                                    "difficulty": 2.1538461538461537,
                                    "effort": 184.87908851193845,
                                    "time": 10.27106047288547,
                                    "bugs": 0.02861223988875238
                                }
                            }
                        },
                        {
                            "id": 24,
                            "description": "The short term goal is to move the agent to the nearest parcel while preserving energy, pick up the parcel if the agent is already at the parcel's location.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_24():\n    global belief_set\n    agent_coords = belief_set['agent'][1]['coordinates']\n    parcel_coords = [parcel['coordinates'] for parcel in belief_set[\n        'parcels'].values() if parcel['carried_by_id'] is None]\n    if agent_coords in parcel_coords:\n        function_5()\n    else:\n        min_distance = float('inf')\n        for coords in parcel_coords:\n            distance = abs(agent_coords[0] - coords[0]) + abs(agent_coords[\n                1] - coords[1])\n            if distance < min_distance:\n                min_distance = distance\n                nearest_parcel = coords\n        if agent_coords[0] > nearest_parcel[0]:\n            function_1()\n        elif agent_coords[0] < nearest_parcel[0]:\n            function_2()\n        elif agent_coords[1] > nearest_parcel[1]:\n            function_3()\n        elif agent_coords[1] < nearest_parcel[1]:\n            function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 54.762981640352926,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 21,
                                    "sloc": 23,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 141.01319154423277,
                                    "difficulty": 3.0,
                                    "effort": 423.0395746326983,
                                    "time": 23.50219859070546,
                                    "bugs": 0.047004397181410924
                                }
                            }
                        },
                        {
                            "id": 25,
                            "description": "The agent's short term goal is to move towards the nearest parcel and pick it up if it's on the same cell.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_25():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    min_distance = float('inf')\n    nearest_parcel = None\n    for parcel_id, parcel in parcels.items():\n        if parcel['carried_by_id'] is not None:\n            continue\n        distance = abs(agent['coordinates'][0] - parcel['coordinates'][0]\n            ) + abs(agent['coordinates'][1] - parcel['coordinates'][1])\n        if distance < min_distance:\n            min_distance = distance\n            nearest_parcel = parcel\n    if nearest_parcel is not None:\n        if agent['coordinates'] == nearest_parcel['coordinates']:\n            function_5()\n        elif agent['coordinates'][0] > nearest_parcel['coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][0] < nearest_parcel['coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][1] > nearest_parcel['coordinates'][1]:\n            function_3()\n        elif agent['coordinates'][1] < nearest_parcel['coordinates'][1]:\n            function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 53.173092887153175,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 24,
                                    "sloc": 25,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 156.91128757139447,
                                    "difficulty": 3.142857142857143,
                                    "effort": 493.1497609386683,
                                    "time": 27.39720894103713,
                                    "bugs": 0.052303762523798154
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "7": {
                    "description": "The agent's long term goal is to efficiently gather all parcels and keys while maintaining sufficient energy by utilizing batteries, and strategically opening doors to optimize navigation through the environment.",
                    "intentions": [
                        {
                            "id": 26,
                            "description": "The agent's short term goal is to move towards the nearest parcel or key to pick it up, preserving energy by moving towards the nearest battery if energy is low.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                11,
                                16
                            ],
                            "called_by": [],
                            "function": "def function_26():\n    global belief_set\n    agent = belief_set['agent'][1]\n    if agent['energy'] < 30:\n        function_16()\n    else:\n        parcels = belief_set['parcels']\n        keys = belief_set['keys']\n        if parcels or keys:\n            function_5()\n        else:\n            function_11()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 4
                                },
                                "mi": {
                                    "mi": 67.58413206219534,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 12,
                                    "sloc": 12,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 15.509775004326936,
                                    "difficulty": 1.0,
                                    "effort": 15.509775004326936,
                                    "time": 0.861654166907052,
                                    "bugs": 0.005169925001442312
                                }
                            }
                        },
                        {
                            "id": 27,
                            "description": "The short term goal is to move the agent to a cell containing parcels, pick up the parcels, and then move to the nearest delivery cell to drop off the parcels.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_27():\n    global belief_set\n    parcel_location = next((parcel['coordinates'] for parcel in belief_set[\n        'parcels'].values() if parcel['carried_by_id'] is None), None)\n    if belief_set['agent'][1]['coordinates'] == parcel_location:\n        function_5()\n    elif belief_set['agent'][1]['coordinates'][0] < parcel_location[0]:\n        function_2()\n    elif belief_set['agent'][1]['coordinates'][0] > parcel_location[0]:\n        function_1()\n    elif belief_set['agent'][1]['coordinates'][1] < parcel_location[1]:\n        function_4()\n    elif belief_set['agent'][1]['coordinates'][1] > parcel_location[1]:\n        function_3()\n    delivery_cell_location = next((cell['cell_coordinates'] for cell in\n        belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'),\n        None)\n    if belief_set['agent'][1]['coordinates'] == delivery_cell_location:\n        function_6()\n    elif belief_set['agent'][1]['coordinates'][0] < delivery_cell_location[0]:\n        function_2()\n    elif belief_set['agent'][1]['coordinates'][0] > delivery_cell_location[0]:\n        function_1()\n    elif belief_set['agent'][1]['coordinates'][1] < delivery_cell_location[1]:\n        function_4()\n    elif belief_set['agent'][1]['coordinates'][1] > delivery_cell_location[1]:\n        function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 15
                                },
                                "mi": {
                                    "mi": 52.202611088443604,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 24,
                                    "sloc": 27,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 173.06477719407374,
                                    "difficulty": 2.0,
                                    "effort": 346.1295543881475,
                                    "time": 19.229419688230415,
                                    "bugs": 0.057688259064691244
                                }
                            }
                        },
                        {
                            "id": 28,
                            "description": "The short term goal is to move towards the nearest parcel, pick it up and then head to the nearest delivery cell to drop it off, while ensuring the agent has enough energy.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                16
                            ],
                            "called_by": [],
                            "function": "def function_28():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcel_coords = [parcel['coordinates'] for parcel in belief_set[\n        'parcels'].values() if parcel['carried_by_id'] is None]\n    delivery_coords = [cell['cell_coordinates'] for cell in belief_set[\n        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    while agent['coordinates'] != parcel_coords[0]:\n        if agent['coordinates'][0] < parcel_coords[0][0]:\n            function_2()\n        elif agent['coordinates'][0] > parcel_coords[0][0]:\n            function_1()\n        elif agent['coordinates'][1] < parcel_coords[0][1]:\n            function_4()\n        elif agent['coordinates'][1] > parcel_coords[0][1]:\n            function_3()\n    function_5()\n    while agent['coordinates'] != delivery_coords:\n        if agent['coordinates'][0] < delivery_coords[0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_coords[0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_coords[1]:\n            function_4()\n        elif agent['coordinates'][1] > delivery_coords[1]:\n            function_3()\n    function_6()\n    if agent['energy'] < 30:\n        function_16()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 16
                                },
                                "mi": {
                                    "mi": 50.617368675349766,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 27,
                                    "sloc": 29,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 193.21365610508815,
                                    "difficulty": 2.5,
                                    "effort": 483.03414026272037,
                                    "time": 26.835230014595577,
                                    "bugs": 0.06440455203502939
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "8": {
                    "description": "The agent's long term goal is to acquire all available keys, unlock the doors, and ensure the efficient collection of all parcels, while maintaining energy levels by utilizing available batteries in the environment.",
                    "intentions": [
                        {
                            "id": 29,
                            "description": "The agent's short term goal is to move towards the nearest parcel and pick it up if it is in the same cell, ensuring energy is preserved during movement.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                16
                            ],
                            "called_by": [],
                            "function": "def function_29():\n    global belief_set\n    parcels = belief_set['parcels']\n    agent = belief_set['agent'][1]\n    min_distance = float('inf')\n    nearest_parcel_coordinates = None\n    for parcel_id, parcel_info in parcels.items():\n        if parcel_info['carried_by_id'] is None:\n            parcel_coordinates = parcel_info['coordinates']\n            distance = abs(agent['coordinates'][0] - parcel_coordinates[0]\n                ) + abs(agent['coordinates'][1] - parcel_coordinates[1])\n            if distance < min_distance:\n                min_distance = distance\n                nearest_parcel_coordinates = parcel_coordinates\n    if nearest_parcel_coordinates is not None:\n        if agent['coordinates'][0] > nearest_parcel_coordinates[0]:\n            function_1()\n        elif agent['coordinates'][0] < nearest_parcel_coordinates[0]:\n            function_2()\n        elif agent['coordinates'][1] > nearest_parcel_coordinates[1]:\n            function_3()\n        elif agent['coordinates'][1] < nearest_parcel_coordinates[1]:\n            function_4()\n        elif agent['coordinates'] == nearest_parcel_coordinates:\n            function_5()\n    else:\n        function_16()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 52.41479355129861,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 26,
                                    "sloc": 27,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 156.91128757139447,
                                    "difficulty": 3.85,
                                    "effort": 604.1084571498687,
                                    "time": 33.561580952770484,
                                    "bugs": 0.052303762523798154
                                }
                            }
                        },
                        {
                            "id": 30,
                            "description": "The short term goal is to move the agent towards the nearest parcel, pick it up and then move towards the nearest delivery cell to drop the parcel. If the agent's energy is low, it should move towards the nearest battery cell to recharge its energy level.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                13,
                                14,
                                16
                            ],
                            "called_by": [],
                            "function": "def function_30():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    batteries = belief_set['batteries']\n    if agent['energy'] < 30:\n        function_16()\n    elif len(agent['parcels_carried_ids']) == 0:\n        nearest_parcel = min(parcels, key=lambda x: abs(agent['coordinates'\n            ][0] - parcels[x]['coordinates'][0]) + abs(agent['coordinates']\n            [1] - parcels[x]['coordinates'][1]))\n        parcel_coordinates = parcels[nearest_parcel]['coordinates']\n        if agent['coordinates'][0] < parcel_coordinates[0]:\n            function_2()\n        elif agent['coordinates'][0] > parcel_coordinates[0]:\n            function_1()\n        elif agent['coordinates'][1] < parcel_coordinates[1]:\n            function_4()\n        elif agent['coordinates'][1] > parcel_coordinates[1]:\n            function_3()\n        function_5()\n    else:\n        function_14()\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 54.74168620992269,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 23,
                                    "sloc": 24,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 122.13617281353935,
                                    "difficulty": 2.5,
                                    "effort": 305.34043203384834,
                                    "time": 16.963357335213797,
                                    "bugs": 0.040712057604513116
                                }
                            }
                        },
                        {
                            "id": 31,
                            "description": "The short term goal is to move the agent to the nearest battery to recharge its energy level, if the energy level is below a certain threshold. If the agent's energy level is above the threshold, the agent will move towards the nearest delivery cell. If the agent reaches a delivery cell, it will drop all the parcels it's carrying.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                13,
                                16
                            ],
                            "called_by": [],
                            "function": "def function_31():\n    global belief_set\n    if belief_set['agent'][1]['energy'] < 50:\n        function_16()\n    elif belief_set['agent'][1]['coordinates'] in [i['cell_coordinates'] for\n        i in belief_set['map']['grid'] if i['cell_type'] == 'delivery_cell']:\n        function_6()\n    else:\n        function_13()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 69.43754268602055,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 8,
                                    "sloc": 9,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 28.529325012980813,
                                    "difficulty": 1.5,
                                    "effort": 42.793987519471216,
                                    "time": 2.377443751081734,
                                    "bugs": 0.009509775004326938
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "9": {
                    "description": "The agent should aim to gather as many parcels as possible, deliver them to the designated delivery cell, while maintaining its energy level by picking up batteries when needed and using keys to unlock doors that block its path.",
                    "intentions": [
                        {
                            "id": 32,
                            "description": "The short term goal is to move the agent towards the delivery cell, if the agent is already at a delivery cell, it should drop all the parcels it's carrying and if the energy level is low, the agent should move towards the nearest battery.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_32():\n    global belief_set\n    agent = belief_set['agent'][1]\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]\n    if agent['coordinates'] == delivery_cell['cell_coordinates']:\n        function_6()\n    elif agent['energy'] < 20:\n        battery = [cell for cell in belief_set['map']['grid'] if cell[\n            'cell_type'] == 'batteries_spawn'][0]\n        if agent['coordinates'][0] < battery['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > battery['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < battery['cell_coordinates'][1]:\n            function_4()\n        else:\n            function_3()\n    elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n        function_2()\n    elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n        function_1()\n    elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n        function_4()\n    else:\n        function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 13
                                },
                                "mi": {
                                    "mi": 53.21107776839919,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 24,
                                    "sloc": 26,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 135.7068586817104,
                                    "difficulty": 1.5,
                                    "effort": 203.5602880225656,
                                    "time": 11.308904890142534,
                                    "bugs": 0.04523561956057014
                                }
                            }
                        },
                        {
                            "id": 33,
                            "description": "The short term goal is to deliver the parcels the agent is carrying if it is currently in a delivery cell. If not, it should move towards the nearest delivery cell, while preserving energy. If the energy level is low, the agent should move towards the nearest battery.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                6,
                                13,
                                14
                            ],
                            "called_by": [],
                            "function": "def function_33():\n    global belief_set\n    if belief_set['agent'][1]['coordinates'] == [0, 0]:\n        function_6()\n    elif belief_set['agent'][1]['energy'] < 20:\n        function_14()\n    else:\n        function_13()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 3
                                },
                                "mi": {
                                    "mi": 71.55988337877561,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 8,
                                    "sloc": 8,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 15.509775004326936,
                                    "difficulty": 1.0,
                                    "effort": 15.509775004326936,
                                    "time": 0.861654166907052,
                                    "bugs": 0.005169925001442312
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": "def function_dtf_3(belief_set):\n    agent = belief_set['agent'][1]\n    if len(agent['parcels_carried_ids']) > 0 or agent['has_key'] or agent[\n        'energy'] > 50:\n        return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 4
                        },
                        "mi": {
                            "mi": 73.70431702073414,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 5,
                            "sloc": 6,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 31.699250014423125,
                            "difficulty": 1.0,
                            "effort": 31.699250014423125,
                            "time": 1.7610694452457292,
                            "bugs": 0.010566416671474375
                        }
                    }
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 4,
                    "intentions": {
                        "7": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "8": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "9": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 3,
                    "intentions": {
                        "10": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "11": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "12": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "13": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "14": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "3": {
                    "n_objectives": 4,
                    "intentions": {
                        "15": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "16": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "4": {
                    "n_objectives": 3,
                    "intentions": {
                        "17": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "18": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "19": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "5": {
                    "n_objectives": 6,
                    "intentions": {
                        "20": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "21": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "22": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        }
                    }
                },
                "6": {
                    "n_objectives": 7,
                    "intentions": {
                        "23": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "24": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "25": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        }
                    }
                },
                "7": {
                    "n_objectives": 6,
                    "intentions": {
                        "26": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "27": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "28": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "8": {
                    "n_objectives": 5,
                    "intentions": {
                        "29": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "30": {
                            "n_objectives": 6,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "31": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "9": {
                    "n_objectives": 5,
                    "intentions": {
                        "32": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "33": {
                            "n_objectives": 4,
                            "category": "grounded",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "8",
            "path": "experiments/8/2024-11-08-17-40-54",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if 'map' not in belief_set:\n        belief_set['map'] = {}\n    if event['event_type'] == 'object added' or event['event_type'\n        ] == 'object changed':\n        belief_set['map'] = event['object']\n    elif event['event_type'] == 'object removed':\n        belief_set['map'] = {}\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.41358910604698,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 8,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 55.506595772116384,
                                "difficulty": 1.5,
                                "effort": 83.25989365817458,
                                "time": 4.625549647676365,
                                "bugs": 0.01850219859070546
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_2(event, beliefs):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            beliefs['agent'] = event['object']\n        elif event['event_type'] == 'object changed':\n            beliefs['agent'].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del beliefs['agent']\n    return beliefs",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 67.44688072439324,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 9,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] != 'parcel':\n        return belief_set\n    if 'parcels' not in belief_set:\n        belief_set['parcels'] = {}\n    if event['event_type'] == 'object added':\n        belief_set['parcels'][event['object']['id']] = event['object']\n    elif event['event_type'] == 'object changed':\n        if event['object']['id'] in belief_set['parcels']:\n            belief_set['parcels'][event['object']['id']].update(event['object']\n                )\n    elif event['event_type'] == 'object removed':\n        if event['object']['id'] in belief_set['parcels']:\n            del belief_set['parcels'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 8
                            },
                            "mi": {
                                "mi": 60.32203784916821,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 14,
                                "sloc": 15,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 87.56842503028855,
                                "difficulty": 2.0,
                                "effort": 175.1368500605771,
                                "time": 9.729825003365395,
                                "bugs": 0.029189475010096184
                            }
                        }
                    }
                ],
                "battery": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] != 'battery':\n        return belief_set\n    if event['event_type'] == 'object added':\n        if 'batteries' not in belief_set:\n            belief_set['batteries'] = {}\n        belief_set['batteries'][event['object']['id']] = event['object'][\n            'coordinates']\n    elif event['event_type'] == 'object changed':\n        if 'batteries' in belief_set and event['object']['id'] in belief_set[\n            'batteries']:\n            belief_set['batteries'][event['object']['id']] = event['object'][\n                'coordinates']\n    elif event['event_type'] == 'object removed':\n        if 'batteries' in belief_set and event['object']['id'] in belief_set[\n            'batteries']:\n            del belief_set['batteries'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 58.431037053128456,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 14,
                                "sloc": 18,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 149.27754454988144,
                                "difficulty": 3.0555555555555554,
                                "effort": 456.12583056908215,
                                "time": 25.340323920504563,
                                "bugs": 0.04975918151662715
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_5(event, belief_set):\n    if event['object_type'] == 'key':\n        if event['event_type'] == 'object added':\n            belief_set['keys'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            belief_set['keys'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object removed':\n            del belief_set['keys'][event['object']['id']]\n    return belief_set",
                        "error_event": "{'event_type': 'object removed', 'object_type': 'key', 'object': {'id': 1, 'coordinates': [1, 3], 'carried_by_id': 1}}",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.44872847079279,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    },
                    {
                        "function": "def function_7(event, beliefs):\n    if event['object_type'] == 'key':\n        if event['event_type'] == 'object added':\n            beliefs['keys'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            beliefs['keys'][event['object']['id']].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            if event['object']['id'] in beliefs['keys']:\n                del beliefs['keys'][event['object']['id']]\n    return beliefs",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 6
                            },
                            "mi": {
                                "mi": 65.2615033773337,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 10,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 53.77443751081735,
                                "difficulty": 1.0,
                                "effort": 53.77443751081735,
                                "time": 2.987468750600964,
                                "bugs": 0.017924812503605784
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_6(event, belief_set):\n    if event['object_type'] == 'door':\n        if event['event_type'] == 'object added':\n            if 'doors' not in belief_set:\n                belief_set['doors'] = {}\n            belief_set['doors'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'doors' in belief_set and event['object']['id'] in belief_set[\n                'doors']:\n                belief_set['doors'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object removed':\n            if 'doors' in belief_set and event['object']['id'] in belief_set[\n                'doors']:\n                del belief_set['doors'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.17653230125827,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 15,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent should strive to collect as many parcels as possible from the parcels spawn point and deliver them to their respective destinations while maintaining a high energy level.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The agent should move to the parcel spawn point and collect all the parcels.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                35
                            ],
                            "function": "def function_7():\n    global belief_set\n    spawn_point = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']\n    while belief_set['agent']['coordinates'] != spawn_point:\n        if belief_set['agent']['coordinates'][0] < spawn_point[0]:\n            function_2()\n        elif belief_set['agent']['coordinates'][0] > spawn_point[0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][1] < spawn_point[1]:\n            function_4()\n        elif belief_set['agent']['coordinates'][1] > spawn_point[1]:\n            function_3()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 61.61938981885358,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 13,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 72.0,
                                    "difficulty": 2.0,
                                    "effort": 144.0,
                                    "time": 8.0,
                                    "bugs": 0.024
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        false
                    ],
                    "error": false,
                    "trigger_function": "def function_dtf_1(belief_set):\n    if belief_set['agent']['energy'] > 50 and len(belief_set['agent'][\n        'parcels_carried_ids']) < 5:\n        for parcel in belief_set['parcels'].values():\n            if parcel['carried_by_id'] is None:\n                return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 5
                        },
                        "mi": {
                            "mi": 70.9139721327974,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 6,
                            "sloc": 7,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 43.01955000865388,
                            "difficulty": 2.0,
                            "effort": 86.03910001730776,
                            "time": 4.779950000961542,
                            "bugs": 0.014339850002884626
                        }
                    }
                },
                "2": {
                    "description": "The agent should aim to explore the entire map to discover all cells and their types while conserving its energy and maintaining a high score by delivering parcels when possible.",
                    "intentions": [
                        {
                            "id": 8,
                            "description": "The agent's short term goal should be to move to a neighboring cell, while conserving energy, to explore the map and discover new cells and their types. If a parcel is present in the new cell, the agent should pick it up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    current_cell = belief_set['agent']['coordinates']\n    if {'cell_coordinates': [current_cell[0] - 1, current_cell[1]],\n        'cell_type': 'walkable'} in belief_set['map']['grid']:\n        function_1()\n    elif {'cell_coordinates': [current_cell[0] + 1, current_cell[1]],\n        'cell_type': 'walkable'} in belief_set['map']['grid']:\n        function_2()\n    elif {'cell_coordinates': [current_cell[0], current_cell[1] - 1],\n        'cell_type': 'walkable'} in belief_set['map']['grid']:\n        function_3()\n    elif {'cell_coordinates': [current_cell[0], current_cell[1] + 1],\n        'cell_type': 'walkable'} in belief_set['map']['grid']:\n        function_4()\n    for parcel in belief_set['parcels'].values():\n        if parcel['coordinates'] == belief_set['agent']['coordinates']:\n            function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 59.63595158624024,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 114.6940428629768,
                                    "difficulty": 2.4,
                                    "effort": 275.2657028711443,
                                    "time": 15.292539048396906,
                                    "bugs": 0.03823134762099227
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short-term goal is to move the agent one cell to the left on the map, if it's a walkable cell and the agent's energy is above a certain threshold, to continue exploring the map and conserving energy.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    current_coords = belief_set['agent']['coordinates']\n    new_coords = [current_coords[0] - 1, current_coords[1]]\n    for cell in belief_set['map']['grid']:\n        if cell['cell_coordinates'] == new_coords and cell['cell_type'\n            ] == 'walkable':\n            if belief_set['agent']['energy'] > 10:\n                function_1()\n                break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 66.21113470862853,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 9,
                                    "sloc": 10,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 57.110323830864054,
                                    "difficulty": 2.0,
                                    "effort": 114.22064766172811,
                                    "time": 6.345591536762672,
                                    "bugs": 0.019036774610288017
                                }
                            }
                        },
                        {
                            "id": 10,
                            "description": "The short term goal is to move the agent towards a delivery cell while conserving energy. If the agent is carrying parcels and is in a delivery cell, it should drop the parcels to increase the score.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    agent = belief_set['agent']\n    map_grid = belief_set['map']['grid']\n    delivery_cell = next((cell for cell in map_grid if cell['cell_type'] ==\n        'delivery_cell'), None)\n    if not delivery_cell:\n        return\n    delivery_coordinates = delivery_cell['cell_coordinates']\n    while agent['coordinates'] != delivery_coordinates and agent['energy'\n        ] > 10:\n        if agent['coordinates'][0] > delivery_coordinates[0]:\n            function_1()\n        elif agent['coordinates'][0] < delivery_coordinates[0]:\n            function_2()\n        elif agent['coordinates'][1] > delivery_coordinates[1]:\n            function_3()\n        elif agent['coordinates'][1] < delivery_coordinates[1]:\n            function_4()\n    if agent['coordinates'] == delivery_coordinates and agent[\n        'parcels_carried_ids']:\n        function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 12
                                },
                                "mi": {
                                    "mi": 55.282706047548395,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 19,
                                    "sloc": 22,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 148.60339807279118,
                                    "difficulty": 3.3157894736842106,
                                    "effort": 492.7375830834655,
                                    "time": 27.374310171303637,
                                    "bugs": 0.04953446602426373
                                }
                            }
                        },
                        {
                            "id": 11,
                            "description": "The agent's short term goal is to move towards a delivery cell if there is one in its vicinity while conserving energy. If the agent is carrying parcels and is in a delivery cell, it should drop the parcels to increase the score. This function will limit the agent's actions to a maximum number to prevent infinite loops.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [
                                34,
                                35
                            ],
                            "function": "def function_11():\n    global belief_set\n    max_actions = 10\n    actions_taken = 0\n    while actions_taken < max_actions:\n        if 'parcels_carried_ids' in belief_set['agent'] and len(belief_set[\n            'agent']['parcels_carried_ids']) > 0:\n            for cell in belief_set['map']['grid']:\n                if cell['cell_type'] == 'delivery_cell' and cell[\n                    'cell_coordinates'] == belief_set['agent']['coordinates']:\n                    function_6()\n                    return\n        for cell in belief_set['map']['grid']:\n            if cell['cell_type'] == 'delivery_cell' and cell['cell_coordinates'\n                ][0] > belief_set['agent']['coordinates'][0] and belief_set[\n                'agent']['energy'] > 10:\n                function_2()\n                actions_taken += 1\n            elif cell['cell_type'] == 'delivery_cell' and cell[\n                'cell_coordinates'][0] < belief_set['agent']['coordinates'][0\n                ] and belief_set['agent']['energy'] > 10:\n                function_1()\n                actions_taken += 1\n            elif cell['cell_type'] == 'delivery_cell' and cell[\n                'cell_coordinates'][1] > belief_set['agent']['coordinates'][1\n                ] and belief_set['agent']['energy'] > 10:\n                function_4()\n                actions_taken += 1\n            elif cell['cell_type'] == 'delivery_cell' and cell[\n                'cell_coordinates'][1] < belief_set['agent']['coordinates'][1\n                ] and belief_set['agent']['energy'] > 10:\n                function_3()\n                actions_taken += 1\n        actions_taken += 1\n    return\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 20
                                },
                                "mi": {
                                    "mi": 47.93749059871573,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 25,
                                    "sloc": 35,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 496.6593447001757,
                                    "difficulty": 4.090909090909091,
                                    "effort": 2031.7882283189006,
                                    "time": 112.87712379549447,
                                    "bugs": 0.16555311490005858
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "3": {
                    "description": "The agent should aim to find and collect batteries to maintain a high energy level, while navigating through the walkable cells and avoiding any obstacles or hazards in the environment.",
                    "intentions": [
                        {
                            "id": 12,
                            "description": "The short term goal is to move the agent towards the nearest battery, if it is reachable and then pick it up to increase the agent's energy level.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    agent_coords = belief_set['agent']['coordinates']\n    battery_coords = list(belief_set['batteries'].values())[0]\n    if agent_coords[0] < battery_coords[0]:\n        function_2()\n    elif agent_coords[0] > battery_coords[0]:\n        function_1()\n    elif agent_coords[1] < battery_coords[1]:\n        function_4()\n    elif agent_coords[1] > battery_coords[1]:\n        function_3()\n    else:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 63.118667122234626,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 39.863137138648355,
                                    "difficulty": 1.0,
                                    "effort": 39.863137138648355,
                                    "time": 2.2146187299249087,
                                    "bugs": 0.013287712379549451
                                }
                            }
                        },
                        {
                            "id": 13,
                            "description": "The agent's short-term goal is to navigate towards the location of the batteries on the map, and collect them to maintain a high energy level.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    agent = belief_set['agent']\n    batteries = belief_set['batteries']\n    for battery in batteries.values():\n        while agent['coordinates'] != battery:\n            if agent['coordinates'][0] < battery[0]:\n                function_2()\n            elif agent['coordinates'][0] > battery[0]:\n                function_1()\n            if agent['coordinates'][1] < battery[1]:\n                function_4()\n            elif agent['coordinates'][1] > battery[1]:\n                function_3()\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 61.18934332672389,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 14,
                            "description": "The short term goal is to navigate the agent towards the location of batteries on the map and collect them, taking into account the boundary checks and avoiding infinite loops.",
                            "executable_at_desire_end": true,
                            "executable": false,
                            "invalidation_reason": "three_times_in_wrong_intentions_or_dependency",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                17,
                                18,
                                20,
                                21,
                                22
                            ],
                            "function": "def function_14():\n    global belief_set\n    safety_counter = 0\n    while belief_set['agent']['coordinates'] != belief_set['batteries'][1\n        ] and safety_counter < 100:\n        if belief_set['agent']['coordinates'][0] > belief_set['batteries'][1][0\n            ]:\n            function_1()\n        elif belief_set['agent']['coordinates'][0] < belief_set['batteries'][1\n            ][0]:\n            function_2()\n        elif belief_set['agent']['coordinates'][1] > belief_set['batteries'][1\n            ][1]:\n            function_3()\n        elif belief_set['agent']['coordinates'][1] < belief_set['batteries'][1\n            ][1]:\n            function_4()\n        safety_counter += 1\n    if belief_set['agent']['coordinates'] == belief_set['batteries'][1]:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 58.656652900096034,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 20,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 122.13617281353935,
                                    "difficulty": 3.176470588235294,
                                    "effort": 387.96196070183083,
                                    "time": 21.553442261212822,
                                    "bugs": 0.040712057604513116
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "4": {
                    "description": "The agent should aim to collect keys scattered across the map, keeping its energy level optimal, to unlock special bonuses or areas that enhance its performance and score.",
                    "intentions": [
                        {
                            "id": 15,
                            "description": "The agent's short term goal is to move towards the location of the key on the map and collect it, taking into account the boundary checks and avoiding infinite loops.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    key_position = belief_set['keys'][1]['coordinates']\n    agent_position = belief_set['agent']['coordinates']\n    while agent_position != key_position:\n        if key_position[0] < agent_position[0]:\n            function_1()\n        elif key_position[0] > agent_position[0]:\n            function_2()\n        if key_position[1] < agent_position[1]:\n            function_3()\n        elif key_position[1] > agent_position[1]:\n            function_4()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 61.97746292794532,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 16,
                            "description": "The short term goal is to navigate the agent towards the location of the key on the map and collect it, taking into account the boundary checks and avoiding infinite loops. It ensures the agent's position in the belief set is updated after each action and includes a condition to break the loop if the key's position is unreachable or if the agent's energy is insufficient.",
                            "executable_at_desire_end": true,
                            "executable": false,
                            "invalidation_reason": "desire_triggered_execution",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_16():\n    global belief_set\n    key_coord = belief_set['keys'][1]['coordinates']\n    while belief_set['agent']['coordinates'] != key_coord and belief_set[\n        'agent']['energy'] > 10:\n        if belief_set['agent']['coordinates'][0] < key_coord[0]:\n            function_2()\n        elif belief_set['agent']['coordinates'][0] > key_coord[0]:\n            function_1()\n        elif belief_set['agent']['coordinates'][1] < key_coord[1]:\n            function_4()\n        elif belief_set['agent']['coordinates'][1] > key_coord[1]:\n            function_3()\n        belief_set['agent']['coordinates'] = key_coord\n    if belief_set['agent']['coordinates'] == key_coord and belief_set['agent'][\n        'energy'] > 10:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 58.20175542558102,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 17,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 135.7068586817104,
                                    "difficulty": 2.7777777777777777,
                                    "effort": 376.96349633808444,
                                    "time": 20.942416463226913,
                                    "bugs": 0.04523561956057014
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        false
                    ],
                    "error": true,
                    "trigger_function": "def function_dtf_2(belief_set):\n    if belief_set['agent']['energy'] > 50 and not belief_set['agent']['has_key'\n        ] and len(belief_set['keys']) > 0:\n        return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 4
                        },
                        "mi": {
                            "mi": 74.99811367996045,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 4,
                            "sloc": 5,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 41.51317942364757,
                            "difficulty": 1.5,
                            "effort": 62.26976913547136,
                            "time": 3.4594316186372978,
                            "bugs": 0.01383772647454919
                        }
                    }
                },
                "5": {
                    "description": "The agent should aim to explore the entire map, identifying all objects and their locations, while managing its energy consumption effectively.",
                    "intentions": [
                        {
                            "id": 17,
                            "description": "The agent should move towards the unexplored part of the map, by choosing the next walkable cell, while ensuring it has enough energy to perform the movement. If the agent's energy is below a certain threshold, it should navigate towards the nearest battery to recharge.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                14
                            ],
                            "called_by": [],
                            "function": "def function_17():\n    global belief_set\n    agent_coordinates = belief_set['agent']['coordinates']\n    map_grid = belief_set['map']['grid']\n    unexplored_cells = [cell for cell in map_grid if cell['cell_type'] ==\n        'walkable' and cell['cell_coordinates'] not in belief_set['agent'][\n        'visited_cells']]\n    if belief_set['agent']['energy'] > 10:\n        if unexplored_cells:\n            next_cell = unexplored_cells[0]\n            if next_cell['cell_coordinates'][0] < agent_coordinates[0]:\n                function_1()\n            elif next_cell['cell_coordinates'][0] > agent_coordinates[0]:\n                function_2()\n            elif next_cell['cell_coordinates'][1] < agent_coordinates[1]:\n                function_3()\n            else:\n                function_4()\n        else:\n            function_5()\n    else:\n        function_14()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 56.75215096358132,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 20,
                                    "sloc": 22,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 89.20647778231529,
                                    "difficulty": 2.5,
                                    "effort": 223.01619445578822,
                                    "time": 12.389788580877124,
                                    "bugs": 0.029735492594105097
                                }
                            }
                        },
                        {
                            "id": 18,
                            "description": "The agent's short term goal is to move to the next unexplored cell in the map. If the agent's energy level is below a threshold, the agent should move towards the nearest battery to recharge.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                14
                            ],
                            "called_by": [],
                            "function": "def function_18():\n    global belief_set\n    energy_threshold = 30\n    energy = belief_set['agent']['energy']\n    if energy < energy_threshold:\n        function_14()\n    else:\n        function_1() if belief_set['agent']['coordinates'][0\n            ] > 0 else function_2()\n        function_3() if belief_set['agent']['coordinates'][1\n            ] > 0 else function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 4
                                },
                                "mi": {
                                    "mi": 68.82557417717732,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 9,
                                    "sloc": 11,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 25.26619429851844,
                                    "difficulty": 1.2,
                                    "effort": 30.319433158222125,
                                    "time": 1.6844129532345624,
                                    "bugs": 0.008422064766172813
                                }
                            }
                        },
                        {
                            "id": 19,
                            "description": "The short term goal is to move the agent to an adjacent cell, if it's a walkable cell and the agent's energy is above a certain threshold. If the agent's energy goes below this threshold, the agent will stop moving to conserve energy.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_19():\n    global belief_set\n    agent_coords = belief_set['agent']['coordinates']\n    if belief_set['agent']['energy'] > 50:\n        if agent_coords[0] > 0 and belief_set['map']['grid'][agent_coords[0\n            ] - 1][agent_coords[1]]['cell_type'] == 'walkable':\n            function_1()\n        elif agent_coords[0] < belief_set['map']['width'] - 1 and belief_set[\n            'map']['grid'][agent_coords[0] + 1][agent_coords[1]]['cell_type'\n            ] == 'walkable':\n            function_2()\n        elif agent_coords[1] > 0 and belief_set['map']['grid'][agent_coords[0]\n            ][agent_coords[1] - 1]['cell_type'] == 'walkable':\n            function_3()\n        elif agent_coords[1] < belief_set['map']['height'] - 1 and belief_set[\n            'map']['grid'][agent_coords[0]][agent_coords[1] + 1]['cell_type'\n            ] == 'walkable':\n            function_4()\n    else:\n        pass\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 56.38689009180407,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 20,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 292.36913196586306,
                                    "difficulty": 3.9310344827586206,
                                    "effort": 1149.3131394520133,
                                    "time": 63.85072996955629,
                                    "bugs": 0.09745637732195435
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "6": {
                    "description": "The agent should endeavor to explore the entire map, identifying the locations of all items, while maintaining a high energy level and avoiding any hazards.",
                    "intentions": [
                        {
                            "id": 20,
                            "description": "The agent's short term goal is to explore the map in the positive direction of the second coordinate while maintaining a high energy level. The agent will move from cell to cell using function_4 and if its energy level drops below 30, it will use function_14 to navigate towards the battery to recharge.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                14
                            ],
                            "called_by": [],
                            "function": "def function_20():\n    global belief_set\n    while belief_set['agent']['energy'] > 30:\n        function_4()\n    if belief_set['agent']['energy'] <= 30:\n        function_14()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 3
                                },
                                "mi": {
                                    "mi": 74.61162467590292,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 6,
                                    "sloc": 6,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 13.931568569324174,
                                    "difficulty": 1.3333333333333333,
                                    "effort": 18.575424759098897,
                                    "time": 1.0319680421721609,
                                    "bugs": 0.004643856189774725
                                }
                            }
                        },
                        {
                            "id": 21,
                            "description": "The agent's short term goal is to explore the map in the positive direction of the second coordinate until it reaches the edge of the map or its energy level drops below 30. Upon reaching the boundary or energy dropping below 30, the agent will navigate towards the nearest battery to recharge.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                14
                            ],
                            "called_by": [],
                            "function": "def function_21():\n    global belief_set\n    while belief_set['agent']['coordinates'][1] < belief_set['map']['height'\n        ] - 1 and belief_set['agent']['energy'] > 30:\n        function_4()\n    if belief_set['agent']['energy'] <= 30:\n        function_14()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 4
                                },
                                "mi": {
                                    "mi": 70.18688602520882,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 6,
                                    "sloc": 7,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 57.110323830864054,
                                    "difficulty": 2.7777777777777777,
                                    "effort": 158.6397884190668,
                                    "time": 8.813321578837044,
                                    "bugs": 0.019036774610288017
                                }
                            }
                        },
                        {
                            "id": 22,
                            "description": "The agent's short term goal is to explore the map in the positive direction of the second coordinate until it reaches the edge of the map or its energy level drops below 30. Upon reaching the boundary or energy dropping below 30, the agent should navigate towards the nearest battery to recharge.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                14
                            ],
                            "called_by": [],
                            "function": "def function_22():\n    global belief_set\n    while belief_set['agent']['coordinates'][1] < belief_set['map']['height'\n        ] - 1 and belief_set['agent']['energy'] >= 30:\n        function_4()\n    if belief_set['agent']['energy'] < 30:\n        function_14()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 4
                                },
                                "mi": {
                                    "mi": 70.27350113746152,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 6,
                                    "sloc": 7,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 2.2222222222222223,
                                    "effort": 123.34799060470309,
                                    "time": 6.852666144705727,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "7": {
                    "description": "The agent should aim to explore the entire map, identifying all walkable cells, while maintaining a high level of energy and collecting any objects of interest it encounters along the way.",
                    "intentions": [
                        {
                            "id": 23,
                            "description": "The short term goal is for the agent to move one cell to the right, if it's a walkable cell and if the agent's energy level is above a certain threshold, to continue exploring the map and conserving energy.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                4
                            ],
                            "called_by": [],
                            "function": "def function_23():\n    global belief_set\n    if belief_set['agent']['energy'] > 20:\n        function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 2
                                },
                                "mi": {
                                    "mi": 81.85633424453339,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 4,
                                    "sloc": 4,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 4.754887502163469,
                                    "difficulty": 0.5,
                                    "effort": 2.3774437510817346,
                                    "time": 0.1320802083934297,
                                    "bugs": 0.0015849625007211565
                                }
                            }
                        },
                        {
                            "id": 24,
                            "description": "The agent's short term goal is to move one cell down on the map if it is a walkable cell and the agent's energy is above 50, to continue exploring the map and conserving energy.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                2
                            ],
                            "called_by": [
                                30
                            ],
                            "function": "def function_24():\n    global belief_set\n    if belief_set['agent']['energy'] > 50:\n        new_coordinates = [belief_set['agent']['coordinates'][0] + 1,\n            belief_set['agent']['coordinates'][1]]\n        for cell in belief_set['map']['grid']:\n            if cell['cell_coordinates'] == new_coordinates and cell['cell_type'\n                ] == 'walkable':\n                function_2()\n                break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 67.3269739937943,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 8,
                                    "sloc": 10,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 57.110323830864054,
                                    "difficulty": 2.0,
                                    "effort": 114.22064766172811,
                                    "time": 6.345591536762672,
                                    "bugs": 0.019036774610288017
                                }
                            }
                        },
                        {
                            "id": 25,
                            "description": "The short term goal is for the agent to move one cell in each direction (up, down, left, right) if it is a walkable cell and the agent's energy is above 50, to continue exploring the map and conserving energy. If there is an object in the same cell as the agent, it will pick it up.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_25():\n    global belief_set\n    agent = belief_set['agent']\n    if agent['energy'] > 50:\n        function_1()\n        function_2()\n        function_3()\n        function_4()\n        function_5()\n    else:\n        pass\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 2
                                },
                                "mi": {
                                    "mi": 72.27274666021094,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 11,
                                    "sloc": 11,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 4.754887502163469,
                                    "difficulty": 0.5,
                                    "effort": 2.3774437510817346,
                                    "time": 0.1320802083934297,
                                    "bugs": 0.0015849625007211565
                                }
                            }
                        },
                        {
                            "id": 26,
                            "description": "The short term goal is to move the agent one cell to the right on the map if it's a walkable cell and the agent's energy is above a certain threshold, to continue exploring the map, conserving energy and picking up any objects found along the way.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_26():\n    global belief_set\n    agent_coordinates = belief_set['agent']['coordinates']\n    agent_energy = belief_set['agent']['energy']\n    map_grid = belief_set['map']['grid']\n    if agent_energy > 50:\n        for cell in map_grid:\n            if cell['cell_coordinates'] == [agent_coordinates[0], \n                agent_coordinates[1] + 1] and cell['cell_type'] == 'walkable':\n                function_4()\n                function_5()\n                break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 64.31004390951342,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 11,
                                    "sloc": 12,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 57.110323830864054,
                                    "difficulty": 2.0,
                                    "effort": 114.22064766172811,
                                    "time": 6.345591536762672,
                                    "bugs": 0.019036774610288017
                                }
                            }
                        },
                        {
                            "id": 27,
                            "description": "The short term goal is for the agent to move left, down, right and up successively, provided each direction is a walkable cell and the agent's energy is sufficient. This allows the agent to explore the map while conserving energy.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_27():\n    global belief_set\n    x, y = belief_set['agent']['coordinates']\n    if belief_set['agent']['energy'] > 50:\n        if belief_set['map']['grid'][y][x - 1]['cell_type'] == 'walkable':\n            function_1()\n        if belief_set['map']['grid'][y - 1][x]['cell_type'] == 'walkable':\n            function_3()\n        if belief_set['map']['grid'][y][x + 1]['cell_type'] == 'walkable':\n            function_2()\n        if belief_set['map']['grid'][y + 1][x]['cell_type'] == 'walkable':\n            function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 61.56380124008476,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 12,
                                    "sloc": 12,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 102.7985828955553,
                                    "difficulty": 3.6,
                                    "effort": 370.07489842399906,
                                    "time": 20.559716579111058,
                                    "bugs": 0.03426619429851843
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "8": {
                    "description": "The agent should aim to collect all the keys in the environment and use them to unlock all the doors, while maintaining sufficient energy levels by collecting batteries when needed.",
                    "intentions": [
                        {
                            "id": 28,
                            "description": "The short term goal is for the agent to move towards the nearest key, if it doesn't already have one, and pick it up. If the agent already has a key, it should move towards the nearest door and unlock it.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_28():\n    global belief_set\n    agent_coordinates = belief_set['agent']['coordinates']\n    key_coordinates = [item['coordinates'] for item in belief_set['keys'].\n        values()]\n    door_coordinates = [item['coordinates'] for item in belief_set['doors']\n        .values()]\n    if belief_set['agent']['has_key'] == False:\n        if key_coordinates:\n            target_key_coordinates = key_coordinates[0]\n            if target_key_coordinates[0] < agent_coordinates[0]:\n                function_1()\n            elif target_key_coordinates[0] > agent_coordinates[0]:\n                function_2()\n            elif target_key_coordinates[1] < agent_coordinates[1]:\n                function_3()\n            elif target_key_coordinates[1] > agent_coordinates[1]:\n                function_4()\n            else:\n                function_5()\n    elif door_coordinates:\n        target_door_coordinates = door_coordinates[0]\n        if target_door_coordinates[0] < agent_coordinates[0]:\n            function_1()\n        elif target_door_coordinates[0] > agent_coordinates[0]:\n            function_2()\n        elif target_door_coordinates[1] < agent_coordinates[1]:\n            function_3()\n        elif target_door_coordinates[1] > agent_coordinates[1]:\n            function_4()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 14
                                },
                                "mi": {
                                    "mi": 52.02612804931146,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 28,
                                    "sloc": 30,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 118.59257041502654,
                                    "difficulty": 1.5,
                                    "effort": 177.8888556225398,
                                    "time": 9.882714201252211,
                                    "bugs": 0.03953085680500885
                                }
                            }
                        },
                        {
                            "id": 29,
                            "description": "The agent's short term goal is to move towards the key, if it is in a nearby cell, and pick it up. If the agent's energy drops below a certain threshold, it should move towards the nearest battery and pick it up to replenish its energy.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "three_times_in_wrong_intentions_or_dependency",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                30,
                                31,
                                32
                            ],
                            "function": "def function_29():\n    global belief_set\n    agent_coordinates = belief_set['agent']['coordinates']\n    key_coordinates = belief_set['keys'][2]['coordinates']\n    battery_coordinates = belief_set['batteries'][2]\n    if belief_set['agent']['energy'] < 30:\n        if battery_coordinates[0] > agent_coordinates[0]:\n            function_2()\n        elif battery_coordinates[0] < agent_coordinates[0]:\n            function_1()\n        elif battery_coordinates[1] > agent_coordinates[1]:\n            function_4()\n        elif battery_coordinates[1] < agent_coordinates[1]:\n            function_3()\n        function_5()\n    else:\n        if key_coordinates[0] > agent_coordinates[0]:\n            function_2()\n        elif key_coordinates[0] < agent_coordinates[0]:\n            function_1()\n        elif key_coordinates[1] > agent_coordinates[1]:\n            function_4()\n        elif key_coordinates[1] < agent_coordinates[1]:\n            function_3()\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 53.68690731285978,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 25,
                                    "sloc": 25,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 116.69205856195879,
                                    "difficulty": 1.0,
                                    "effort": 116.69205856195879,
                                    "time": 6.4828921423310435,
                                    "bugs": 0.03889735285398626
                                }
                            }
                        },
                        {
                            "id": 30,
                            "description": "The agent's short term goal is to move towards the nearest door if the agent has a key, and unlock it. If the agent's energy drops below a certain threshold, it should move towards the nearest battery and pick it up to replenish its energy.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                24,
                                29
                            ],
                            "called_by": [],
                            "function": "def function_30():\n    global belief_set\n    if belief_set['agent']['has_key']:\n        for door in belief_set['doors'].values():\n            if door['coordinates'] == belief_set['agent']['coordinates']:\n                function_5()\n    elif belief_set['agent']['energy'] < 50:\n        function_29()\n    else:\n        function_24()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 69.17688599205619,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 10,
                                    "sloc": 10,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 15.509775004326936,
                                    "difficulty": 1.0,
                                    "effort": 15.509775004326936,
                                    "time": 0.861654166907052,
                                    "bugs": 0.005169925001442312
                                }
                            }
                        },
                        {
                            "id": 31,
                            "description": "The agent's short term goal is to move towards the nearest door, if the agent has a key and the agent's energy is above a certain threshold, to unlock the door and continue exploring the map. If the agent doesn't have a key, it should move towards the nearest key and pick it up. If the agent's energy drops below a certain threshold, it should move towards the nearest battery and pick it up to replenish its energy.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                29
                            ],
                            "called_by": [],
                            "function": "def function_31():\n    global belief_set\n    agent = belief_set['agent']\n    keys = belief_set['keys']\n    doors = belief_set['doors']\n    batteries = belief_set['batteries']\n    if agent['energy'] < 30:\n        function_29()\n    elif not agent['has_key'] and keys:\n        function_29()\n    else:\n        nearest_door = min(doors, key=lambda x: abs(doors[x]['coordinates']\n            [0] - agent['coordinates'][0]) + abs(doors[x]['coordinates'][1] -\n            agent['coordinates'][1]))\n        door_x, door_y = doors[nearest_door]['coordinates']\n        agent_x, agent_y = agent['coordinates']\n        if door_x > agent_x:\n            function_2()\n        elif door_x < agent_x:\n            function_1()\n        elif door_y > agent_y:\n            function_4()\n        else:\n            function_3()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 54.945985635449986,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 23,
                                    "sloc": 24,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 114.20025299224778,
                                    "difficulty": 3.4,
                                    "effort": 388.28086017364245,
                                    "time": 21.571158898535693,
                                    "bugs": 0.03806675099741593
                                }
                            }
                        },
                        {
                            "id": 32,
                            "description": "The agent's short term goal is to move towards the nearest door that has not been unlocked, if the agent has a key. If the agent's energy drops below a certain threshold, it should move towards the nearest battery and pick it up to replenish its energy levels.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                29
                            ],
                            "called_by": [],
                            "function": "def function_32():\n    global belief_set\n    if belief_set['agent']['energy'] > 50:\n        if belief_set['agent']['has_key']:\n            for door in belief_set['doors'].values():\n                if not door.get('unlocked', False):\n                    if door['coordinates'][0] > belief_set['agent'][\n                        'coordinates'][0]:\n                        function_2()\n                        break\n                    elif door['coordinates'][0] < belief_set['agent'][\n                        'coordinates'][0]:\n                        function_1()\n                        break\n                    elif door['coordinates'][1] > belief_set['agent'][\n                        'coordinates'][1]:\n                        function_4()\n                        break\n                    elif door['coordinates'][1] < belief_set['agent'][\n                        'coordinates'][1]:\n                        function_3()\n                        break\n    else:\n        function_29()\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 57.26547758486625,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 21,
                                    "sloc": 25,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 64.72503367497926,
                                    "difficulty": 1.5,
                                    "effort": 97.08755051246888,
                                    "time": 5.393752806248271,
                                    "bugs": 0.021575011224993085
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "9": {
                    "description": "The long term goal of the agent is to collect all the parcels and deliver them to the delivery cell, while managing energy reserves by collecting batteries when necessary, and using keys to open doors when required.",
                    "intentions": [
                        {
                            "id": 33,
                            "description": "The short term goal of the agent is to move towards the delivery cell while carrying parcels, and if the agent is at the delivery cell, it should drop the parcels to increase the score. The agent should also manage its energy reserves wisely to be able to continue its tasks.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                3,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_33():\n    global belief_set\n    if belief_set['agent']['parcels_carried_ids'] and belief_set['agent'][\n        'coordinates'] == [0, 0]:\n        function_6()\n    elif belief_set['agent']['coordinates'][0] > 0:\n        function_1()\n    elif belief_set['agent']['coordinates'][1] > 0:\n        function_3()\n    else:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 66.30629883759347,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 10,
                                    "sloc": 11,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 39.863137138648355,
                                    "difficulty": 1.7142857142857142,
                                    "effort": 68.33680652339717,
                                    "time": 3.796489251299843,
                                    "bugs": 0.013287712379549451
                                }
                            }
                        },
                        {
                            "id": 34,
                            "description": "The short term goal of the agent is to deliver the parcels it is currently carrying to the delivery cell, and then move towards the batteries spawn point to recharge its energy if the energy level is below 50.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                11
                            ],
                            "called_by": [],
                            "function": "def function_34():\n    global belief_set\n    if belief_set['agent']['coordinates'] == [0, 0] and len(belief_set[\n        'agent']['parcels_carried_ids']) > 0:\n        function_6()\n    else:\n        function_11()\n    if belief_set['agent']['energy'] < 50 and belief_set['agent']['coordinates'\n        ] != [3, 2]:\n        function_2() if belief_set['agent']['coordinates'][0] < [3, 2][0\n            ] else function_1()\n        function_4() if belief_set['agent']['coordinates'][1] < [3, 2][1\n            ] else function_3()\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 63.080108367292716,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 10,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 105.41561814669026,
                                    "difficulty": 2.5,
                                    "effort": 263.53904536672565,
                                    "time": 14.641058075929202,
                                    "bugs": 0.03513853938223009
                                }
                            }
                        },
                        {
                            "id": 35,
                            "description": "The short term goal of the agent is to move towards the parcel spawn point, collect all parcels, and then move to the delivery cell to deliver them, while making sure to maintain its energy level above 50.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                11
                            ],
                            "called_by": [],
                            "function": "def function_35():\n    global belief_set\n    if belief_set['agent']['energy'] > 50:\n        function_7()\n        function_11()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 2
                                },
                                "mi": {
                                    "mi": 79.7423427057672,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 5,
                                    "sloc": 5,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 4.754887502163469,
                                    "difficulty": 0.5,
                                    "effort": 2.3774437510817346,
                                    "time": 0.1320802083934297,
                                    "bugs": 0.0015849625007211565
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 3,
                    "intentions": {
                        "7": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 5,
                    "intentions": {
                        "8": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "9": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "10": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "11": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "3": {
                    "n_objectives": 5,
                    "intentions": {
                        "12": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "13": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "14": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "4": {
                    "n_objectives": 3,
                    "intentions": {
                        "15": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "16": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "5": {
                    "n_objectives": 3,
                    "intentions": {
                        "17": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "18": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "19": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        }
                    }
                },
                "6": {
                    "n_objectives": 4,
                    "intentions": {
                        "20": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "21": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "22": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "7": {
                    "n_objectives": 4,
                    "intentions": {
                        "23": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "24": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "25": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "26": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "27": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "8": {
                    "n_objectives": 4,
                    "intentions": {
                        "28": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "29": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "30": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "31": {
                            "n_objectives": 7,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "32": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": true
                        }
                    }
                },
                "9": {
                    "n_objectives": 5,
                    "intentions": {
                        "33": {
                            "n_objectives": 3,
                            "category": "grounded",
                            "one_action": true
                        },
                        "34": {
                            "n_objectives": 3,
                            "category": "grounded",
                            "one_action": true
                        },
                        "35": {
                            "n_objectives": 5,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        },
        {
            "typology": "8",
            "path": "experiments/8/2024-11-07-18-30-26",
            "perception_functions": {
                "map": [
                    {
                        "function": "def function_1(event, belief_set):\n    if event['object_type'] == 'map':\n        if event['event_type'] == 'object added':\n            belief_set['map'] = event['object']\n        elif event['event_type'] == 'object changed':\n            for cell in event['object']['grid']:\n                for belief_cell in belief_set['map']['grid']:\n                    if belief_cell['cell_coordinates'] == cell[\n                        'cell_coordinates']:\n                        belief_cell['cell_type'] = cell['cell_type']\n        elif event['event_type'] == 'object removed':\n            del belief_set['map']\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 8
                            },
                            "mi": {
                                "mi": 63.37363090612576,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 12,
                                "sloc": 13,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 51.89147427955947,
                                "difficulty": 0.5,
                                "effort": 25.945737139779734,
                                "time": 1.4414298410988742,
                                "bugs": 0.01729715809318649
                            }
                        }
                    }
                ],
                "agent": [
                    {
                        "function": "def function_2(event, belief_set):\n    if event['object_type'] == 'agent':\n        if event['event_type'] == 'object added':\n            belief_set['agent'] = {event['object']['id']: event['object']}\n        elif event['event_type'] == 'object changed':\n            belief_set['agent'][event['object']['id']].update(event['object'])\n        elif event['event_type'] == 'object removed':\n            del belief_set['agent'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 5
                            },
                            "mi": {
                                "mi": 66.44872847079279,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 10,
                                "sloc": 9,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 38.03910001730775,
                                "difficulty": 0.5,
                                "effort": 19.019550008653876,
                                "time": 1.0566416671474377,
                                "bugs": 0.012679700005769252
                            }
                        }
                    }
                ],
                "parcel": [
                    {
                        "function": "def function_3(event, belief_set):\n    if event['object_type'] == 'parcel':\n        if event['event_type'] == 'object added':\n            if 'parcels' not in belief_set:\n                belief_set['parcels'] = {}\n            belief_set['parcels'][event['object']['id']] = event['object']\n        elif event['event_type'] == 'object changed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                belief_set['parcels'][event['object']['id']].update(event[\n                    'object'])\n        elif event['event_type'] == 'object removed':\n            if 'parcels' in belief_set and event['object']['id'] in belief_set[\n                'parcels']:\n                del belief_set['parcels'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 59.17653230125827,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 16,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 147.1612434150308,
                                "difficulty": 2.4444444444444446,
                                "effort": 359.72748390340865,
                                "time": 19.984860216856035,
                                "bugs": 0.04905374780501027
                            }
                        }
                    }
                ],
                "battery": [
                    {
                        "function": "def function_4(event, belief_set):\n    if event['object_type'] == 'battery':\n        if event['event_type'] == 'object added':\n            if 'batteries' not in belief_set:\n                belief_set['batteries'] = {}\n            belief_set['batteries'][event['object']['id']] = {'coordinates':\n                event['object']['coordinates']}\n        elif event['event_type'] == 'object changed':\n            if 'batteries' in belief_set:\n                if event['object']['id'] in belief_set['batteries']:\n                    belief_set['batteries'][event['object']['id']][\n                        'coordinates'] = event['object']['coordinates']\n        elif event['event_type'] == 'object removed':\n            if 'batteries' in belief_set:\n                if event['object']['id'] in belief_set['batteries']:\n                    del belief_set['batteries'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 10
                            },
                            "mi": {
                                "mi": 58.08450519335644,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 16,
                                "sloc": 17,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 110.36149671375918,
                                "difficulty": 1.9285714285714286,
                                "effort": 212.84002937653557,
                                "time": 11.824446076474198,
                                "bugs": 0.03678716557125306
                            }
                        }
                    }
                ],
                "key": [
                    {
                        "function": "def function_5(event, belief_set):\n    if event['object_type'] != 'key':\n        return belief_set\n    if event['event_type'] == 'object added' or event['event_type'\n        ] == 'object changed':\n        if 'keys' not in belief_set:\n            belief_set['keys'] = {}\n        belief_set['keys'][event['object']['id']] = event['object']\n    elif event['event_type'] == 'object removed':\n        if 'keys' in belief_set and event['object']['id'] in belief_set['keys'\n            ]:\n            del belief_set['keys'][event['object']['id']]\n    return belief_set",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 8
                            },
                            "mi": {
                                "mi": 61.63838246964802,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 11,
                                "sloc": 13,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 120.40465370320703,
                                "difficulty": 3.375,
                                "effort": 406.3657062483237,
                                "time": 22.57587256935132,
                                "bugs": 0.04013488456773568
                            }
                        }
                    }
                ],
                "door": [
                    {
                        "function": "def function_6(event, beliefs):\n    door_id = event['object']['id']\n    if event['event_type'] == 'object added':\n        if 'doors' not in beliefs:\n            beliefs['doors'] = {}\n        beliefs['doors'][door_id] = event['object']\n    elif event['event_type'] == 'object changed':\n        if 'doors' in beliefs and door_id in beliefs['doors']:\n            beliefs['doors'][door_id].update(event['object'])\n    elif event['event_type'] == 'object removed':\n        if 'doors' in beliefs and door_id in beliefs['doors']:\n            del beliefs['doors'][door_id]\n    return beliefs",
                        "error_event": "None",
                        "analysis": {
                            "cc": {
                                "rank": "A",
                                "complexity": 9
                            },
                            "mi": {
                                "mi": 59.74862671341544,
                                "rank": "A"
                            },
                            "raw": {
                                "lloc": 13,
                                "sloc": 13,
                                "comments": 0
                            },
                            "hal": {
                                "volume": 127.43782540330756,
                                "difficulty": 2.6666666666666665,
                                "effort": 339.8342010754868,
                                "time": 18.879677837527044,
                                "bugs": 0.042479275134435855
                            }
                        }
                    }
                ]
            },
            "desires": {
                "1": {
                    "description": "The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.",
                    "intentions": [
                        {
                            "id": 7,
                            "description": "The short-term goal is for the agent to move towards the nearest parcel and pick it up.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [
                                8,
                                20,
                                22
                            ],
                            "function": "def function_7():\n    global belief_set\n    agent_coordinates = belief_set['agent'][1]['coordinates']\n    parcel_coordinates = belief_set['parcels'][1]['coordinates']\n    while agent_coordinates != parcel_coordinates:\n        if agent_coordinates[0] < parcel_coordinates[0]:\n            function_2()\n            agent_coordinates[0] += 1\n        elif agent_coordinates[0] > parcel_coordinates[0]:\n            function_1()\n            agent_coordinates[0] -= 1\n        elif agent_coordinates[1] < parcel_coordinates[1]:\n            function_4()\n            agent_coordinates[1] += 1\n        elif agent_coordinates[1] > parcel_coordinates[1]:\n            function_3()\n            agent_coordinates[1] -= 1\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 57.33706280113289,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 116.69205856195879,
                                    "difficulty": 3.0,
                                    "effort": 350.07617568587636,
                                    "time": 19.44867642699313,
                                    "bugs": 0.03889735285398626
                                }
                            }
                        },
                        {
                            "id": 8,
                            "description": "The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7
                            ],
                            "called_by": [],
                            "function": "def function_8():\n    global belief_set\n    agent_coordinates = belief_set['agent'][1]['coordinates']\n    if belief_set['agent'][1]['parcels_carried_ids']:\n        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][\n            'grid'] if cell['cell_coordinates'] == agent_coordinates]:\n            function_6()\n        else:\n            if agent_coordinates[0] > 0:\n                function_1()\n            elif agent_coordinates[0] < belief_set['map']['width'] - 1:\n                function_2()\n            if agent_coordinates[1] > 0:\n                function_3()\n            elif agent_coordinates[1] < belief_set['map']['height'] - 1:\n                function_4()\n    else:\n        function_7()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 9
                                },
                                "mi": {
                                    "mi": 57.88574360464359,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 17,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 101.95026032264605,
                                    "difficulty": 2.857142857142857,
                                    "effort": 291.28645806470297,
                                    "time": 16.18258100359461,
                                    "bugs": 0.03398342010754868
                                }
                            }
                        },
                        {
                            "id": 9,
                            "description": "The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_9():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    carried_parcels = [parcels[parcel_id] for parcel_id in agent[\n        'parcels_carried_ids']]\n    if not carried_parcels:\n        return\n    current_coordinates = agent['coordinates']\n    target_coordinates = find_closest_walkable_cell(current_coordinates,\n        belief_set['map']['grid'])\n    while current_coordinates != target_coordinates:\n        if current_coordinates[0] < target_coordinates[0]:\n            function_2()\n        elif current_coordinates[0] > target_coordinates[0]:\n            function_1()\n        if current_coordinates[1] < target_coordinates[1]:\n            function_4()\n        elif current_coordinates[1] > target_coordinates[1]:\n            function_3()\n        current_coordinates = agent['coordinates']\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 57.783725350269656,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 20,
                                    "sloc": 22,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 66.41714012534482,
                                    "difficulty": 2.0,
                                    "effort": 132.83428025068963,
                                    "time": 7.379682236149424,
                                    "bugs": 0.02213904670844827
                                }
                            }
                        },
                        {
                            "id": 10,
                            "description": "The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_10():\n    global belief_set\n    agent = belief_set['agent'][1]\n    map = belief_set['map']['grid']\n    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']\n    current_coordinates = agent['coordinates']\n    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[\n        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[\n        'cell_coordinates'][1] - current_coordinates[1]))\n    target_coordinates = nearest_walkable_cell['cell_coordinates']\n    while agent['coordinates'] != target_coordinates:\n        if agent['coordinates'][0] < target_coordinates[0]:\n            function_2()\n            agent['coordinates'][0] += 1\n        elif agent['coordinates'][0] > target_coordinates[0]:\n            function_1()\n            agent['coordinates'][0] -= 1\n        if agent['coordinates'][1] < target_coordinates[1]:\n            function_4()\n            agent['coordinates'][1] += 1\n        elif agent['coordinates'][1] > target_coordinates[1]:\n            function_3()\n            agent['coordinates'][1] -= 1\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 53.272066646725406,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 23,
                                    "sloc": 24,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 189.46125880997533,
                                    "difficulty": 3.391304347826087,
                                    "effort": 642.5207907468729,
                                    "time": 35.69559948593738,
                                    "bugs": 0.06315375293665844
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "2": {
                    "description": "The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.",
                    "intentions": [
                        {
                            "id": 11,
                            "description": "The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.",
                            "executable_at_desire_end": true,
                            "executable": false,
                            "invalidation_reason": "desire_triggered_execution",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_11():\n    global belief_set\n    min_distance = float('inf')\n    nearest_parcel = None\n    for parcel in belief_set['parcels'].values():\n        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][\n            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[\n            'agent'][1]['coordinates'][1])\n        if distance < min_distance:\n            min_distance = distance\n            nearest_parcel = parcel\n    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'\n        ]:\n        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[\n            'coordinates'][0]:\n            function_2()\n        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[\n            'coordinates'][0]:\n            function_1()\n        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[\n            'coordinates'][1]:\n            function_4()\n        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[\n            'coordinates'][1]:\n            function_3()\n    function_5()\n    for cell in belief_set['map']['grid']:\n        if cell['cell_type'] == 'delivery_cell':\n            delivery_cell = cell\n    while belief_set['agent'][1]['coordinates'] != delivery_cell[\n        'cell_coordinates']:\n        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[\n            'cell_coordinates'][0]:\n            function_2()\n        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[\n            'cell_coordinates'][0]:\n            function_1()\n        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[\n            'cell_coordinates'][1]:\n            function_4()\n        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[\n            'cell_coordinates'][1]:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 15
                                },
                                "mi": {
                                    "mi": 48.57752683148105,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 32,
                                    "sloc": 44,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 232.64662506490404,
                                    "difficulty": 3.0,
                                    "effort": 697.9398751947122,
                                    "time": 38.77443751081734,
                                    "bugs": 0.07754887502163468
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        false
                    ],
                    "error": true,
                    "trigger_function": "def function_dtf_1(belief_set):\n    agent_energy = belief_set['agent'][1]['energy']\n    parcels = belief_set['parcels']\n    if agent_energy < 10:\n        return False\n    if parcels:\n        for parcel in parcels.values():\n            if parcel['carried_by_id'] is None:\n                return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 5
                        },
                        "mi": {
                            "mi": 69.17688599205619,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 10,
                            "sloc": 10,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 15.509775004326936,
                            "difficulty": 1.0,
                            "effort": 15.509775004326936,
                            "time": 0.861654166907052,
                            "bugs": 0.005169925001442312
                        }
                    }
                },
                "3": {
                    "description": "The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.",
                    "intentions": [
                        {
                            "id": 12,
                            "description": "The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_12():\n    global belief_set\n    agent = belief_set['agent'][1]\n    battery = belief_set['batteries'][1]\n    while agent['coordinates'] != battery['coordinates']:\n        if agent['coordinates'][0] < battery['coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > battery['coordinates'][0]:\n            function_1()\n        if agent['coordinates'][1] < battery['coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > battery['coordinates'][1]:\n            function_3()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 61.97746292794532,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 13,
                            "description": "The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.",
                            "executable_at_desire_end": true,
                            "executable": false,
                            "invalidation_reason": "desire_triggered_execution",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_13():\n    global belief_set\n    agent = belief_set['agent'][1]\n    battery = belief_set['batteries'][1]\n    x_distance = battery['coordinates'][0] - agent['coordinates'][0]\n    y_distance = battery['coordinates'][1] - agent['coordinates'][1]\n    iterations = 0\n    max_iterations = 10\n    while agent['coordinates'] != battery['coordinates'\n        ] and iterations < max_iterations:\n        if x_distance > 0:\n            function_2()\n            x_distance -= 1\n        elif x_distance < 0:\n            function_1()\n            x_distance += 1\n        if y_distance > 0:\n            function_4()\n            y_distance -= 1\n        elif y_distance < 0:\n            function_3()\n            y_distance += 1\n        iterations += 1\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 53.53676213915314,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 23,
                                    "sloc": 24,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 181.52097998526924,
                                    "difficulty": 6.0,
                                    "effort": 1089.1258799116154,
                                    "time": 60.50699332842308,
                                    "bugs": 0.060506993328423075
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        false
                    ],
                    "error": true,
                    "trigger_function": "def function_dtf_2(belief_set):\n    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[\n        'agent'][1]['energy'] < 100:\n        return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 4
                        },
                        "mi": {
                            "mi": 75.67587892630101,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 4,
                            "sloc": 5,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 33.219280948873624,
                            "difficulty": 1.5,
                            "effort": 49.82892142331043,
                            "time": 2.7682734124061352,
                            "bugs": 0.01107309364962454
                        }
                    }
                },
                "4": {
                    "description": "The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.",
                    "intentions": [
                        {
                            "id": 14,
                            "description": "The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_14():\n    global belief_set\n    agent = belief_set['agent'][1]\n    key = belief_set['keys'][1]\n    while agent['coordinates'] != key['coordinates']:\n        if agent['coordinates'][0] < key['coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > key['coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < key['coordinates'][1]:\n            function_4()\n        elif agent['coordinates'][1] > key['coordinates'][1]:\n            function_3()\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 61.97746292794532,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 55.506595772116384,
                                    "difficulty": 1.5,
                                    "effort": 83.25989365817458,
                                    "time": 4.625549647676365,
                                    "bugs": 0.01850219859070546
                                }
                            }
                        },
                        {
                            "id": 15,
                            "description": "The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_15():\n    global belief_set\n    agent = belief_set['agent'][1]\n    keys = belief_set['keys']\n    for key_id, key in keys.items():\n        if key['carried_by_id'] is None:\n            while agent['coordinates'] != key['coordinates']:\n                if agent['coordinates'][0] > key['coordinates'][0] and agent[\n                    'coordinates'][0] > 0:\n                    function_1()\n                elif agent['coordinates'][0] < key['coordinates'][0] and agent[\n                    'coordinates'][0] < belief_set['map']['width'] - 1:\n                    function_2()\n                elif agent['coordinates'][1] > key['coordinates'][1] and agent[\n                    'coordinates'][1] > 0:\n                    function_3()\n                elif agent['coordinates'][1] < key['coordinates'][1] and agent[\n                    'coordinates'][1] < belief_set['map']['height'] - 1:\n                    function_4()\n                else:\n                    break\n            function_5()\n            break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 12
                                },
                                "mi": {
                                    "mi": 53.72338054665289,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 19,
                                    "sloc": 23,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 248.15640006923098,
                                    "difficulty": 3.2,
                                    "effort": 794.1004802215392,
                                    "time": 44.11669334564107,
                                    "bugs": 0.082718800023077
                                }
                            }
                        },
                        {
                            "id": 16,
                            "description": "The agent's short term goal is to navigate towards the nearest available key and pick it up.",
                            "executable_at_desire_end": true,
                            "executable": false,
                            "invalidation_reason": "desire_triggered_execution",
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_16():\n    global belief_set\n    agent = belief_set['agent'][1]\n    key = belief_set['keys'][1]\n    while agent['coordinates'] != key['coordinates']:\n        if agent['coordinates'][0] < key['coordinates'][0] and agent[\n            'coordinates'][0] < belief_set['map']['width'] - 1:\n            function_2()\n            agent['coordinates'][0] += 1\n        elif agent['coordinates'][0] > key['coordinates'][0] and agent[\n            'coordinates'][0] > 0:\n            function_1()\n            agent['coordinates'][0] -= 1\n        if agent['coordinates'][1] < key['coordinates'][1] and agent[\n            'coordinates'][1] < belief_set['map']['height'] - 1:\n            function_4()\n            agent['coordinates'][1] += 1\n        elif agent['coordinates'][1] > key['coordinates'][1] and agent[\n            'coordinates'][1] > 0:\n            function_3()\n            agent['coordinates'][1] -= 1\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 10
                                },
                                "mi": {
                                    "mi": 53.93647841220516,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 22,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 299.13186826628436,
                                    "difficulty": 3.5625,
                                    "effort": 1065.657280698638,
                                    "time": 59.203182261035444,
                                    "bugs": 0.09971062275542812
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        false
                    ],
                    "error": true,
                    "trigger_function": "def function_dtf_3(belief_set):\n    keys = belief_set['keys']\n    agent = belief_set['agent'][1]\n    for key_id, key in keys.items():\n        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:\n            return True\n    return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 4
                        },
                        "mi": {
                            "mi": 70.83707985591369,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 7,
                            "sloc": 7,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 28.529325012980813,
                            "difficulty": 1.5,
                            "effort": 42.793987519471216,
                            "time": 2.377443751081734,
                            "bugs": 0.009509775004326938
                        }
                    }
                },
                "5": {
                    "description": "The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.",
                    "intentions": [
                        {
                            "id": 17,
                            "description": "The short term goal is for the agent to navigate towards the door and unlock it using the key it has.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_17():\n    global belief_set\n    agent = belief_set['agent'][1]\n    door = belief_set['doors'][1]\n    if agent['coordinates'][0] < door['coordinates'][0]:\n        function_2()\n    elif agent['coordinates'][0] > door['coordinates'][0]:\n        function_1()\n    elif agent['coordinates'][1] < door['coordinates'][1]:\n        function_4()\n    elif agent['coordinates'][1] > door['coordinates'][1]:\n        function_3()\n    elif agent['has_key']:\n        function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 62.984164198258014,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 14,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 39.863137138648355,
                                    "difficulty": 1.0,
                                    "effort": 39.863137138648355,
                                    "time": 2.2146187299249087,
                                    "bugs": 0.013287712379549451
                                }
                            }
                        },
                        {
                            "id": 18,
                            "description": "The short term goal is to navigate the agent towards the door and unlock it using the key",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_18():\n    global belief_set\n    agent = belief_set['agent'][1]\n    door = belief_set['doors'][1]\n    while agent['coordinates'] != door['coordinates']:\n        if agent['coordinates'][0] < door['coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > door['coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < door['coordinates'][1]:\n            function_4()\n        else:\n            function_3()\n    door['is_locked'] = False\n    return\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 62.341713324572375,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 15,
                                    "sloc": 15,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 41.51317942364757,
                                    "difficulty": 1.5,
                                    "effort": 62.26976913547136,
                                    "time": 3.4594316186372978,
                                    "bugs": 0.01383772647454919
                                }
                            }
                        },
                        {
                            "id": 19,
                            "description": "The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4
                            ],
                            "called_by": [],
                            "function": "def function_19():\n    global belief_set\n    agent = belief_set['agent'][1]\n    door = belief_set['doors'][1]\n    agent_coordinates = agent['coordinates']\n    door_coordinates = door['coordinates']\n    while agent_coordinates != door_coordinates:\n        if agent_coordinates[0] < door_coordinates[0]:\n            function_2()\n            agent_coordinates[0] += 1\n        elif agent_coordinates[0] > door_coordinates[0]:\n            function_1()\n            agent_coordinates[0] -= 1\n        if agent_coordinates[1] < door_coordinates[1]:\n            function_4()\n            agent_coordinates[1] += 1\n        elif agent_coordinates[1] > door_coordinates[1]:\n            function_3()\n            agent_coordinates[1] -= 1\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 6
                                },
                                "mi": {
                                    "mi": 56.824847020677645,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 19,
                                    "sloc": 19,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 116.69205856195879,
                                    "difficulty": 3.0,
                                    "effort": 350.07617568587636,
                                    "time": 19.44867642699313,
                                    "bugs": 0.03889735285398626
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "6": {
                    "description": "The agent should aim to collect and deliver as many parcels as possible while maintaining sufficient energy by collecting batteries when necessary.",
                    "intentions": [
                        {
                            "id": 20,
                            "description": "The agent should aim to deliver the parcels it is currently carrying to the delivery cell, then move towards the nearest battery if its energy is below a certain threshold.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7
                            ],
                            "called_by": [],
                            "function": "def function_20():\n    global belief_set\n    agent = belief_set['agent'][1]\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    if agent['coordinates'] == delivery_cell and len(agent[\n        'parcels_carried_ids']) > 0:\n        function_6()\n    elif agent['coordinates'][0] < delivery_cell[0]:\n        function_2()\n    elif agent['coordinates'][0] > delivery_cell[0]:\n        function_1()\n    elif agent['coordinates'][1] < delivery_cell[1]:\n        function_4()\n    elif agent['coordinates'][1] > delivery_cell[1]:\n        function_3()\n    elif agent['energy'] < 30:\n        battery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n            'cell_type'] == 'batteries_spawn'][0]['cell_coordinates']\n        if agent['coordinates'] == battery_cell:\n            function_5()\n        elif agent['coordinates'][0] < battery_cell[0]:\n            function_2()\n        elif agent['coordinates'][0] > battery_cell[0]:\n            function_1()\n        elif agent['coordinates'][1] < battery_cell[1]:\n            function_4()\n        elif agent['coordinates'][1] > battery_cell[1]:\n            function_3()\n    else:\n        function_7()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 17
                                },
                                "mi": {
                                    "mi": 49.648303345893616,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 28,
                                    "sloc": 31,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 226.9977353711304,
                                    "difficulty": 2.0689655172413794,
                                    "effort": 469.6504869747526,
                                    "time": 26.09169372081959,
                                    "bugs": 0.07566591179037681
                                }
                            }
                        },
                        {
                            "id": 21,
                            "description": "The agent should move towards the delivery cell and drop off the parcels it is carrying to increase its score.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_21():\n    global belief_set\n    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell\n        ['cell_type'] == 'delivery_cell')\n    agent = belief_set['agent'][1]\n    dx, dy = delivery_cell['cell_coordinates'][0] - agent['coordinates'][0\n        ], delivery_cell['cell_coordinates'][1] - agent['coordinates'][1]\n    if dx < 0:\n        function_1()\n    elif dx > 0:\n        function_2()\n    elif dy < 0:\n        function_3()\n    elif dy > 0:\n        function_4()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 7
                                },
                                "mi": {
                                    "mi": 60.819769576816476,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 14,
                                    "sloc": 16,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 77.70923408096293,
                                    "difficulty": 3.111111111111111,
                                    "effort": 241.762061585218,
                                    "time": 13.431225643623222,
                                    "bugs": 0.025903078026987644
                                }
                            }
                        },
                        {
                            "id": 22,
                            "description": "The short term goal is for the agent to move towards the nearest parcel, pick it up and move towards the delivery cell to deliver it. If the energy of the agent is low, it moves towards the battery spawn cells to recharge.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7
                            ],
                            "called_by": [],
                            "function": "def function_22():\n    global belief_set\n    agent = belief_set['agent'][1]\n    if agent['energy'] < 30:\n        for cell in belief_set['map']['grid']:\n            if cell['cell_type'] == 'batteries_spawn':\n                agent['coordinates'] = cell['cell_coordinates']\n                break\n    else:\n        parcel_picked = False\n        for parcel in belief_set['parcels'].values():\n            if parcel['coordinates'] == agent['coordinates']:\n                function_5()\n                parcel_picked = True\n                break\n        if not parcel_picked:\n            function_7()\n        for cell in belief_set['map']['grid']:\n            if cell['cell_type'] == 'delivery_cell':\n                while agent['coordinates'] != cell['cell_coordinates']:\n                    if agent['coordinates'][0] < cell['cell_coordinates'][0]:\n                        function_2()\n                    elif agent['coordinates'][0] > cell['cell_coordinates'][0]:\n                        function_1()\n                    elif agent['coordinates'][1] < cell['cell_coordinates'][1]:\n                        function_4()\n                    elif agent['coordinates'][1] > cell['cell_coordinates'][1]:\n                        function_3()\n                function_6()\n                break\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 14
                                },
                                "mi": {
                                    "mi": 51.02467724023669,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 30,
                                    "sloc": 30,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 132.96391252091354,
                                    "difficulty": 2.5,
                                    "effort": 332.4097813022838,
                                    "time": 18.4672100723491,
                                    "bugs": 0.044321304173637846
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "7": {
                    "description": "The agent's long term goal is to efficiently navigate the map, collect all parcels and deliver them to the delivery cell, recharging energy and using keys to open doors if necessary.",
                    "intentions": [
                        {
                            "id": 23,
                            "description": "The short term goal is for the agent to move towards the delivery cell and deliver all the parcels it is carrying.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "negative_evaluation",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_23():\n    global belief_set\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']\n    agent_position = belief_set['agent'][1]['coordinates']\n    while agent_position != delivery_cell:\n        if agent_position[0] > delivery_cell[0]:\n            function_1()\n            agent_position[0] -= 1\n        elif agent_position[0] < delivery_cell[0]:\n            function_2()\n            agent_position[0] += 1\n        elif agent_position[1] > delivery_cell[1]:\n            function_3()\n            agent_position[1] -= 1\n        elif agent_position[1] < delivery_cell[1]:\n            function_4()\n            agent_position[1] += 1\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 8
                                },
                                "mi": {
                                    "mi": 56.65242121818314,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 19,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 133.78294855911892,
                                    "difficulty": 3.75,
                                    "effort": 501.68605709669595,
                                    "time": 27.87144761648311,
                                    "bugs": 0.044594316186372975
                                }
                            }
                        },
                        {
                            "id": 24,
                            "description": "The agent's short term goal is to navigate towards the nearest parcel, pick it up and then navigate towards the delivery cell to deliver the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_24():\n    global belief_set\n    agent = belief_set['agent'][1]\n    parcels = belief_set['parcels']\n    nearest_parcel = min(parcels.values(), key=lambda p: abs(p[\n        'coordinates'][0] - agent['coordinates'][0]) + abs(p['coordinates']\n        [1] - agent['coordinates'][1]))\n    while agent['coordinates'] != nearest_parcel['coordinates']:\n        if agent['coordinates'][0] < nearest_parcel['coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > nearest_parcel['coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < nearest_parcel['coordinates'][1]:\n            function_4()\n        else:\n            function_3()\n    function_5()\n    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[\n        'cell_type'] == 'delivery_cell'][0]\n    while agent['coordinates'] != delivery_cell['cell_coordinates']:\n        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:\n            function_2()\n        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:\n            function_1()\n        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:\n            function_4()\n        else:\n            function_3()\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 11
                                },
                                "mi": {
                                    "mi": 51.56246426437745,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 27,
                                    "sloc": 29,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 176.64806144190666,
                                    "difficulty": 3.0,
                                    "effort": 529.94418432572,
                                    "time": 29.44134357365111,
                                    "bugs": 0.05888268714730222
                                }
                            }
                        },
                        {
                            "id": 25,
                            "description": "The agent's short term goal is to navigate towards the nearest battery, pick it up, and then navigate towards the nearest parcel, pick it up, and finally move towards the delivery cell and deliver the parcel.",
                            "executable_at_desire_end": false,
                            "executable": false,
                            "invalidation_reason": "right_after_generation",
                            "invalidation_after_generation_reason": "execution_error",
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5,
                                6
                            ],
                            "called_by": [],
                            "function": "def function_25():\n    global belief_set\n    agent = belief_set['agent'][1]\n    batteries_spawn = [cell['cell_coordinates'] for cell in belief_set[\n        'map']['grid'] if cell['cell_type'] == 'batteries_spawn'][0]\n    parcels_spawn = [cell['cell_coordinates'] for cell in belief_set['map']\n        ['grid'] if cell['cell_type'] == 'parcels_spawn'][0]\n    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']\n        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]\n    max_moves = belief_set['map']['width'] * belief_set['map']['height']\n    for _ in range(max_moves):\n        if agent['coordinates'][0] > batteries_spawn[0]:\n            function_1()\n        elif agent['coordinates'][0] < batteries_spawn[0]:\n            function_2()\n        elif agent['coordinates'][1] > batteries_spawn[1]:\n            function_3()\n        elif agent['coordinates'][1] < batteries_spawn[1]:\n            function_4()\n        else:\n            break\n    function_5()\n    for _ in range(max_moves):\n        if agent['coordinates'][0] > parcels_spawn[0]:\n            function_1()\n        elif agent['coordinates'][0] < parcels_spawn[0]:\n            function_2()\n        elif agent['coordinates'][1] > parcels_spawn[1]:\n            function_3()\n        elif agent['coordinates'][1] < parcels_spawn[1]:\n            function_4()\n        else:\n            break\n    function_5()\n    for _ in range(max_moves):\n        if agent['coordinates'][0] > delivery_cell[0]:\n            function_1()\n        elif agent['coordinates'][0] < delivery_cell[0]:\n            function_2()\n        elif agent['coordinates'][1] > delivery_cell[1]:\n            function_3()\n        elif agent['coordinates'][1] < delivery_cell[1]:\n            function_4()\n        else:\n            break\n    function_6()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 22
                                },
                                "mi": {
                                    "mi": 44.640614223998284,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 43,
                                    "sloc": 46,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 248.15640006923098,
                                    "difficulty": 2.0,
                                    "effort": 496.31280013846197,
                                    "time": 27.572933341025664,
                                    "bugs": 0.082718800023077
                                }
                            }
                        }
                    ],
                    "executable": false,
                    "satisfied": false,
                    "triggered_n_times": 0,
                    "evaluations": [],
                    "error": false,
                    "trigger_function": null
                },
                "8": {
                    "description": "The agent should aim to find and carry the key, in order to unlock the doors and facilitate easier movement around the grid.",
                    "intentions": [
                        {
                            "id": 26,
                            "description": "The agent should move towards the key and pick it up to facilitate unlocking doors in the future.",
                            "executable_at_desire_end": true,
                            "executable": true,
                            "invalidation_reason": null,
                            "invalidation_after_generation_reason": null,
                            "calls": [
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "called_by": [],
                            "function": "def function_26():\n    global belief_set\n    key_coordinates = belief_set['keys'][2]['coordinates']\n    agent_coordinates = belief_set['agent'][1]['coordinates']\n    while agent_coordinates != key_coordinates:\n        if agent_coordinates[0] < key_coordinates[0]:\n            function_2()\n            agent_coordinates[0] += 1\n        elif agent_coordinates[0] > key_coordinates[0]:\n            function_1()\n            agent_coordinates[0] -= 1\n        elif agent_coordinates[1] < key_coordinates[1]:\n            function_4()\n            agent_coordinates[1] += 1\n        else:\n            function_3()\n            agent_coordinates[1] -= 1\n    function_5()\n",
                            "analysis": {
                                "cc": {
                                    "rank": "A",
                                    "complexity": 5
                                },
                                "mi": {
                                    "mi": 57.9386127147833,
                                    "rank": "A"
                                },
                                "raw": {
                                    "lloc": 18,
                                    "sloc": 18,
                                    "comments": 0
                                },
                                "hal": {
                                    "volume": 100.07820003461549,
                                    "difficulty": 3.076923076923077,
                                    "effort": 307.9329231834323,
                                    "time": 17.107384621301794,
                                    "bugs": 0.0333594000115385
                                }
                            }
                        }
                    ],
                    "executable": true,
                    "satisfied": true,
                    "triggered_n_times": 1,
                    "evaluations": [
                        true,
                        true,
                        true,
                        true,
                        true,
                        true
                    ],
                    "error": false,
                    "trigger_function": "def function_dtf_4(belief_set):\n    if not belief_set['agent'][1]['has_key']:\n        return True\n    elif belief_set['doors']:\n        return True\n    else:\n        return False",
                    "trigger_function_analysis": {
                        "cc": {
                            "rank": "A",
                            "complexity": 3
                        },
                        "mi": {
                            "mi": 79.05373698619428,
                            "rank": "A"
                        },
                        "raw": {
                            "lloc": 7,
                            "sloc": 7,
                            "comments": 0
                        },
                        "hal": {
                            "volume": 2.0,
                            "difficulty": 0.5,
                            "effort": 1.0,
                            "time": 0.05555555555555555,
                            "bugs": 0.0006666666666666666
                        }
                    }
                }
            },
            "desire_analysis": {
                "1": {
                    "n_objectives": 3,
                    "intentions": {
                        "7": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "8": {
                            "n_objectives": 1,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "9": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "10": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "2": {
                    "n_objectives": 4,
                    "intentions": {
                        "11": {
                            "n_objectives": 3,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "3": {
                    "n_objectives": 4,
                    "intentions": {
                        "12": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "13": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "4": {
                    "n_objectives": 3,
                    "intentions": {
                        "14": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "15": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "16": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "5": {
                    "n_objectives": 6,
                    "intentions": {
                        "17": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "18": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "19": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "6": {
                    "n_objectives": 3,
                    "intentions": {
                        "20": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": true
                        },
                        "21": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "22": {
                            "n_objectives": 6,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "7": {
                    "n_objectives": 5,
                    "intentions": {
                        "23": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "24": {
                            "n_objectives": 4,
                            "category": "adaptive",
                            "one_action": false
                        },
                        "25": {
                            "n_objectives": 6,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                },
                "8": {
                    "n_objectives": 4,
                    "intentions": {
                        "26": {
                            "n_objectives": 2,
                            "category": "adaptive",
                            "one_action": false
                        }
                    }
                }
            }
        }
    ]
}