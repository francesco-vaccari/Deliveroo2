
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        
[7]
Executable: False
Description: The short-term goal is to navigate the agent to the nearest parcel spawn point and pick up a parcel if available.
        def function_7():
            global belief_set
            agent = belief_set['agent'][1]
            parcels = belief_set['parcels']
            map_grid = belief_set['map']['grid']
            spawn_points = [cell for cell in map_grid if cell['cell_type'] ==
                'parcels_spawn']
            nearest_spawn_point = min(spawn_points, key=lambda cell: abs(cell[
                'cell_coordinates'][0] - agent['coordinates'][0]) + abs(cell[
                'cell_coordinates'][1] - agent['coordinates'][1]))
            while agent['coordinates'] != nearest_spawn_point['cell_coordinates']:
                if agent['coordinates'][0] < nearest_spawn_point['cell_coordinates'][0
                    ]:
                    function_2()
                elif agent['coordinates'][0] > nearest_spawn_point['cell_coordinates'][
                    0]:
                    function_1()
                if agent['coordinates'][1] < nearest_spawn_point['cell_coordinates'][1
                    ]:
                    function_4()
                elif agent['coordinates'][1] > nearest_spawn_point['cell_coordinates'][
                    1]:
                    function_3()
            for parcel in parcels.values():
                if parcel['coordinates'] == agent['coordinates'] and parcel[
                    'carried_by_id'] is None:
                    function_5()
        
[8]
Executable: False
Description: The agent's short term goal is to move towards the nearest parcel, pick it up, and then move towards the nearest delivery cell to deliver it.
        def function_8():
            global belief_set
            agent = belief_set['agent'][1]
            parcels = belief_set['parcels']
            map = belief_set['map']['grid']
            for parcel in parcels.values():
                if parcel['carried_by_id'] == agent['id']:
                    for cell in map:
                        if cell['cell_type'] == 'delivery_cell':
                            while agent['coordinates'][0] < cell['cell_coordinates'][0
                                ]:
                                function_2()
                            while agent['coordinates'][0] > cell['cell_coordinates'][0
                                ]:
                                function_1()
                            while agent['coordinates'][1] < cell['cell_coordinates'][1
                                ]:
                                function_4()
                            while agent['coordinates'][1] > cell['cell_coordinates'][1
                                ]:
                                function_3()
                            function_6()
                            break
                    break
                else:
                    if agent['coordinates'][0] < parcel['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > parcel['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < parcel['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > parcel['coordinates'][1]:
                        function_3()
                    function_5()
                    break
        
[9]
Executable: False
Description: The short term goal of the agent is to deliver the parcel it is currently carrying to the nearest delivery cell. The agent achieves this by first identifying the nearest delivery cell, then moving towards it and finally delivering the parcel at the cell.
        def function_9():
            global belief_set
            delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                ['cell_type'] == 'delivery_cell')
            agent = belief_set['agent'][1]
            while agent['coordinates'] != delivery_cell['cell_coordinates']:
                if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                    function_1()
                elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                    function_2()
                elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                    function_3()
                else:
                    function_4()
            function_6()
        
[10]
Executable: False
Description: The agent's short term goal is to move towards the delivery cell and deliver the parcel it is carrying, increasing its score.
        def function_10():
            global belief_set
            delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
            agent_position = belief_set['agent'][1]['coordinates']
            if agent_position[0] < delivery_cell[0]:
                function_2()
            elif agent_position[0] > delivery_cell[0]:
                function_1()
            elif agent_position[1] < delivery_cell[1]:
                function_4()
            elif agent_position[1] > delivery_cell[1]:
                function_3()
            else:
                function_6()
        
[11]
Executable: True
Description: The agent's short term goal is to navigate towards the delivery cell while avoiding non-walkable cells, and upon reaching the delivery cell, deliver the parcel it is carrying.
        def function_11():
            global belief_set
            delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
            agent_position = belief_set['agent'][1]['coordinates']
            while agent_position != delivery_cell:
                if agent_position[0] < delivery_cell[0]:
                    function_2()
                elif agent_position[0] > delivery_cell[0]:
                    function_1()
                elif agent_position[1] < delivery_cell[1]:
                    function_4()
                elif agent_position[1] > delivery_cell[1]:
                    function_3()
                agent_position = belief_set['agent'][1]['coordinates']
            function_6()
        
