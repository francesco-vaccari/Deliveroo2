
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        
[7]
Executable: True
Description: The short term goal is to navigate the agent towards the parcel spawn point and pick up the parcel.
        def function_7():
            global belief_set
            spawn_point = [cell['cell_coordinates'] for cell in belief_set['map'][
                'grid'] if cell['cell_type'] == 'parcels_spawn'][0]
            agent_coordinates = belief_set['agent']['coordinates']
            while agent_coordinates != spawn_point:
                if agent_coordinates[0] > spawn_point[0]:
                    function_1()
                elif agent_coordinates[0] < spawn_point[0]:
                    function_2()
                elif agent_coordinates[1] > spawn_point[1]:
                    function_3()
                elif agent_coordinates[1] < spawn_point[1]:
                    function_4()
                agent_coordinates = belief_set['agent']['coordinates']
            function_5()
        
[8]
Executable: False
Description: The agent's short term goal is to navigate towards the delivery cell and drop off the carried parcels.
        def function_8():
            global belief_set
            agent_coordinates = belief_set['agent']['coordinates']
            delivery_cell_coordinates = [cell['cell_coordinates'] for cell in
                belief_set['map']['grid'] if cell['cell_type'] in ['delivery_cell',
                'double_delivery_cell']][0]
            while agent_coordinates[0] < delivery_cell_coordinates[0]:
                function_2()
                agent_coordinates[0] += 1
            while agent_coordinates[0] > delivery_cell_coordinates[0]:
                function_1()
                agent_coordinates[0] -= 1
            while agent_coordinates[1] < delivery_cell_coordinates[1]:
                function_4()
                agent_coordinates[1] += 1
            while agent_coordinates[1] > delivery_cell_coordinates[1]:
                function_3()
                agent_coordinates[1] -= 1
            function_6()
        
[9]
Executable: False
Description: The short term goal of the agent is to navigate towards the delivery cell and drop off the parcel.
        def function_9():
            global belief_set
            agent_location = belief_set['agent']['coordinates']
            parcel_location = belief_set['parcel'][1]['coordinates']
            delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                'map']['grid'] if 'delivery' in cell['cell_type']][0]
            if agent_location[0] < delivery_location[0]:
                function_2()
            elif agent_location[0] > delivery_location[0]:
                function_1()
            elif agent_location[1] < delivery_location[1]:
                function_4()
            elif agent_location[1] > delivery_location[1]:
                function_3()
            else:
                function_6()
        
[10]
Executable: False
Description: The short term goal is for the agent to navigate towards the correct delivery cell and drop off the parcel it is carrying.
        def function_10():
            global belief_set
            agent = belief_set['agent']
            parcels = belief_set['parcel']
            map = belief_set['map']['grid']
            for parcel in parcels.values():
                if parcel['carried_by_id'] == agent['id']:
                    for cell in map:
                        if cell['cell_type'] in ['delivery_cell',
                            'double_delivery_cell'] and agent['coordinates'] != cell[
                            'cell_coordinates']:
                            if cell['cell_coordinates'][0] < agent['coordinates'][0]:
                                function_1()
                            elif cell['cell_coordinates'][0] > agent['coordinates'][0]:
                                function_2()
                            elif cell['cell_coordinates'][1] < agent['coordinates'][1]:
                                function_3()
                            elif cell['cell_coordinates'][1] > agent['coordinates'][1]:
                                function_4()
                    if agent['coordinates'] == cell['cell_coordinates']:
                        function_6()
                        break
        
[11]
Executable: False
Description: The short term goal is to navigate the agent towards the nearest parcel, pick it up and then deliver it to the nearest delivery cell.
        def function_11():
            global belief_set
            agent = belief_set['agent']
            parcels = belief_set['parcel']
            delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                'cell_type'] in ['double_delivery_cell', 'delivery_cell']][0]
            nearest_parcel = min(parcels.values(), key=lambda parcel: abs(parcel[
                'coordinates'][0] - agent['coordinates'][0]) + abs(parcel[
                'coordinates'][1] - agent['coordinates'][1]))
            if agent['coordinates'][0] < nearest_parcel['coordinates'][0]:
                function_2()
            elif agent['coordinates'][0] > nearest_parcel['coordinates'][0]:
                function_1()
            elif agent['coordinates'][1] < nearest_parcel['coordinates'][1]:
                function_4()
            elif agent['coordinates'][1] > nearest_parcel['coordinates'][1]:
                function_3()
            else:
                function_5()
            if agent['coordinates'] == nearest_parcel['coordinates']:
                if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                    function_2()
                elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                    function_1()
                elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                    function_4()
                elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                    function_3()
                else:
                    function_6()
        
[12]
Executable: False
Description: The agent's short-term goal is to deliver the parcel it's currently carrying to the nearest delivery cell, while avoiding non-walkable cells, and using the key to open any doors if needed.
        def function_12():
            global belief_set
            coordinates = belief_set['agent']['coordinates']
            parcels = belief_set['parcel']
            if len(parcels) > 0:
                parcel = parcels[list(parcels.keys())[0]]
                if parcel['carried_by_id'] == 1:
                    if coordinates[0] < 2:
                        function_2()
                    elif coordinates[0] > 2:
                        function_1()
                    elif coordinates[1] < 1:
                        function_4()
                    elif coordinates[1] > 1:
                        function_3()
                    else:
                        function_6()
            elif coordinates[0] < 2:
                function_2()
            elif coordinates[0] > 2:
                function_1()
            elif coordinates[1] < 1:
                function_4()
            elif coordinates[1] > 1:
                function_3()
            else:
                function_5()
        
[13]
Executable: False
Description: The short term goal is to navigate the agent towards the nearest delivery cell while avoiding non-walkable cells, and deliver the parcel.
        def function_13():
            global belief_set
            agent_coords = belief_set['agent']['coordinates']
            delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map'
                ]['grid'] if 'delivery' in cell['cell_type']]
            destination = min(delivery_cells, key=lambda cell: abs(cell[0] -
                agent_coords[0]) + abs(cell[1] - agent_coords[1]))
            while agent_coords != destination:
                if agent_coords[0] > destination[0]:
                    function_1()
                elif agent_coords[0] < destination[0]:
                    function_2()
                if agent_coords[1] > destination[1]:
                    function_3()
                elif agent_coords[1] < destination[1]:
                    function_4()
            function_6()
        
[14]
Executable: True
Description: The short term goal is to navigate the agent to the delivery cell while carrying the parcel and then put down the parcel in the delivery cell.
        def function_14():
            global belief_set
            agent_coords = belief_set['agent']['coordinates']
            parcel_coords = belief_set['parcel'][1]['coordinates']
            delivery_coords = [cell['cell_coordinates'] for cell in belief_set[
                'map']['grid'] if cell['cell_type'] in ['delivery_cell',
                'double_delivery_cell']][0]
            while agent_coords != delivery_coords:
                if agent_coords[0] < delivery_coords[0]:
                    function_2()
                    agent_coords[0] += 1
                elif agent_coords[0] > delivery_coords[0]:
                    function_1()
                    agent_coords[0] -= 1
                elif agent_coords[1] < delivery_coords[1]:
                    function_4()
                    agent_coords[1] += 1
                elif agent_coords[1] > delivery_coords[1]:
                    function_3()
                    agent_coords[1] -= 1
            function_6()
        
