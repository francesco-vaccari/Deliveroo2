
Desire 1: The agent's long term goal is to efficiently collect all parcels from the spawn points and deliver them to the appropriate delivery cells, while simultaneously navigating around non-walkable cells and unlocking any necessary doors using keys.
    Intention ID: [7]
    Executable: True
    Description: The short term goal is to navigate the agent towards the parcel spawn point and pick up the parcel.
                def function_7():
                    global belief_set
                    spawn_point = [cell['cell_coordinates'] for cell in belief_set['map'][
                        'grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    agent_coordinates = belief_set['agent']['coordinates']
                    while agent_coordinates != spawn_point:
                        if agent_coordinates[0] > spawn_point[0]:
                            function_1()
                        elif agent_coordinates[0] < spawn_point[0]:
                            function_2()
                        elif agent_coordinates[1] > spawn_point[1]:
                            function_3()
                        elif agent_coordinates[1] < spawn_point[1]:
                            function_4()
                        agent_coordinates = belief_set['agent']['coordinates']
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The agent's short term goal is to navigate towards the delivery cell and drop off the carried parcels.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent']['coordinates']
                    delivery_cell_coordinates = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] in ['delivery_cell',
                        'double_delivery_cell']][0]
                    while agent_coordinates[0] < delivery_cell_coordinates[0]:
                        function_2()
                        agent_coordinates[0] += 1
                    while agent_coordinates[0] > delivery_cell_coordinates[0]:
                        function_1()
                        agent_coordinates[0] -= 1
                    while agent_coordinates[1] < delivery_cell_coordinates[1]:
                        function_4()
                        agent_coordinates[1] += 1
                    while agent_coordinates[1] > delivery_cell_coordinates[1]:
                        function_3()
                        agent_coordinates[1] -= 1
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The short term goal of the agent is to navigate towards the delivery cell and drop off the parcel.
                def function_9():
                    global belief_set
                    agent_location = belief_set['agent']['coordinates']
                    parcel_location = belief_set['parcel'][1]['coordinates']
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if 'delivery' in cell['cell_type']][0]
                    if agent_location[0] < delivery_location[0]:
                        function_2()
                    elif agent_location[0] > delivery_location[0]:
                        function_1()
                    elif agent_location[1] < delivery_location[1]:
                        function_4()
                    elif agent_location[1] > delivery_location[1]:
                        function_3()
                    else:
                        function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the correct delivery cell and drop off the parcel it is carrying.
                def function_10():
                    global belief_set
                    agent = belief_set['agent']
                    parcels = belief_set['parcel']
                    map = belief_set['map']['grid']
                    for parcel in parcels.values():
                        if parcel['carried_by_id'] == agent['id']:
                            for cell in map:
                                if cell['cell_type'] in ['delivery_cell',
                                    'double_delivery_cell'] and agent['coordinates'] != cell[
                                    'cell_coordinates']:
                                    if cell['cell_coordinates'][0] < agent['coordinates'][0]:
                                        function_1()
                                    elif cell['cell_coordinates'][0] > agent['coordinates'][0]:
                                        function_2()
                                    elif cell['cell_coordinates'][1] < agent['coordinates'][1]:
                                        function_3()
                                    elif cell['cell_coordinates'][1] > agent['coordinates'][1]:
                                        function_4()
                            if agent['coordinates'] == cell['cell_coordinates']:
                                function_6()
                                break
                
Executable: False
Trigger function:
None


Desire 2: The agent should aim to collect and deliver as many parcels as possible while avoiding non-walkable cells and efficiently managing the key to open the door when needed.
    Intention ID: [11]
    Executable: False
    Description: The short term goal is to navigate the agent towards the nearest parcel, pick it up and then deliver it to the nearest delivery cell.
                def function_11():
                    global belief_set
                    agent = belief_set['agent']
                    parcels = belief_set['parcel']
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] in ['double_delivery_cell', 'delivery_cell']][0]
                    nearest_parcel = min(parcels.values(), key=lambda parcel: abs(parcel[
                        'coordinates'][0] - agent['coordinates'][0]) + abs(parcel[
                        'coordinates'][1] - agent['coordinates'][1]))
                    if agent['coordinates'][0] < nearest_parcel['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > nearest_parcel['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < nearest_parcel['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > nearest_parcel['coordinates'][1]:
                        function_3()
                    else:
                        function_5()
                    if agent['coordinates'] == nearest_parcel['coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        else:
                            function_6()
                
    Intention ID: [12]
    Executable: False
    Description: The agent's short-term goal is to deliver the parcel it's currently carrying to the nearest delivery cell, while avoiding non-walkable cells, and using the key to open any doors if needed.
                def function_12():
                    global belief_set
                    coordinates = belief_set['agent']['coordinates']
                    parcels = belief_set['parcel']
                    if len(parcels) > 0:
                        parcel = parcels[list(parcels.keys())[0]]
                        if parcel['carried_by_id'] == 1:
                            if coordinates[0] < 2:
                                function_2()
                            elif coordinates[0] > 2:
                                function_1()
                            elif coordinates[1] < 1:
                                function_4()
                            elif coordinates[1] > 1:
                                function_3()
                            else:
                                function_6()
                    elif coordinates[0] < 2:
                        function_2()
                    elif coordinates[0] > 2:
                        function_1()
                    elif coordinates[1] < 1:
                        function_4()
                    elif coordinates[1] > 1:
                        function_3()
                    else:
                        function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to navigate the agent towards the nearest delivery cell while avoiding non-walkable cells, and deliver the parcel.
                def function_13():
                    global belief_set
                    agent_coords = belief_set['agent']['coordinates']
                    delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if 'delivery' in cell['cell_type']]
                    destination = min(delivery_cells, key=lambda cell: abs(cell[0] -
                        agent_coords[0]) + abs(cell[1] - agent_coords[1]))
                    while agent_coords != destination:
                        if agent_coords[0] > destination[0]:
                            function_1()
                        elif agent_coords[0] < destination[0]:
                            function_2()
                        if agent_coords[1] > destination[1]:
                            function_3()
                        elif agent_coords[1] < destination[1]:
                            function_4()
                    function_6()
                
Executable: False
Trigger function:
None


Desire 3: The agent's long term goal is to successfully carry and deliver all parcels to their respective delivery cells while efficiently navigating through the environment, avoiding non-walkable areas, and utilizing keys to unlock doors if present.
    Intention ID: [14]
    Executable: True
    Description: The short term goal is to navigate the agent to the delivery cell while carrying the parcel and then put down the parcel in the delivery cell.
                def function_14():
                    global belief_set
                    agent_coords = belief_set['agent']['coordinates']
                    parcel_coords = belief_set['parcel'][1]['coordinates']
                    delivery_coords = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] in ['delivery_cell',
                        'double_delivery_cell']][0]
                    while agent_coords != delivery_coords:
                        if agent_coords[0] < delivery_coords[0]:
                            function_2()
                            agent_coords[0] += 1
                        elif agent_coords[0] > delivery_coords[0]:
                            function_1()
                            agent_coords[0] -= 1
                        elif agent_coords[1] < delivery_coords[1]:
                            function_4()
                            agent_coords[1] += 1
                        elif agent_coords[1] > delivery_coords[1]:
                            function_3()
                            agent_coords[1] -= 1
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    if not belief_set['parcel']:
        return False
    agent_at_delivery = any(cell['cell_type'] in ['delivery_cell',
        'double_delivery_cell'] for cell in belief_set['map']['grid'] if 
        cell['cell_coordinates'] == belief_set['agent']['coordinates'])
    if agent_at_delivery and belief_set['agent']['parcels_carried_ids']:
        return True
    if not belief_set['agent']['parcels_carried_ids']:
        return True
    return False



