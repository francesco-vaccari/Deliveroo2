
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        
[7]
Executable: False
Description: The agent's short term goal is to move towards the key, pick it up, and then move towards the door to unlock it.
        def function_7():
            global belief_set
            agent = belief_set['agent']
            key = belief_set['keys'][1]
            door = belief_set['doors'][1]
            while agent['coordinates'] != key['coordinates']:
                if agent['coordinates'][0] < key['coordinates'][0]:
                    function_2()
                elif agent['coordinates'][0] > key['coordinates'][0]:
                    function_1()
                if agent['coordinates'][1] < key['coordinates'][1]:
                    function_4()
                elif agent['coordinates'][1] > key['coordinates'][1]:
                    function_3()
            function_5()
            while agent['coordinates'] != door['coordinates']:
                if agent['coordinates'][0] < door['coordinates'][0]:
                    function_2()
                elif agent['coordinates'][0] > door['coordinates'][0]:
                    function_1()
                if agent['coordinates'][1] < door['coordinates'][1]:
                    function_4()
                elif agent['coordinates'][1] > door['coordinates'][1]:
                    function_3()
            function_5()
        
[8]
Executable: False
Description: The short term goal is for the agent to move towards the key's location, pick it up, then move towards the door's location and unlock it.
        def function_8():
            global belief_set
            agent = belief_set['agent']
            key = belief_set['keys'][1]
            door = belief_set['doors'][1]
            while agent['coordinates'] != key['coordinates']:
                if agent['coordinates'][0] < key['coordinates'][0]:
                    function_2()
                elif agent['coordinates'][0] > key['coordinates'][0]:
                    function_1()
                elif agent['coordinates'][1] < key['coordinates'][1]:
                    function_4()
                elif agent['coordinates'][1] > key['coordinates'][1]:
                    function_3()
            function_5()
            while agent['coordinates'] != door['coordinates']:
                if agent['coordinates'][0] < door['coordinates'][0]:
                    function_2()
                elif agent['coordinates'][0] > door['coordinates'][0]:
                    function_1()
                elif agent['coordinates'][1] < door['coordinates'][1]:
                    function_4()
                elif agent['coordinates'][1] > door['coordinates'][1]:
                    function_3()
            function_5()
        
[9]
Executable: False
Description: The agent's short term goal is to move towards the parcel and pick it up to increase its score.
        def function_9():
            global belief_set
            if belief_set['parcels'][1]['coordinates'][0] < belief_set['agent'][
                'coordinates'][0]:
                function_1()
            elif belief_set['parcels'][1]['coordinates'][0] > belief_set['agent'][
                'coordinates'][0]:
                function_2()
            elif belief_set['parcels'][1]['coordinates'][1] < belief_set['agent'][
                'coordinates'][1]:
                function_3()
            elif belief_set['parcels'][1]['coordinates'][1] > belief_set['agent'][
                'coordinates'][1]:
                function_4()
            else:
                function_5()
        
[10]
Executable: False
Description: The short-term goal is to move the agent to a parcel, pick it up, then move to the nearest delivery cell and drop the parcel.
        def function_10():
            global belief_set
            while belief_set['agent']['coordinates'] != belief_set['parcels'][1][
                'coordinates']:
                if belief_set['agent']['coordinates'][0] > belief_set['parcels'][1][
                    'coordinates'][0]:
                    function_1()
                elif belief_set['agent']['coordinates'][0] < belief_set['parcels'][1][
                    'coordinates'][0]:
                    function_2()
                elif belief_set['agent']['coordinates'][1] > belief_set['parcels'][1][
                    'coordinates'][1]:
                    function_3()
                elif belief_set['agent']['coordinates'][1] < belief_set['parcels'][1][
                    'coordinates'][1]:
                    function_4()
            function_5()
            for cell in belief_set['map']['grid']:
                if cell['cell_type'] in ['double_delivery_cell', 'delivery_cell']:
                    while belief_set['agent']['coordinates'] != cell['cell_coordinates'
                        ]:
                        if belief_set['agent']['coordinates'][0] > cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent']['coordinates'][0] < cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent']['coordinates'][1] > cell[
                            'cell_coordinates'][1]:
                            function_3()
                        elif belief_set['agent']['coordinates'][1] < cell[
                            'cell_coordinates'][1]:
                            function_4()
            function_6()
        
[11]
Executable: False
Description: The short term goal is for the agent to move to the cell to the left and deliver the parcel if it is a delivery cell.
        def function_11():
            global belief_set
            function_3()
            if belief_set['map']['grid'][belief_set['agent']['coordinates'][0]][
                belief_set['agent']['coordinates'][1]]['cell_type'
                ] == 'delivery_cell' or belief_set['map']['grid'][belief_set[
                'agent']['coordinates'][0]][belief_set['agent']['coordinates'][1]][
                'cell_type'] == 'double_delivery_cell':
                function_6()
        
[12]
Executable: False
Description: The agent's short term goal is to move to a parcel, pick it up, and then move to a delivery cell to deliver the parcel.
        def function_12():
            global belief_set
            agent = belief_set['agent']
            parcels = belief_set['parcels']
            for parcel_id, parcel_info in parcels.items():
                if parcel_info['coordinates'] == agent['coordinates']:
                    function_5()
                elif parcel_info['coordinates'][0] < agent['coordinates'][0]:
                    function_1()
                elif parcel_info['coordinates'][0] > agent['coordinates'][0]:
                    function_2()
                elif parcel_info['coordinates'][1] < agent['coordinates'][1]:
                    function_3()
                elif parcel_info['coordinates'][1] > agent['coordinates'][1]:
                    function_4()
            map_grid = belief_set['map']['grid']
            for cell in map_grid:
                if cell['cell_type'] == 'delivery_cell' or cell['cell_type'
                    ] == 'double_delivery_cell':
                    if cell['cell_coordinates'] == agent['coordinates']:
                        function_6()
                    elif cell['cell_coordinates'][0] < agent['coordinates'][0]:
                        function_1()
                    elif cell['cell_coordinates'][0] > agent['coordinates'][0]:
                        function_2()
                    elif cell['cell_coordinates'][1] < agent['coordinates'][1]:
                        function_3()
                    elif cell['cell_coordinates'][1] > agent['coordinates'][1]:
                        function_4()
        
[13]
Executable: False
Description: The short term goal is to deliver a parcel that the agent is currently carrying to a delivery cell
        def function_13():
            global belief_set
            agent_pos = belief_set['agent']['coordinates']
            parcels_carried = belief_set['agent']['parcels_carried_ids']
            if len(parcels_carried) > 0:
                for cell in belief_set['map']['grid']:
                    if cell['cell_type'] in ['delivery_cell', 'double_delivery_cell'
                        ] and cell['cell_coordinates'][0] > agent_pos[0]:
                        function_2()
                        break
                    elif cell['cell_type'] in ['delivery_cell', 'double_delivery_cell'
                        ] and cell['cell_coordinates'][0] < agent_pos[0]:
                        function_1()
                        break
                    elif cell['cell_type'] in ['delivery_cell', 'double_delivery_cell'
                        ] and cell['cell_coordinates'][1] > agent_pos[1]:
                        function_4()
                        break
                    elif cell['cell_type'] in ['delivery_cell', 'double_delivery_cell'
                        ] and cell['cell_coordinates'][1] < agent_pos[1]:
                        function_3()
                        break
                else:
                    function_6()
            else:
                return
        
[14]
Executable: False
Description: The agent's short term goal is to navigate to the delivery cell and deliver the parcel to increase the total score.
        def function_14():
            global belief_set
            agent_coordinates = belief_set['agent']['coordinates']
            delivery_cell_coordinates = [cell['cell_coordinates'] for cell in
                belief_set['map']['grid'] if cell['cell_type'] in ['delivery_cell',
                'double_delivery_cell']]
            for coordinate in delivery_cell_coordinates:
                if agent_coordinates[0] < coordinate[0]:
                    function_2()
                elif agent_coordinates[0] > coordinate[0]:
                    function_1()
                if agent_coordinates[1] < coordinate[1]:
                    function_4()
                elif agent_coordinates[1] > coordinate[1]:
                    function_3()
            function_6()
        
[15]
Executable: False
Description: The short term goal of the agent is to move towards the nearest parcel or key, pick it up and then move to the nearest delivery cell. The agent should ensure not to drop the parcel before reaching the delivery cell.
        def function_15():
            global belief_set
            agent_coordinates = belief_set['agent']['coordinates']
            parcel_coordinates = [parcel['coordinates'] for parcel in belief_set[
                'parcels'].values() if parcel['carried_by_id'] is None]
            key_coordinates = [key['coordinates'] for key in belief_set['keys'].
                values() if key['carried_by_id'] is None]
            nearest_coordinates = min(parcel_coordinates + key_coordinates, key=lambda
                c: abs(c[0] - agent_coordinates[0]) + abs(c[1] - agent_coordinates[1]))
            if agent_coordinates != nearest_coordinates:
                if nearest_coordinates[0] > agent_coordinates[0]:
                    function_2()
                elif nearest_coordinates[0] < agent_coordinates[0]:
                    function_1()
                elif nearest_coordinates[1] > agent_coordinates[1]:
                    function_4()
                else:
                    function_3()
            else:
                function_5()
                delivery_cell_coordinates = [cell['cell_coordinates'] for cell in
                    belief_set['map']['grid'] if 'delivery' in cell['cell_type']]
                nearest_delivery_cell_coordinates = min(delivery_cell_coordinates,
                    key=lambda c: abs(c[0] - agent_coordinates[0]) + abs(c[1] -
                    agent_coordinates[1]))
                if nearest_delivery_cell_coordinates[0] > agent_coordinates[0]:
                    function_2()
                elif nearest_delivery_cell_coordinates[0] < agent_coordinates[0]:
                    function_1()
                elif nearest_delivery_cell_coordinates[1] > agent_coordinates[1]:
                    function_4()
                else:
                    function_3()
        
[16]
Executable: True
Description: The short term goal is to move the agent to the nearest walkable cell without any objects, in order to explore the map.
        def function_16():
            global belief_set
            current_position = belief_set['agent']['coordinates']
            map_grid = belief_set['map']['grid']
            walkable_cells = [cell['cell_coordinates'] for cell in map_grid if cell
                ['cell_type'] == 'walkable']
            nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[0
                ] - current_position[0]) + abs(cell[1] - current_position[1]))
            if nearest_walkable_cell[0] < current_position[0]:
                function_1()
            elif nearest_walkable_cell[0] > current_position[0]:
                function_2()
            elif nearest_walkable_cell[1] < current_position[1]:
                function_3()
            elif nearest_walkable_cell[1] > current_position[1]:
                function_4()
        
[17]
Executable: True
Description: The agent's short term goal is to deliver the parcel it is currently carrying to the nearest delivery cell.
        def function_17():
            global belief_set
            delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map'
                ]['grid'] if 'delivery' in cell['cell_type']]
            agent_position = belief_set['agent']['coordinates']
            delivery_cells.sort(key=lambda x: abs(x[0] - agent_position[0]) + abs(x
                [1] - agent_position[1]))
            nearest_delivery_cell = delivery_cells[0]
            while belief_set['agent']['coordinates'] != nearest_delivery_cell:
                if belief_set['agent']['coordinates'][0] < nearest_delivery_cell[0]:
                    function_2()
                elif belief_set['agent']['coordinates'][0] > nearest_delivery_cell[0]:
                    function_1()
                elif belief_set['agent']['coordinates'][1] < nearest_delivery_cell[1]:
                    function_4()
                elif belief_set['agent']['coordinates'][1] > nearest_delivery_cell[1]:
                    function_3()
            function_6()
        
