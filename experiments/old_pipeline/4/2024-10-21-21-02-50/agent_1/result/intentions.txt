
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        
[7]
Executable: False
Description: The short term goal is to move the agent towards the nearest key on the map, picking it up when the agent reaches the key's coordinates.
        def function_7():
            global belief_set
            agent = belief_set['agents'][1]
            key = belief_set['keys'][1]
            if agent['coordinates'] == key['coordinates']:
                function_5()
            elif agent['coordinates'][0] > key['coordinates'][0]:
                function_1()
            elif agent['coordinates'][0] < key['coordinates'][0]:
                function_2()
            elif agent['coordinates'][1] > key['coordinates'][1]:
                function_3()
            elif agent['coordinates'][1] < key['coordinates'][1]:
                function_4()
            else:
                pass
        
[8]
Executable: True
Description: The agent's short term goal is to move to the location of the key and pick it up to unlock doors in future.
        def function_8():
            global belief_set
            agent_location = belief_set['agents'][1]['coordinates']
            key_location = belief_set['keys'][1]['coordinates']
            while agent_location != key_location:
                if agent_location[0] < key_location[0]:
                    function_2()
                elif agent_location[0] > key_location[0]:
                    function_1()
                elif agent_location[1] < key_location[1]:
                    function_4()
                elif agent_location[1] > key_location[1]:
                    function_3()
                agent_location = belief_set['agents'][1]['coordinates']
            function_5()
        
[9]
Executable: False
Description: The agent's short term goal is to move towards the nearest parcel, pick it up and hold it until it reaches the delivery cell.
        def function_9():
            global belief_set
            while belief_set['agents'][1]['coordinates'] != belief_set['parcels'][1][
                'coordinates']:
                if belief_set['agents'][1]['coordinates'][0] < belief_set['parcels'][1
                    ]['coordinates'][0]:
                    function_2()
                elif belief_set['agents'][1]['coordinates'][0] > belief_set['parcels'][
                    1]['coordinates'][0]:
                    function_1()
                if belief_set['agents'][1]['coordinates'][1] < belief_set['parcels'][1
                    ]['coordinates'][1]:
                    function_4()
                elif belief_set['agents'][1]['coordinates'][1] > belief_set['parcels'][
                    1]['coordinates'][1]:
                    function_3()
            function_5()
        
[10]
Executable: False
Description: The agent's short term goal is to navigate to the nearest delivery cell and deliver the parcels it's carrying.
        def function_10():
            global belief_set
            agent = belief_set['agents'][1]
            delivery_cells = [cell for cell in belief_set['map']['grid'] if 
                'delivery' in cell['cell_type']]
            closest_delivery_cell = min(delivery_cells, key=lambda cell: abs(cell[
                'cell_coordinates'][0] - agent['coordinates'][0]) + abs(cell[
                'cell_coordinates'][1] - agent['coordinates'][1]))
            while agent['coordinates'] != closest_delivery_cell['cell_coordinates']:
                if agent['coordinates'][0] < closest_delivery_cell['cell_coordinates'][
                    0]:
                    function_2()
                elif agent['coordinates'][0] > closest_delivery_cell['cell_coordinates'
                    ][0]:
                    function_1()
                if agent['coordinates'][1] < closest_delivery_cell['cell_coordinates'][
                    1]:
                    function_4()
                elif agent['coordinates'][1] > closest_delivery_cell['cell_coordinates'
                    ][1]:
                    function_3()
            function_6()
        
[11]
Executable: True
Description: The agent's short term goal is to move towards the delivery cell, avoiding non-walkable cells and unlocking doors as necessary.
        def function_11():
            global belief_set
            agent = belief_set['agents'][1]
            delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[
                'cell_type'] in ['delivery_cell', 'double_delivery_cell']]
            for cell in delivery_cells:
                if agent['coordinates'][0] < cell['cell_coordinates'][0]:
                    function_2()
                elif agent['coordinates'][0] > cell['cell_coordinates'][0]:
                    function_1()
                elif agent['coordinates'][1] < cell['cell_coordinates'][1]:
                    function_4()
                elif agent['coordinates'][1] > cell['cell_coordinates'][1]:
                    function_3()
            function_6()
        
