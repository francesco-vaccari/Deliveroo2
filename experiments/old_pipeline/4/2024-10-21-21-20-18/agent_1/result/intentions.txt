
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        
[7]
Executable: False
Description: The short term goal is to move the agent towards the key, pick it up, and then move towards the door to unlock it.
        def function_7():
            global belief_set
            agent = belief_set['agent']
            key = belief_set['key'][1]
            door = belief_set['door'][1]
            while agent['coordinates'] != key['coordinates']:
                if agent['coordinates'][0] < key['coordinates'][0]:
                    function_2()
                elif agent['coordinates'][0] > key['coordinates'][0]:
                    function_1()
                elif agent['coordinates'][1] < key['coordinates'][1]:
                    function_4()
                else:
                    function_3()
            function_5()
            while agent['coordinates'] != door['coordinates']:
                if agent['coordinates'][0] < door['coordinates'][0]:
                    function_2()
                elif agent['coordinates'][0] > door['coordinates'][0]:
                    function_1()
                elif agent['coordinates'][1] < door['coordinates'][1]:
                    function_4()
                else:
                    function_3()
            function_5()
        
[8]
Executable: False
Description: The short term goal is for the agent to pick up a nearby key and a parcel if they are present in the same cell.
        def function_8():
            global belief_set
            agent = belief_set['agent']
            parcel = belief_set['parcel']
            key = belief_set['key']
            for parcel_id, parcel_info in parcel.items():
                if parcel_info['coordinates'] == agent['coordinates']:
                    function_5()
            for key_id, key_info in key.items():
                if key_info['coordinates'] == agent['coordinates']:
                    function_5()
        
[9]
Executable: False
Description: The agent's short term goal is to navigate towards the nearest parcel, pick it up, and deliver it to the nearest delivery cell.
        def function_9():
            global belief_set
            agent = belief_set['agent']
            parcels = belief_set['parcel']
            delivery_cells = [cell for cell in belief_set['map']['grid'] if 
                'delivery' in cell['cell_type']]
            for parcel in parcels.values():
                if parcel['carried_by_id'] is None and parcel['coordinates'] != agent[
                    'coordinates']:
                    if parcel['coordinates'][0] < agent['coordinates'][0]:
                        function_1()
                    elif parcel['coordinates'][0] > agent['coordinates'][0]:
                        function_2()
                    elif parcel['coordinates'][1] < agent['coordinates'][1]:
                        function_3()
                    elif parcel['coordinates'][1] > agent['coordinates'][1]:
                        function_4()
                elif parcel['carried_by_id'] == agent['id']:
                    nearest_delivery_cell = min(delivery_cells, key=lambda cell: 
                        abs(cell['cell_coordinates'][0] - agent['coordinates'][0]) +
                        abs(cell['cell_coordinates'][1] - agent['coordinates'][1]))
                    if nearest_delivery_cell['cell_coordinates'][0] < agent[
                        'coordinates'][0]:
                        function_1()
                    elif nearest_delivery_cell['cell_coordinates'][0] > agent[
                        'coordinates'][0]:
                        function_2()
                    elif nearest_delivery_cell['cell_coordinates'][1] < agent[
                        'coordinates'][1]:
                        function_3()
                    elif nearest_delivery_cell['cell_coordinates'][1] > agent[
                        'coordinates'][1]:
                        function_4()
                function_5() if parcel['coordinates'] == agent['coordinates'
                    ] and parcel['carried_by_id'] is None else function_6(
                    ) if nearest_delivery_cell['cell_coordinates'] == agent[
                    'coordinates'] else None
        
[10]
Executable: True
Description: The agent's short-term goal is to pick up a parcel if it is at the same coordinates as the parcel. If not, the agent moves to reach the parcel.
        def function_10():
            global belief_set
            agent_coords = belief_set['agent']['coordinates']
            parcel_coords = belief_set['parcel'][1]['coordinates']
            if agent_coords == parcel_coords:
                function_5()
            else:
                if agent_coords[0] < parcel_coords[0]:
                    function_2()
                elif agent_coords[0] > parcel_coords[0]:
                    function_1()
                if agent_coords[1] < parcel_coords[1]:
                    function_4()
                elif agent_coords[1] > parcel_coords[1]:
                    function_3()
        
[11]
Executable: False
Description: The agent's short-term goal is to move towards the delivery cell while carrying the parcel and avoiding non-walkable cells. If a door is on the path, the agent should use the key to open it.
        def function_11():
            global belief_set
            agent = belief_set['agent']
            grid = belief_set['map']['grid']
            delivery_cells = [cell for cell in grid if cell['cell_type'] in [
                'delivery_cell', 'double_delivery_cell']]
            for cell in delivery_cells:
                if cell['cell_coordinates'][0] > agent['coordinates'][0]:
                    function_2()
                elif cell['cell_coordinates'][0] < agent['coordinates'][0]:
                    function_1()
                elif cell['cell_coordinates'][1] > agent['coordinates'][1]:
                    function_4()
                elif cell['cell_coordinates'][1] < agent['coordinates'][1]:
                    function_3()
                else:
                    function_6()
        
[12]
Executable: False
Description: The agent's short-term goal is to deliver a parcel to the nearest delivery cell, navigating around non-walkable cells and using a key to open doors if necessary.
        def function_12():
            global belief_set
            agent = belief_set['agent']
            parcels = belief_set['parcel']
            map_grid = belief_set['map']['grid']
            delivery_cells = [cell['cell_coordinates'] for cell in map_grid if cell
                ['cell_type'] in ['delivery_cell', 'double_delivery_cell']]
            min_distance = float('inf')
            nearest_delivery_cell = None
            for cell in delivery_cells:
                distance = abs(agent['coordinates'][0] - cell[0]) + abs(agent[
                    'coordinates'][1] - cell[1])
                if distance < min_distance:
                    min_distance = distance
                    nearest_delivery_cell = cell
            while agent['coordinates'] != nearest_delivery_cell:
                if agent['coordinates'][0] < nearest_delivery_cell[0]:
                    function_2()
                elif agent['coordinates'][0] > nearest_delivery_cell[0]:
                    function_1()
                if agent['coordinates'][1] < nearest_delivery_cell[1]:
                    function_4()
                elif agent['coordinates'][1] > nearest_delivery_cell[1]:
                    function_3()
            function_6()
        
[13]
Executable: False
Description: The short-term goal for the agent is to deliver the parcel it is carrying to the right delivery cell, while avoiding non-walkable cells and using keys to open doors when necessary.
        def function_13():
            global belief_set
            agent = belief_set['agent']
            parcel = belief_set['parcel'][1]
            if agent['coordinates'] == parcel['coordinates']:
                function_5()
            delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[
                'cell_type'] in ['delivery_cell', 'double_delivery_cell']]
            for cell in delivery_cells:
                if agent['coordinates'][0] < cell['cell_coordinates'][0]:
                    while agent['coordinates'][0] != cell['cell_coordinates'][0]:
                        function_2()
                elif agent['coordinates'][0] > cell['cell_coordinates'][0]:
                    while agent['coordinates'][0] != cell['cell_coordinates'][0]:
                        function_1()
                if agent['coordinates'][1] < cell['cell_coordinates'][1]:
                    while agent['coordinates'][1] != cell['cell_coordinates'][1]:
                        function_4()
                elif agent['coordinates'][1] > cell['cell_coordinates'][1]:
                    while agent['coordinates'][1] != cell['cell_coordinates'][1]:
                        function_3()
            function_6()
        
[14]
Executable: True
Description: The agent's short term goal should be to deliver the parcel in its possession to the nearest delivery cell by navigating through the walkable cells.
        def function_14():
            global belief_set
            agent = belief_set['agent']
            map_grid = belief_set['map']['grid']
            delivery_cells = [cell for cell in map_grid if cell['cell_type'] in [
                'delivery_cell', 'double_delivery_cell']]
            nearest_delivery_cell = min(delivery_cells, key=lambda cell: abs(cell[
                'cell_coordinates'][0] - agent['coordinates'][0]) + abs(cell[
                'cell_coordinates'][1] - agent['coordinates'][1]))
            while agent['coordinates'] != nearest_delivery_cell['cell_coordinates']:
                if agent['coordinates'][0] < nearest_delivery_cell['cell_coordinates'][
                    0]:
                    function_2()
                elif agent['coordinates'][0] > nearest_delivery_cell['cell_coordinates'
                    ][0]:
                    function_1()
                elif agent['coordinates'][1] < nearest_delivery_cell['cell_coordinates'
                    ][1]:
                    function_4()
                elif agent['coordinates'][1] > nearest_delivery_cell['cell_coordinates'
                    ][1]:
                    function_3()
            function_6()
        
