2024-11-07 18:30:28,138 - INFO - Loading actions from agent_dir/actions.json ...
2024-11-07 18:30:28,182 - INFO - Actions loaded: 
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        

2024-11-07 18:31:06,817 - INFO - Desire added: 1. Desires:
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
Executable: False
Trigger function:
None



2024-11-07 18:31:13,559 - INFO - Testing intention 
def function():
    global belief_set
    agent_coordinates = belief_set['agent'][1]['coordinates']
    parcel_coordinates = belief_set['parcels'][1]['coordinates']
    while agent_coordinates != parcel_coordinates:
        if agent_coordinates[0] < parcel_coordinates[0]:
            function_2()
            agent_coordinates[0] += 1
        elif agent_coordinates[0] > parcel_coordinates[0]:
            function_1()
            agent_coordinates[0] -= 1
        elif agent_coordinates[1] < parcel_coordinates[1]:
            function_4()
            agent_coordinates[1] += 1
        elif agent_coordinates[1] > parcel_coordinates[1]:
            function_3()
            agent_coordinates[1] -= 1
    function_5()
2024-11-07 18:31:13,578 - INFO - The intention is valid.
2024-11-07 18:31:13,603 - INFO - Intention added to desire 1
2024-11-07 18:31:13,641 - INFO - Running intention 7 ...
2024-11-07 18:31:13,886 - INFO - Belief set thread started ...
2024-11-07 18:31:13,910 - INFO - Plan thread started ...
2024-11-07 18:31:13,911 - INFO - Started subprocess...
2024-11-07 18:31:13,911 - INFO - Belief set before intention 7 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 100}}, 'parcels': {1: {'id': 1, 'coordinates': [2, 3], 'score': 15, 'carried_by_id': None}, 2: {'id': 2, 'coordinates': [2, 3], 'score': 42, 'carried_by_id': None}}}
2024-11-07 18:31:14,272 - INFO - Executing action action_2 ...
2024-11-07 18:31:14,557 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 99}}]
2024-11-07 18:31:14,957 - INFO - Executing action action_2 ...
2024-11-07 18:31:15,175 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 0], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 98}}]
2024-11-07 18:31:15,506 - INFO - Executing action action_4 ...
2024-11-07 18:31:15,738 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 1], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 97}}]
2024-11-07 18:31:16,005 - INFO - Executing action action_4 ...
2024-11-07 18:31:16,254 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 96}}]
2024-11-07 18:31:16,637 - INFO - Executing action action_4 ...
2024-11-07 18:31:16,912 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 3], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 95}}]
2024-11-07 18:31:17,255 - INFO - Executing action action_5 ...
2024-11-07 18:31:17,469 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [2, 3], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [2, 3], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 3], 'parcels_carried_ids': [1, 2], 'has_key': False, 'score': 0, 'energy': 94}}]
2024-11-07 18:31:17,793 - INFO - Plan thread terminated.
2024-11-07 18:31:17,830 - INFO - Belief set thread terminated.
2024-11-07 18:31:17,862 - INFO - Intention 7 execution has finished. Threads and subprocess terminated. Plan: ['action_2', 'action_2', 'action_4', 'action_4', 'action_4', 'action_5']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 99}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 0], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 98}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 1], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 97}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 96}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 3], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 95}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [2, 3], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [2, 3], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 3], 'parcels_carried_ids': [1, 2], 'has_key': False, 'score': 0, 'energy': 94}}]]
2024-11-07 18:31:17,862 - INFO - Belief set after intention 7 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 3], 'parcels_carried_ids': [1, 2], 'has_key': False, 'score': 0, 'energy': 94}}, 'parcels': {1: {'id': 1, 'coordinates': [2, 3], 'score': 15, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [2, 3], 'score': 42, 'carried_by_id': 1}}}
2024-11-07 18:31:29,849 - INFO - Testing intention 
def function():
    global belief_set
    agent_coordinates = belief_set['agent'][1]['coordinates']
    if belief_set['agent'][1]['parcels_carried_ids']:
        # If the agent has parcels, it needs to move to a cell where it can deliver them
        if 'delivery' in [cell['cell_type'] for cell in belief_set['map']['grid'] if cell['cell_coordinates'] == agent_coordinates]:
            # If the agent is in a cell where it can deliver the parcels, it puts them all down
            function_6()
        else:
            # If the agent is not in a cell where it can deliver the parcels, it moves towards one
            if agent_coordinates[0] > 0:
                function_1()
            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                function_2()
            if agent_coordinates[1] > 0:
                function_3()
            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                function_4()
    else:
        # If the agent does not have any parcels, it moves towards the nearest one to pick it up
        function_7()
2024-11-07 18:31:29,850 - INFO - The intention is valid.
2024-11-07 18:31:29,875 - INFO - Intention added to desire 1
2024-11-07 18:31:29,887 - INFO - Running intention 8 ...
2024-11-07 18:31:30,013 - INFO - Belief set thread started ...
2024-11-07 18:31:30,026 - INFO - Plan thread started ...
2024-11-07 18:31:30,026 - INFO - Started subprocess...
2024-11-07 18:31:30,026 - INFO - Belief set before intention 8 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 3], 'parcels_carried_ids': [1, 2], 'has_key': False, 'score': 0, 'energy': 94}}, 'parcels': {1: {'id': 1, 'coordinates': [2, 3], 'score': 15, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [2, 3], 'score': 42, 'carried_by_id': 1}}}
2024-11-07 18:31:30,283 - INFO - Executing action action_1 ...
2024-11-07 18:31:30,489 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [1, 2], 'has_key': False, 'score': 0, 'energy': 93}}]
2024-11-07 18:31:30,870 - INFO - Executing action action_3 ...
2024-11-07 18:31:31,102 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'has_key': False, 'score': 0, 'energy': 92}}]
2024-11-07 18:31:31,459 - INFO - Plan thread terminated.
2024-11-07 18:31:31,484 - INFO - Belief set thread terminated.
2024-11-07 18:31:31,516 - INFO - Intention 8 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [1, 2], 'has_key': False, 'score': 0, 'energy': 93}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'has_key': False, 'score': 0, 'energy': 92}}]]
2024-11-07 18:31:31,516 - INFO - Belief set after intention 8 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'has_key': False, 'score': 0, 'energy': 92}}, 'parcels': {1: {'id': 1, 'coordinates': [1, 2], 'score': 15, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [1, 2], 'score': 42, 'carried_by_id': 1}}}
2024-11-07 18:31:36,026 - INFO - Invalidating intention 8 ...
2024-11-07 18:31:44,826 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    parcels = belief_set['parcels']
    carried_parcels = [parcels[parcel_id] for parcel_id in agent['parcels_carried_ids']]
    if not carried_parcels:
        return
    current_coordinates = agent['coordinates']
    target_coordinates = find_closest_walkable_cell(current_coordinates, belief_set['map']['grid'])
    while current_coordinates != target_coordinates:
        if current_coordinates[0] < target_coordinates[0]:
            function_2()
        elif current_coordinates[0] > target_coordinates[0]:
            function_1()
        if current_coordinates[1] < target_coordinates[1]:
            function_4()
        elif current_coordinates[1] > target_coordinates[1]:
            function_3()
        current_coordinates = agent['coordinates']
    function_6()
2024-11-07 18:31:44,826 - INFO - The intention is valid.
2024-11-07 18:31:44,827 - INFO - Intention added to desire 1
2024-11-07 18:31:44,827 - INFO - Running intention 9 ...
2024-11-07 18:31:45,011 - INFO - Belief set thread started ...
2024-11-07 18:31:45,018 - INFO - Plan thread started ...
2024-11-07 18:31:45,024 - INFO - Started subprocess...
2024-11-07 18:31:45,037 - INFO - Belief set before intention 9 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'has_key': False, 'score': 0, 'energy': 92}}, 'parcels': {1: {'id': 1, 'coordinates': [1, 2], 'score': 15, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [1, 2], 'score': 42, 'carried_by_id': 1}}}
2024-11-07 18:32:00,127 - ERROR - Error during intention 9 execution. Intention 9 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-07 18:32:00,146 - INFO - Plan thread terminated.
2024-11-07 18:32:00,163 - INFO - Belief set thread terminated.
2024-11-07 18:32:00,238 - INFO - Intention 9 execution has finished. Threads and subprocess terminated. Plan: []. Events: []
2024-11-07 18:32:00,251 - INFO - Belief set after intention 9 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'has_key': False, 'score': 0, 'energy': 92}}, 'parcels': {1: {'id': 1, 'coordinates': [1, 2], 'score': 15, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [1, 2], 'score': 42, 'carried_by_id': 1}}}
2024-11-07 18:32:06,888 - INFO - Invalidating intention 9 ...
2024-11-07 18:32:19,648 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    parcels = belief_set['parcels']
    map = belief_set['map']['grid']
    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
    current_coordinates = agent['coordinates']

    def calculate_distance(cell):
        return abs(cell['cell_coordinates'][0] - current_coordinates[0]) + abs(cell['cell_coordinates'][1] - current_coordinates[1])

    nearest_walkable_cell = min(walkable_cells, key=calculate_distance)
    target_coordinates = nearest_walkable_cell['cell_coordinates']

    while agent['coordinates'] != target_coordinates:
        if agent['coordinates'][0] < target_coordinates[0]:
            function_2()
            if agent['coordinates'][0] != current_coordinates[0]:
                current_coordinates[0] += 1
            else:
                break
        elif agent['coordinates'][0] > target_coordinates[0]:
            function_1()
            if agent['coordinates'][0] != current_coordinates[0]:
                current_coordinates[0] -= 1
            else:
                break
        if agent['coordinates'][1] < target_coordinates[1]:
            function_4()
            if agent['coordinates'][1] != current_coordinates[1]:
                current_coordinates[1] += 1
            else:
                break
        elif agent['coordinates'][1] > target_coordinates[1]:
            function_3()
            if agent['coordinates'][1] != current_coordinates[1]:
                current_coordinates[1] -= 1
            else:
                break
    function_6()
2024-11-07 18:32:19,685 - ERROR - The intention is invalid. Error: The code contains more than one function definition.
2024-11-07 18:32:28,756 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    map = belief_set['map']['grid']
    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
    current_coordinates = agent['coordinates']
    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell['cell_coordinates'][0] - current_coordinates[0]) + abs(cell['cell_coordinates'][1] - current_coordinates[1]))
    target_coordinates = nearest_walkable_cell['cell_coordinates']
    while agent['coordinates'] != target_coordinates:
        if agent['coordinates'][0] < target_coordinates[0]:
            function_2()
            agent['coordinates'][0] += 1
        elif agent['coordinates'][0] > target_coordinates[0]:
            function_1()
            agent['coordinates'][0] -= 1
        if agent['coordinates'][1] < target_coordinates[1]:
            function_4()
            agent['coordinates'][1] += 1
        elif agent['coordinates'][1] > target_coordinates[1]:
            function_3()
            agent['coordinates'][1] -= 1
    function_6()
2024-11-07 18:32:28,756 - INFO - The intention is valid.
2024-11-07 18:32:28,782 - INFO - Intention added to desire 1
2024-11-07 18:32:28,838 - INFO - Running intention 10 ...
2024-11-07 18:32:29,064 - INFO - Belief set thread started ...
2024-11-07 18:32:29,070 - INFO - Plan thread started ...
2024-11-07 18:32:29,083 - INFO - Started subprocess...
2024-11-07 18:32:29,095 - INFO - Belief set before intention 10 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'has_key': False, 'score': 0, 'energy': 92}}, 'parcels': {1: {'id': 1, 'coordinates': [1, 2], 'score': 15, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [1, 2], 'score': 42, 'carried_by_id': 1}}}
2024-11-07 18:32:29,407 - INFO - Executing action action_6 ...
2024-11-07 18:32:29,643 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 15, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 42, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 91}}]
2024-11-07 18:32:30,014 - INFO - Plan thread terminated.
2024-11-07 18:32:30,027 - INFO - Belief set thread terminated.
2024-11-07 18:32:30,082 - INFO - Intention 10 execution has finished. Threads and subprocess terminated. Plan: ['action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 15, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 42, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 91}}]]
2024-11-07 18:32:30,107 - INFO - Belief set after intention 10 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 91}}, 'parcels': {1: {'id': 1, 'coordinates': [1, 2], 'score': 15, 'carried_by_id': None}, 2: {'id': 2, 'coordinates': [1, 2], 'score': 42, 'carried_by_id': None}}}
2024-11-07 18:32:34,418 - INFO - Invalidating intention 10 ...
2024-11-07 18:32:34,418 - INFO - Invalidating intention 1 ...
2024-11-07 18:32:34,418 - INFO - Intention 1 is a base action. It cannot be invalidated.
2024-11-07 18:32:34,430 - INFO - Invalidating intention 2 ...
2024-11-07 18:32:34,442 - INFO - Intention 2 is a base action. It cannot be invalidated.
2024-11-07 18:32:34,442 - INFO - Invalidating intention 3 ...
2024-11-07 18:32:34,442 - INFO - Intention 3 is a base action. It cannot be invalidated.
2024-11-07 18:32:34,442 - INFO - Invalidating intention 4 ...
2024-11-07 18:32:34,454 - INFO - Intention 4 is a base action. It cannot be invalidated.
2024-11-07 18:32:34,454 - INFO - Invalidating intention 6 ...
2024-11-07 18:32:34,454 - INFO - Intention 6 is a base action. It cannot be invalidated.
2024-11-07 18:32:51,127 - INFO - Desire added: 2. Desires:
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
Executable: False
Trigger function:
None



2024-11-07 18:33:06,564 - INFO - Testing intention 
def function():
    global belief_set
    # Determine the nearest parcel
    min_distance = float('inf')
    nearest_parcel = None
    for parcel in belief_set['parcels'].values():
        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1]['coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set['agent'][1]['coordinates'][1])
        if distance < min_distance:
            min_distance = distance
            nearest_parcel = parcel
    # Move towards the nearest parcel
    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates']:
        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel['coordinates'][0]:
            function_2()
        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel['coordinates'][0]:
            function_1()
        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel['coordinates'][1]:
            function_4()
        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel['coordinates'][1]:
            function_3()
    # Pick up the parcel
    function_5()
    # Move towards the delivery cell
    for cell in belief_set['map']['grid']:
        if cell['cell_type'] == 'delivery_cell':
            delivery_cell = cell
    while belief_set['agent'][1]['coordinates'] != delivery_cell['cell_coordinates']:
        if belief_set['agent'][1]['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
            function_2()
        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
            function_1()
        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
            function_4()
        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
            function_3()
    # Deliver the parcel
    function_6()
2024-11-07 18:33:06,578 - INFO - The intention is valid.
2024-11-07 18:33:06,585 - INFO - Intention added to desire 2
2024-11-07 18:33:06,592 - INFO - Running intention 11 ...
2024-11-07 18:33:06,854 - INFO - Belief set thread started ...
2024-11-07 18:33:06,866 - INFO - Plan thread started ...
2024-11-07 18:33:06,866 - INFO - Started subprocess...
2024-11-07 18:33:06,922 - INFO - Belief set before intention 11 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 91}}, 'parcels': {1: {'id': 1, 'coordinates': [1, 2], 'score': 15, 'carried_by_id': None}, 2: {'id': 2, 'coordinates': [1, 2], 'score': 42, 'carried_by_id': None}}}
2024-11-07 18:33:07,200 - INFO - Executing action action_5 ...
2024-11-07 18:33:07,438 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'has_key': False, 'score': 0, 'energy': 90}}]
2024-11-07 18:33:07,814 - INFO - Executing action action_1 ...
2024-11-07 18:33:08,049 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}}]
2024-11-07 18:33:08,394 - INFO - Executing action action_1 ...
2024-11-07 18:33:08,657 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:33:08,931 - INFO - Executing action action_6 ...
2024-11-07 18:33:09,179 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 88}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}]
2024-11-07 18:33:09,543 - INFO - Plan thread terminated.
2024-11-07 18:33:09,627 - INFO - Belief set thread terminated.
2024-11-07 18:33:09,634 - INFO - Intention 11 execution has finished. Threads and subprocess terminated. Plan: ['action_5', 'action_1', 'action_1', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'has_key': False, 'score': 0, 'energy': 90}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}}], [], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 88}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}]]
2024-11-07 18:33:09,640 - INFO - Belief set after intention 11 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 88}}, 'parcels': {}}
2024-11-07 18:33:15,963 - INFO - Testing trigger function 
def should_pursue_goal(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:  # Agent needs to have sufficient energy
        return False
    if parcels:  # Check if there are still parcels to be picked up
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:  # If there is a parcel not picked up yet
                return True
    return False
2024-11-07 18:33:15,964 - INFO - The trigger function is valid.
2024-11-07 18:33:15,964 - INFO - Trigger function added to desire 2.
2024-11-07 18:33:38,746 - INFO - Desire added: 3. Desires:
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: True
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
Executable: False
Trigger function:
None



2024-11-07 18:33:44,365 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    battery = belief_set['batteries'][1]
    while agent['coordinates'] != battery['coordinates']:
        if agent['coordinates'][0] < battery['coordinates'][0]:
            function_2()
        elif agent['coordinates'][0] > battery['coordinates'][0]:
            function_1()
        if agent['coordinates'][1] < battery['coordinates'][1]:
            function_4()
        elif agent['coordinates'][1] > battery['coordinates'][1]:
            function_3()
    function_5()
2024-11-07 18:33:44,366 - INFO - The intention is valid.
2024-11-07 18:33:44,385 - INFO - Intention added to desire 3
2024-11-07 18:33:44,397 - INFO - Running intention 12 ...
2024-11-07 18:33:44,522 - INFO - Belief set thread started ...
2024-11-07 18:33:44,540 - INFO - Plan thread started ...
2024-11-07 18:33:44,552 - INFO - Started subprocess...
2024-11-07 18:33:44,590 - INFO - Belief set before intention 12 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 88}}, 'parcels': {}, 'batteries': {1: {'coordinates': [2, 2]}}}
2024-11-07 18:33:44,881 - INFO - Executing action action_2 ...
2024-11-07 18:33:45,094 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 87}}]
2024-11-07 18:33:45,380 - INFO - Executing action action_2 ...
2024-11-07 18:33:45,649 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 86}}]
2024-11-07 18:33:46,011 - INFO - Executing action action_2 ...
2024-11-07 18:33:46,318 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 85}}]
2024-11-07 18:33:46,607 - INFO - Executing action action_2 ...
2024-11-07 18:33:46,826 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:47,118 - INFO - Executing action action_2 ...
2024-11-07 18:33:47,362 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:47,680 - INFO - Executing action action_2 ...
2024-11-07 18:33:47,899 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:48,337 - INFO - Executing action action_2 ...
2024-11-07 18:33:48,569 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:48,895 - INFO - Executing action action_2 ...
2024-11-07 18:33:49,115 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:49,452 - INFO - Executing action action_2 ...
2024-11-07 18:33:49,683 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:50,076 - INFO - Executing action action_2 ...
2024-11-07 18:33:50,308 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:50,614 - INFO - Executing action action_2 ...
2024-11-07 18:33:50,850 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:51,154 - INFO - Executing action action_2 ...
2024-11-07 18:33:51,377 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:51,671 - INFO - Executing action action_2 ...
2024-11-07 18:33:51,882 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:52,237 - INFO - Executing action action_2 ...
2024-11-07 18:33:52,462 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:52,773 - INFO - Executing action action_2 ...
2024-11-07 18:33:53,006 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:53,350 - INFO - Executing action action_2 ...
2024-11-07 18:33:53,603 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:53,901 - INFO - Executing action action_2 ...
2024-11-07 18:33:54,121 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:54,531 - INFO - Executing action action_2 ...
2024-11-07 18:33:54,736 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:55,092 - INFO - Executing action action_2 ...
2024-11-07 18:33:55,309 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:55,657 - INFO - Executing action action_2 ...
2024-11-07 18:33:55,895 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:56,240 - INFO - Executing action action_2 ...
2024-11-07 18:33:56,477 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:56,796 - INFO - Executing action action_2 ...
2024-11-07 18:33:57,025 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:57,348 - INFO - Executing action action_2 ...
2024-11-07 18:33:57,567 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:57,898 - INFO - Executing action action_2 ...
2024-11-07 18:33:58,115 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:58,464 - INFO - Executing action action_2 ...
2024-11-07 18:33:58,689 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:59,028 - INFO - Executing action action_2 ...
2024-11-07 18:33:59,277 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:33:59,607 - INFO - Executing action action_2 ...
2024-11-07 18:33:59,619 - ERROR - Error during intention 12 execution. Intention 12 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-07 18:33:59,713 - INFO - Belief set thread terminated.
2024-11-07 18:33:59,820 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:34:00,089 - INFO - Plan thread terminated.
2024-11-07 18:34:00,095 - INFO - Intention 12 execution has finished. Threads and subprocess terminated. Plan: ['action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 87}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 86}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 85}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-11-07 18:34:00,095 - INFO - Belief set after intention 12 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 85}}, 'parcels': {}, 'batteries': {1: {'coordinates': [2, 2]}}}
2024-11-07 18:34:06,286 - INFO - Invalidating intention 12 ...
2024-11-07 18:34:13,868 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    battery = belief_set['batteries'][1]
    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
    iterations = 0
    max_iterations = 10
    while (agent['coordinates'] != battery['coordinates']) and (iterations < max_iterations):
        if x_distance > 0:
            function_2()
            x_distance -= 1
        elif x_distance < 0:
            function_1()
            x_distance += 1
        if y_distance > 0:
            function_4()
            y_distance -= 1
        elif y_distance < 0:
            function_3()
            y_distance += 1
        iterations += 1
    function_5()
2024-11-07 18:34:13,887 - INFO - The intention is valid.
2024-11-07 18:34:13,887 - INFO - Intention added to desire 3
2024-11-07 18:34:13,888 - INFO - Running intention 13 ...
2024-11-07 18:34:14,121 - INFO - Belief set thread started ...
2024-11-07 18:34:14,146 - INFO - Plan thread started ...
2024-11-07 18:34:14,152 - INFO - Started subprocess...
2024-11-07 18:34:14,152 - INFO - Belief set before intention 13 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 85}}, 'parcels': {}, 'batteries': {1: {'coordinates': [2, 2]}}}
2024-11-07 18:34:14,449 - INFO - Executing action action_1 ...
2024-11-07 18:34:14,668 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 84}}]
2024-11-07 18:34:15,029 - INFO - Executing action action_5 ...
2024-11-07 18:34:15,259 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 100}}, {'event_type': 'object removed', 'object_type': 'battery', 'object': {'id': 1, 'coordinates': [2, 2]}}]
2024-11-07 18:34:15,597 - INFO - Plan thread terminated.
2024-11-07 18:34:15,603 - INFO - Belief set thread terminated.
2024-11-07 18:34:15,640 - INFO - Intention 13 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_5']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 84}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 100}}, {'event_type': 'object removed', 'object_type': 'battery', 'object': {'id': 1, 'coordinates': [2, 2]}}]]
2024-11-07 18:34:15,640 - INFO - Belief set after intention 13 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 100}}, 'parcels': {}, 'batteries': {}}
2024-11-07 18:34:19,696 - INFO - Testing trigger function 
def should_pursue_goal(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set['agent'][1]['energy'] < 100:
        return True
    return False
2024-11-07 18:34:19,696 - INFO - The trigger function is valid.
2024-11-07 18:34:19,696 - INFO - Trigger function added to desire 3.
2024-11-07 18:34:35,500 - INFO - Desire added: 4. Desires:
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: True
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: True
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: True
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
Executable: False
Trigger function:
None



2024-11-07 18:34:41,301 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    key = belief_set['keys'][1]
    while agent['coordinates'] != key['coordinates']:
        if agent['coordinates'][0] < key['coordinates'][0]:
            function_2()
        elif agent['coordinates'][0] > key['coordinates'][0]:
            function_1()
        elif agent['coordinates'][1] < key['coordinates'][1]:
            function_4()
        elif agent['coordinates'][1] > key['coordinates'][1]:
            function_3()
    function_5()
2024-11-07 18:34:41,301 - INFO - The intention is valid.
2024-11-07 18:34:41,308 - INFO - Intention added to desire 4
2024-11-07 18:34:41,326 - INFO - Running intention 14 ...
2024-11-07 18:34:41,426 - INFO - Belief set thread started ...
2024-11-07 18:34:41,445 - INFO - Plan thread started ...
2024-11-07 18:34:41,476 - INFO - Started subprocess...
2024-11-07 18:34:41,482 - INFO - Belief set before intention 14 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 100}}, 'parcels': {}, 'batteries': {}, 'keys': {1: {'id': 1, 'coordinates': [1, 0], 'carried_by_id': None}}}
2024-11-07 18:34:41,777 - INFO - Executing action action_1 ...
2024-11-07 18:34:42,033 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 99}}]
2024-11-07 18:34:42,401 - INFO - Executing action action_1 ...
2024-11-07 18:34:42,622 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 98}}]
2024-11-07 18:34:42,985 - INFO - Executing action action_1 ...
2024-11-07 18:34:43,216 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:43,552 - INFO - Executing action action_1 ...
2024-11-07 18:34:43,767 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:44,104 - INFO - Executing action action_1 ...
2024-11-07 18:34:44,317 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:44,695 - INFO - Executing action action_1 ...
2024-11-07 18:34:44,919 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:45,238 - INFO - Executing action action_1 ...
2024-11-07 18:34:45,464 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:45,775 - INFO - Executing action action_1 ...
2024-11-07 18:34:46,006 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:46,385 - INFO - Executing action action_1 ...
2024-11-07 18:34:46,626 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:46,955 - INFO - Executing action action_1 ...
2024-11-07 18:34:47,178 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:47,512 - INFO - Executing action action_1 ...
2024-11-07 18:34:47,778 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:48,206 - INFO - Executing action action_1 ...
2024-11-07 18:34:48,443 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:48,827 - INFO - Executing action action_1 ...
2024-11-07 18:34:49,057 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:49,581 - INFO - Executing action action_1 ...
2024-11-07 18:34:49,839 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:50,171 - INFO - Executing action action_1 ...
2024-11-07 18:34:50,409 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:50,757 - INFO - Executing action action_1 ...
2024-11-07 18:34:50,982 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:51,364 - INFO - Executing action action_1 ...
2024-11-07 18:34:51,601 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:51,894 - INFO - Executing action action_1 ...
2024-11-07 18:34:52,142 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:52,501 - INFO - Executing action action_1 ...
2024-11-07 18:34:52,733 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:53,145 - INFO - Executing action action_1 ...
2024-11-07 18:34:53,382 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:53,655 - INFO - Executing action action_1 ...
2024-11-07 18:34:53,892 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:54,262 - INFO - Executing action action_1 ...
2024-11-07 18:34:54,511 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:54,886 - INFO - Executing action action_1 ...
2024-11-07 18:34:55,140 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:55,434 - INFO - Executing action action_1 ...
2024-11-07 18:34:55,651 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:55,993 - INFO - Executing action action_1 ...
2024-11-07 18:34:56,229 - INFO - Action action_1 executed. Events received: []
2024-11-07 18:34:56,528 - ERROR - Error during intention 14 execution. Intention 14 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-07 18:34:56,534 - INFO - Plan thread terminated.
2024-11-07 18:34:56,585 - INFO - Belief set thread terminated.
2024-11-07 18:34:56,641 - INFO - Intention 14 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 99}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 98}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-11-07 18:34:56,660 - INFO - Belief set after intention 14 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 98}}, 'parcels': {}, 'batteries': {}, 'keys': {1: {'id': 1, 'coordinates': [1, 0], 'carried_by_id': None}}}
2024-11-07 18:35:02,641 - INFO - Invalidating intention 14 ...
2024-11-07 18:35:10,998 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    keys = belief_set['keys']
    for key_id, key in keys.items():
        if key['carried_by_id'] is None:
            while agent['coordinates'] != key['coordinates']:
                if agent['coordinates'][0] > key['coordinates'][0] and agent['coordinates'][0] > 0:
                    function_1()
                elif agent['coordinates'][0] < key['coordinates'][0] and agent['coordinates'][0] < belief_set['map']['width'] - 1:
                    function_2()
                elif agent['coordinates'][1] > key['coordinates'][1] and agent['coordinates'][1] > 0:
                    function_3()
                elif agent['coordinates'][1] < key['coordinates'][1] and agent['coordinates'][1] < belief_set['map']['height'] - 1:
                    function_4()
                else:
                    break
            function_5()
            break
2024-11-07 18:35:10,999 - INFO - The intention is valid.
2024-11-07 18:35:11,018 - INFO - Intention added to desire 4
2024-11-07 18:35:11,019 - INFO - Running intention 15 ...
2024-11-07 18:35:11,155 - INFO - Belief set thread started ...
2024-11-07 18:35:11,168 - INFO - Plan thread started ...
2024-11-07 18:35:11,168 - INFO - Started subprocess...
2024-11-07 18:35:11,168 - INFO - Belief set before intention 15 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 98}}, 'parcels': {}, 'batteries': {}, 'keys': {1: {'id': 1, 'coordinates': [1, 0], 'carried_by_id': None}}}
2024-11-07 18:35:11,653 - INFO - Executing action action_2 ...
2024-11-07 18:35:11,933 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 97}}]
2024-11-07 18:35:12,227 - INFO - Executing action action_2 ...
2024-11-07 18:35:12,455 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 96}}]
2024-11-07 18:35:12,798 - INFO - Executing action action_2 ...
2024-11-07 18:35:13,064 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 95}}]
2024-11-07 18:35:13,469 - INFO - Executing action action_2 ...
2024-11-07 18:35:13,695 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:14,070 - INFO - Executing action action_2 ...
2024-11-07 18:35:14,300 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:14,711 - INFO - Executing action action_2 ...
2024-11-07 18:35:14,930 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:15,261 - INFO - Executing action action_2 ...
2024-11-07 18:35:15,492 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:15,742 - INFO - Executing action action_2 ...
2024-11-07 18:35:15,967 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:16,312 - INFO - Executing action action_2 ...
2024-11-07 18:35:16,562 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:16,912 - INFO - Executing action action_2 ...
2024-11-07 18:35:17,119 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:17,418 - INFO - Executing action action_2 ...
2024-11-07 18:35:17,657 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:18,035 - INFO - Executing action action_2 ...
2024-11-07 18:35:18,249 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:18,550 - INFO - Executing action action_2 ...
2024-11-07 18:35:18,814 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:19,162 - INFO - Executing action action_2 ...
2024-11-07 18:35:19,369 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:19,636 - INFO - Executing action action_2 ...
2024-11-07 18:35:19,922 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:20,326 - INFO - Executing action action_2 ...
2024-11-07 18:35:20,581 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:20,940 - INFO - Executing action action_2 ...
2024-11-07 18:35:21,166 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:21,584 - INFO - Executing action action_2 ...
2024-11-07 18:35:21,815 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:22,103 - INFO - Executing action action_2 ...
2024-11-07 18:35:22,323 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:22,697 - INFO - Executing action action_2 ...
2024-11-07 18:35:22,915 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:23,192 - INFO - Executing action action_2 ...
2024-11-07 18:35:23,436 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:23,870 - INFO - Executing action action_2 ...
2024-11-07 18:35:24,144 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:24,449 - INFO - Executing action action_2 ...
2024-11-07 18:35:24,679 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:24,996 - INFO - Executing action action_2 ...
2024-11-07 18:35:25,221 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:25,598 - INFO - Executing action action_2 ...
2024-11-07 18:35:25,834 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:26,182 - INFO - Executing action action_2 ...
2024-11-07 18:35:26,342 - ERROR - Error during intention 15 execution. Intention 15 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-07 18:35:26,373 - INFO - Belief set thread terminated.
2024-11-07 18:35:26,398 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:35:26,690 - INFO - Plan thread terminated.
2024-11-07 18:35:26,733 - INFO - Intention 15 execution has finished. Threads and subprocess terminated. Plan: ['action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 97}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 96}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 95}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-11-07 18:35:26,734 - INFO - Belief set after intention 15 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 95}}, 'parcels': {}, 'batteries': {}, 'keys': {1: {'id': 1, 'coordinates': [1, 0], 'carried_by_id': None}}}
2024-11-07 18:35:32,645 - INFO - Invalidating intention 15 ...
2024-11-07 18:35:41,005 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    key = belief_set['keys'][1]
    while agent['coordinates'] != key['coordinates']:
        if agent['coordinates'][0] < key['coordinates'][0] and agent['coordinates'][0] < belief_set['map']['width'] - 1:
            function_2()
            agent['coordinates'][0] += 1
        elif agent['coordinates'][0] > key['coordinates'][0] and agent['coordinates'][0] > 0:
            function_1()
            agent['coordinates'][0] -= 1
        if agent['coordinates'][1] < key['coordinates'][1] and agent['coordinates'][1] < belief_set['map']['height'] - 1:
            function_4()
            agent['coordinates'][1] += 1
        elif agent['coordinates'][1] > key['coordinates'][1] and agent['coordinates'][1] > 0:
            function_3()
            agent['coordinates'][1] -= 1
    function_5()
2024-11-07 18:35:41,018 - INFO - The intention is valid.
2024-11-07 18:35:41,025 - INFO - Intention added to desire 4
2024-11-07 18:35:41,044 - INFO - Running intention 16 ...
2024-11-07 18:35:41,282 - INFO - Belief set thread started ...
2024-11-07 18:35:41,282 - INFO - Plan thread started ...
2024-11-07 18:35:41,307 - INFO - Started subprocess...
2024-11-07 18:35:41,307 - INFO - Belief set before intention 16 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 95}}, 'parcels': {}, 'batteries': {}, 'keys': {1: {'id': 1, 'coordinates': [1, 0], 'carried_by_id': None}}}
2024-11-07 18:35:41,576 - INFO - Executing action action_1 ...
2024-11-07 18:35:41,851 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 94}}]
2024-11-07 18:35:42,208 - INFO - Executing action action_3 ...
2024-11-07 18:35:42,450 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 1], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 93}}]
2024-11-07 18:35:42,763 - INFO - Executing action action_1 ...
2024-11-07 18:35:43,032 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 92}}]
2024-11-07 18:35:43,407 - INFO - Executing action action_3 ...
2024-11-07 18:35:43,656 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 91}}]
2024-11-07 18:35:44,061 - INFO - Executing action action_5 ...
2024-11-07 18:35:44,279 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 90}}, {'event_type': 'object changed', 'object_type': 'key', 'object': {'id': 1, 'coordinates': [1, 0], 'carried_by_id': 1}}]
2024-11-07 18:35:44,654 - INFO - Belief set thread terminated.
2024-11-07 18:35:44,682 - INFO - Plan thread terminated.
2024-11-07 18:35:44,712 - INFO - Intention 16 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_1', 'action_3', 'action_5']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 94}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 1], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 93}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 92}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'has_key': False, 'score': 57, 'energy': 91}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 90}}, {'event_type': 'object changed', 'object_type': 'key', 'object': {'id': 1, 'coordinates': [1, 0], 'carried_by_id': 1}}]]
2024-11-07 18:35:44,725 - INFO - Belief set after intention 16 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 90}}, 'parcels': {}, 'batteries': {}, 'keys': {1: {'id': 1, 'coordinates': [1, 0], 'carried_by_id': 1}}}
2024-11-07 18:35:49,481 - INFO - Testing trigger function 
def should_pursue_goal(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False
2024-11-07 18:35:49,494 - INFO - The trigger function is valid.
2024-11-07 18:35:49,494 - INFO - Trigger function added to desire 4.
2024-11-07 18:36:03,556 - INFO - Desire added: 5. Desires:
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: True
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: True
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: True
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: True
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: True
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
Executable: False
Trigger function:
None



2024-11-07 18:36:09,106 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    door = belief_set['doors'][1]
    if agent['coordinates'][0] < door['coordinates'][0]:
        function_2()
    elif agent['coordinates'][0] > door['coordinates'][0]:
        function_1()
    elif agent['coordinates'][1] < door['coordinates'][1]:
        function_4()
    elif agent['coordinates'][1] > door['coordinates'][1]:
        function_3()
    else:
        if agent['has_key']:
            function_5()
2024-11-07 18:36:09,143 - INFO - The intention is valid.
2024-11-07 18:36:09,150 - INFO - Intention added to desire 5
2024-11-07 18:36:09,169 - INFO - Running intention 17 ...
2024-11-07 18:36:09,430 - INFO - Belief set thread started ...
2024-11-07 18:36:09,449 - INFO - Plan thread started ...
2024-11-07 18:36:09,462 - INFO - Started subprocess...
2024-11-07 18:36:09,481 - INFO - Belief set before intention 17 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 90}}, 'parcels': {}, 'batteries': {}, 'keys': {1: {'id': 1, 'coordinates': [1, 0], 'carried_by_id': 1}}, 'doors': {1: {'id': 1, 'coordinates': [3, 2]}}}
2024-11-07 18:36:09,794 - INFO - Executing action action_2 ...
2024-11-07 18:36:10,011 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 0], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 89}}, {'event_type': 'object changed', 'object_type': 'key', 'object': {'id': 1, 'coordinates': [2, 0], 'carried_by_id': 1}}]
2024-11-07 18:36:10,271 - INFO - Plan thread terminated.
2024-11-07 18:36:10,303 - INFO - Belief set thread terminated.
2024-11-07 18:36:10,351 - INFO - Intention 17 execution has finished. Threads and subprocess terminated. Plan: ['action_2']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 0], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 89}}, {'event_type': 'object changed', 'object_type': 'key', 'object': {'id': 1, 'coordinates': [2, 0], 'carried_by_id': 1}}]]
2024-11-07 18:36:10,364 - INFO - Belief set after intention 17 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 0], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 89}}, 'parcels': {}, 'batteries': {}, 'keys': {1: {'id': 1, 'coordinates': [2, 0], 'carried_by_id': 1}}, 'doors': {1: {'id': 1, 'coordinates': [3, 2]}}}
2024-11-07 18:36:15,467 - INFO - Invalidating intention 17 ...
2024-11-07 18:36:22,082 - INFO - Testing intention 
def function():
	global belief_set
	agent = belief_set['agent'][1]
	door = belief_set['doors'][1]
	while agent['coordinates'] != door['coordinates']:
		if agent['coordinates'][0] < door['coordinates'][0]:
			function_2()
		elif agent['coordinates'][0] > door['coordinates'][0]:
			function_1()
		elif agent['coordinates'][1] < door['coordinates'][1]:
			function_4()
		else:
			function_3()
	door['is_locked'] = False
	return
2024-11-07 18:36:22,094 - INFO - The intention is valid.
2024-11-07 18:36:22,095 - INFO - Intention added to desire 5
2024-11-07 18:36:22,108 - INFO - Running intention 18 ...
2024-11-07 18:36:22,238 - INFO - Belief set thread started ...
2024-11-07 18:36:22,239 - INFO - Plan thread started ...
2024-11-07 18:36:22,245 - INFO - Started subprocess...
2024-11-07 18:36:22,245 - INFO - Belief set before intention 18 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 0], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 89}}, 'parcels': {}, 'batteries': {}, 'keys': {1: {'id': 1, 'coordinates': [2, 0], 'carried_by_id': 1}}, 'doors': {1: {'id': 1, 'coordinates': [3, 2]}}}
2024-11-07 18:36:22,558 - INFO - Executing action action_2 ...
2024-11-07 18:36:22,776 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [3, 0], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 88}}]
2024-11-07 18:36:23,061 - INFO - Executing action action_2 ...
2024-11-07 18:36:23,284 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:23,619 - INFO - Executing action action_2 ...
2024-11-07 18:36:23,833 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:24,217 - INFO - Executing action action_2 ...
2024-11-07 18:36:24,456 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:24,741 - INFO - Executing action action_2 ...
2024-11-07 18:36:25,002 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:25,312 - INFO - Executing action action_2 ...
2024-11-07 18:36:25,524 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:25,868 - INFO - Executing action action_2 ...
2024-11-07 18:36:26,073 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:26,402 - INFO - Executing action action_2 ...
2024-11-07 18:36:26,626 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:26,942 - INFO - Executing action action_2 ...
2024-11-07 18:36:27,191 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:27,541 - INFO - Executing action action_2 ...
2024-11-07 18:36:27,765 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:28,095 - INFO - Executing action action_2 ...
2024-11-07 18:36:28,363 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:28,724 - INFO - Executing action action_2 ...
2024-11-07 18:36:28,974 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:29,336 - INFO - Executing action action_2 ...
2024-11-07 18:36:29,555 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:29,872 - INFO - Executing action action_2 ...
2024-11-07 18:36:30,091 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:30,490 - INFO - Executing action action_2 ...
2024-11-07 18:36:30,720 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:31,007 - INFO - Executing action action_2 ...
2024-11-07 18:36:31,224 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:31,517 - INFO - Executing action action_2 ...
2024-11-07 18:36:31,737 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:32,130 - INFO - Executing action action_2 ...
2024-11-07 18:36:32,410 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:32,844 - INFO - Executing action action_2 ...
2024-11-07 18:36:33,064 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:33,424 - INFO - Executing action action_2 ...
2024-11-07 18:36:33,645 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:33,937 - INFO - Executing action action_2 ...
2024-11-07 18:36:34,144 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:34,462 - INFO - Executing action action_2 ...
2024-11-07 18:36:34,699 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:35,028 - INFO - Executing action action_2 ...
2024-11-07 18:36:35,240 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:35,612 - INFO - Executing action action_2 ...
2024-11-07 18:36:35,863 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:36,224 - INFO - Executing action action_2 ...
2024-11-07 18:36:36,525 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:36,874 - INFO - Executing action action_2 ...
2024-11-07 18:36:37,104 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:36:37,297 - ERROR - Error during intention 18 execution. Intention 18 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-07 18:36:37,366 - INFO - Belief set thread terminated.
2024-11-07 18:36:37,404 - INFO - Plan thread terminated.
2024-11-07 18:36:37,416 - INFO - Intention 18 execution has finished. Threads and subprocess terminated. Plan: ['action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [3, 0], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 88}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-11-07 18:36:37,441 - INFO - Belief set after intention 18 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [3, 0], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 88}}, 'parcels': {}, 'batteries': {}, 'keys': {1: {'id': 1, 'coordinates': [3, 0], 'carried_by_id': 1}}, 'doors': {1: {'id': 1, 'coordinates': [3, 2]}}}
2024-11-07 18:36:41,155 - INFO - Invalidating intention 18 ...
2024-11-07 18:37:06,907 - INFO - Testing intention 
def function():
    global belief_set
    agent_position = belief_set['agent'][1]['coordinates']
    door_position = belief_set['doors'][1]['coordinates']
    path = find_path(agent_position, door_position, belief_set['map'])
    for step in path:
        if step == 'up':
            function_1()
        elif step == 'down':
            function_2()
        elif step == 'left':
            function_3()
        elif step == 'right':
            function_4()
    if belief_set['agent'][1]['has_key'] and agent_position == door_position:
        function_6()

def find_path(start, end, map):
    width = map['width']
    height = map['height']
    grid = [[0 for _ in range(width)] for _ in range(height)]
    for cell in map['grid']:
        if cell['cell_type'] == 'walkable':
            x, y = cell['cell_coordinates']
            grid[y][x] = 1
    start_node = Node(None, tuple(start))
    start_node.g = start_node.h = start_node.f = 0
    end_node = Node(None, tuple(end))
    end_node.g = end_node.h = end_node.f = 0
    open_list = []
    closed_list = []
    open_list.append(start_node)
    while len(open_list) > 0:
        current_node = open_list[0]
        current_index = 0
        for index, item in enumerate(open_list):
            if item.f < current_node.f:
                current_node = item
                current_index = index
        open_list.pop(current_index)
        closed_list.append(current_node)
        if current_node == end_node:
            path = []
            current = current_node
            while current is not None:
                path.append(current.position)
                current = current.parent
            return path[::-1] 
        children = []
        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]:
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])
            if node_position[0] > (len(grid) - 1) or node_position[0] < 0 or node_position[1] > (len(grid[len(grid)-1]) -1) or node_position[1] < 0:
                continue
            if grid[node_position[1]][node_position[0]] != 0:
                continue
            new_node = Node(current_node, node_position)
            children.append(new_node)
        for child in children:
            for closed_child in closed_list:
                if child == closed_child:
                    continue
            child.g = current_node.g + 1
            child.h = ((child.position[0] - end_node.position[0]) ** 2) + ((child.position[1] - end_node.position[1]) ** 2)
            child.f = child.g + child.h
            for open_node in open_list:
                if child == open_node and child.g > open_node.g:
                    continue
            open_list.append(child)
class Node():
    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = position
        self.g = 0
        self.h = 0
        self.f = 0
    def __eq__(self, other):
        return self.position == other.position
2024-11-07 18:37:06,970 - ERROR - The intention is invalid. Error: The code contains more than one function definition.
2024-11-07 18:37:34,503 - INFO - Testing intention 
def function():
    global belief_set
    agent_position = belief_set['agent'][1]['coordinates']
    door_position = belief_set['doors'][1]['coordinates']
    path = find_path(agent_position, door_position)
    for step in path:
        if step == 'up':
            function_1()
        elif step == 'down':
            function_2()
        elif step == 'left':
            function_3()
        elif step == 'right':
            function_4()
    if belief_set['agent'][1]['has_key'] and agent_position == door_position:
        function_6()

def find_path(start, end):
    map = belief_set['map']
    width = map['width']
    height = map['height']
    grid = [[0 for _ in range(width)] for _ in range(height)]
    for cell in map['grid']:
        if cell['cell_type'] == 'walkable':
            x, y = cell['cell_coordinates']
            grid[y][x] = 1
    return path_finding_algorithm(start, end, grid)

def path_finding_algorithm(start, end, grid):
    start_node = Node(None, tuple(start))
    start_node.g = start_node.h = start_node.f = 0
    end_node = Node(None, tuple(end))
    end_node.g = end_node.h = end_node.f = 0
    open_list = []
    closed_list = []
    open_list.append(start_node)
    while len(open_list) > 0:
        current_node = open_list[0]
        current_index = 0
        for index, item in enumerate(open_list):
            if item.f < current_node.f:
                current_node = item
                current_index = index
        open_list.pop(current_index)
        closed_list.append(current_node)
        if current_node == end_node:
            path = []
            current = current_node
            while current is not None:
                path.append(current.position)
                current = current.parent
            return path[::-1] 
        children = []
        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]:
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])
            if node_position[0] > (len(grid) - 1) or node_position[0] < 0 or node_position[1] > (len(grid[len(grid)-1]) -1) or node_position[1] < 0:
                continue
            if grid[node_position[1]][node_position[0]] != 0:
                continue
            new_node = Node(current_node, node_position)
            children.append(new_node)
        for child in children:
            for closed_child in closed_list:
                if child == closed_child:
                    continue
            child.g = current_node.g + 1
            child.h = ((child.position[0] - end_node.position[0]) ** 2) + ((child.position[1] - end_node.position[1]) ** 2)
            child.f = child.g + child.h
            for open_node in open_list:
                if child == open_node and child.g > open_node.g:
                    continue
            open_list.append(child)

class Node():
    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = position
        self.g = 0
        self.h = 0
        self.f = 0
    def __eq__(self, other):
        return self.position == other.position
2024-11-07 18:37:34,517 - ERROR - The intention is invalid. Error: The code contains more than one function definition.
2024-11-07 18:37:43,160 - INFO - Testing intention 
def function():
    global belief_set
    agent_position = belief_set['agent'][1]['coordinates']
    door_position = belief_set['doors'][1]['coordinates']
    path = find_path(agent_position, door_position)
    for step in path:
        if step == 'up':
            function_1()
        elif step == 'down':
            function_2()
        elif step == 'left':
            function_3()
        elif step == 'right':
            function_4()
    if belief_set['agent'][1]['has_key'] and agent_position == door_position:
        function_6()


def find_path(start, end):
    map = belief_set['map']
    width = map['width']
    height = map['height']
    grid = [[0 for _ in range(width)] for _ in range(height)]
    for cell in map['grid']:
        if cell['cell_type'] == 'walkable':
            x, y = cell['cell_coordinates']
            grid[y][x] = 1
    return path_finding_algorithm(start, end, grid)
2024-11-07 18:37:43,172 - ERROR - The intention is invalid. Error: The code contains more than one function definition.
2024-11-07 18:37:49,812 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    door = belief_set['doors'][1]
    agent_coordinates = agent['coordinates']
    door_coordinates = door['coordinates']
    while agent_coordinates != door_coordinates:
        if agent_coordinates[0] < door_coordinates[0]:
            function_2()
            agent_coordinates[0] += 1
        elif agent_coordinates[0] > door_coordinates[0]:
            function_1()
            agent_coordinates[0] -= 1
        if agent_coordinates[1] < door_coordinates[1]:
            function_4()
            agent_coordinates[1] += 1
        elif agent_coordinates[1] > door_coordinates[1]:
            function_3()
            agent_coordinates[1] -= 1
2024-11-07 18:37:49,812 - INFO - The intention is valid.
2024-11-07 18:37:49,831 - INFO - Intention added to desire 5
2024-11-07 18:37:49,882 - INFO - Running intention 19 ...
2024-11-07 18:37:50,083 - INFO - Belief set thread started ...
2024-11-07 18:37:50,095 - INFO - Plan thread started ...
2024-11-07 18:37:50,102 - INFO - Started subprocess...
2024-11-07 18:37:50,126 - INFO - Belief set before intention 19 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [3, 0], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 88}}, 'parcels': {}, 'batteries': {}, 'keys': {1: {'id': 1, 'coordinates': [3, 0], 'carried_by_id': 1}}, 'doors': {1: {'id': 1, 'coordinates': [3, 2]}}}
2024-11-07 18:37:50,429 - INFO - Executing action action_4 ...
2024-11-07 18:37:50,675 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [3, 1], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 87}}, {'event_type': 'object changed', 'object_type': 'key', 'object': {'id': 1, 'coordinates': [3, 1], 'carried_by_id': 1}}]
2024-11-07 18:37:51,013 - INFO - Executing action action_4 ...
2024-11-07 18:37:51,244 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 86}}, {'event_type': 'object changed', 'object_type': 'key', 'object': {'id': 1, 'coordinates': [3, 2], 'carried_by_id': 1}}]
2024-11-07 18:37:51,568 - INFO - Belief set thread terminated.
2024-11-07 18:37:51,617 - INFO - Plan thread terminated.
2024-11-07 18:37:51,716 - INFO - Intention 19 execution has finished. Threads and subprocess terminated. Plan: ['action_4', 'action_4']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [3, 1], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 87}}, {'event_type': 'object changed', 'object_type': 'key', 'object': {'id': 1, 'coordinates': [3, 1], 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 86}}, {'event_type': 'object changed', 'object_type': 'key', 'object': {'id': 1, 'coordinates': [3, 2], 'carried_by_id': 1}}]]
2024-11-07 18:37:51,735 - INFO - Belief set after intention 19 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [], 'has_key': True, 'score': 57, 'energy': 86}}, 'parcels': {}, 'batteries': {}, 'keys': {1: {'id': 1, 'coordinates': [3, 2], 'carried_by_id': 1}}, 'doors': {1: {'id': 1, 'coordinates': [3, 2]}}}
2024-11-07 18:37:55,122 - INFO - Invalidating intention 19 ...
2024-11-07 18:37:55,134 - INFO - Invalidating intention 1 ...
2024-11-07 18:37:55,134 - INFO - Intention 1 is a base action. It cannot be invalidated.
2024-11-07 18:37:55,147 - INFO - Invalidating intention 2 ...
2024-11-07 18:37:55,147 - INFO - Intention 2 is a base action. It cannot be invalidated.
2024-11-07 18:37:55,147 - INFO - Invalidating intention 3 ...
2024-11-07 18:37:55,147 - INFO - Intention 3 is a base action. It cannot be invalidated.
2024-11-07 18:37:55,147 - INFO - Invalidating intention 4 ...
2024-11-07 18:37:55,153 - INFO - Intention 4 is a base action. It cannot be invalidated.
2024-11-07 18:38:29,704 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: True
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: True
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: True
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: True
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: True
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None



2024-11-07 18:38:29,717 - INFO - Running trigger function for desire 2 ...
2024-11-07 18:38:29,717 - INFO - Trigger function for desire 2 has been executed. Result: True
2024-11-07 18:38:29,717 - INFO - Desire 2 could be triggered. Adding it to the list...
2024-11-07 18:38:29,717 - INFO - Running trigger function for desire 3 ...
2024-11-07 18:38:29,717 - INFO - Trigger function for desire 3 has been executed. Result: False
2024-11-07 18:38:29,717 - INFO - Running trigger function for desire 4 ...
2024-11-07 18:38:29,717 - INFO - Trigger function for desire 4 has been executed. Result: True
2024-11-07 18:38:29,717 - INFO - Desire 4 could be triggered. Adding it to the list...
2024-11-07 18:38:29,717 - INFO - Desires triggered: [2, 4]. Now randomly choosing which one to run.
2024-11-07 18:38:29,730 - INFO - Desire 2 was randomly chosen. Desire 2 has been triggered.
2024-11-07 18:38:29,736 - INFO - Desire 2 is about to be executed ...
2024-11-07 18:38:29,736 - INFO - Executing all valid intentions for desire 2 ...
2024-11-07 18:38:29,736 - INFO - Executing intention 11 ...
2024-11-07 18:38:29,736 - INFO - Running intention 11 ...
2024-11-07 18:38:29,841 - INFO - Belief set thread started ...
2024-11-07 18:38:29,847 - INFO - Plan thread started ...
2024-11-07 18:38:29,859 - INFO - Started subprocess...
2024-11-07 18:38:29,859 - INFO - Belief set before intention 11 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 100}}, 'parcels': {3: {'id': 3, 'coordinates': [2, 3], 'score': 15, 'carried_by_id': None}, 4: {'id': 4, 'coordinates': [2, 3], 'score': 42, 'carried_by_id': None}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:38:30,143 - INFO - Executing action action_2 ...
2024-11-07 18:38:30,383 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 1], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 99}}]
2024-11-07 18:38:30,718 - INFO - Executing action action_4 ...
2024-11-07 18:38:30,947 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 98}}]
2024-11-07 18:38:31,233 - INFO - Executing action action_4 ...
2024-11-07 18:38:31,476 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 3], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 97}}]
2024-11-07 18:38:31,787 - INFO - Executing action action_5 ...
2024-11-07 18:38:32,037 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [2, 3], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [2, 3], 'score': 42, 'carried_by_id': 1}}]
2024-11-07 18:38:32,401 - INFO - Executing action action_1 ...
2024-11-07 18:38:32,652 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 3], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 95}}]
2024-11-07 18:38:32,972 - INFO - Executing action action_1 ...
2024-11-07 18:38:33,235 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 3], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 3], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 94}}]
2024-11-07 18:38:33,638 - INFO - Executing action action_3 ...
2024-11-07 18:38:33,862 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 93}}]
2024-11-07 18:38:34,254 - INFO - Executing action action_3 ...
2024-11-07 18:38:34,508 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:34,806 - INFO - Executing action action_3 ...
2024-11-07 18:38:35,013 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:35,372 - INFO - Executing action action_3 ...
2024-11-07 18:38:35,632 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:35,977 - INFO - Executing action action_3 ...
2024-11-07 18:38:36,206 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:36,505 - INFO - Executing action action_3 ...
2024-11-07 18:38:36,760 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:37,045 - INFO - Executing action action_3 ...
2024-11-07 18:38:37,257 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:37,551 - INFO - Executing action action_3 ...
2024-11-07 18:38:37,775 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:38,096 - INFO - Executing action action_3 ...
2024-11-07 18:38:38,357 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:38,698 - INFO - Executing action action_3 ...
2024-11-07 18:38:38,922 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:39,296 - INFO - Executing action action_3 ...
2024-11-07 18:38:39,515 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:39,840 - INFO - Executing action action_3 ...
2024-11-07 18:38:40,076 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:40,389 - INFO - Executing action action_3 ...
2024-11-07 18:38:40,602 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:40,909 - INFO - Executing action action_3 ...
2024-11-07 18:38:41,133 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:41,437 - INFO - Executing action action_3 ...
2024-11-07 18:38:41,655 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:41,956 - INFO - Executing action action_3 ...
2024-11-07 18:38:42,210 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:42,503 - INFO - Executing action action_3 ...
2024-11-07 18:38:42,715 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:43,113 - INFO - Executing action action_3 ...
2024-11-07 18:38:43,338 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:43,687 - INFO - Executing action action_3 ...
2024-11-07 18:38:43,905 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:44,208 - INFO - Executing action action_3 ...
2024-11-07 18:38:44,421 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:44,710 - INFO - Executing action action_3 ...
2024-11-07 18:38:44,904 - ERROR - Error during intention 11 execution. Intention 11 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-07 18:38:44,922 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:38:44,927 - INFO - Belief set thread terminated.
2024-11-07 18:38:45,215 - INFO - Plan thread terminated.
2024-11-07 18:38:45,222 - INFO - Intention 11 execution has finished. Threads and subprocess terminated. Plan: ['action_2', 'action_4', 'action_4', 'action_5', 'action_1', 'action_1', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 1], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 99}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 98}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 3], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 97}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [2, 3], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [2, 3], 'score': 42, 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 3], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 95}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 3], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 3], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 94}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 93}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-11-07 18:38:45,228 - INFO - Belief set after intention 11 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 93}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:38:45,228 - INFO - Invalidating intention 11 ...
2024-11-07 18:38:45,228 - ERROR - Error during intention 11 execution. Desire 2 is now invalid and intention 11 has been invalidated.
2024-11-07 18:38:46,404 - INFO - Invalidating desire 2 ...
2024-11-07 18:38:49,930 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: False
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: True
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: True
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: True
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: True
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None



2024-11-07 18:38:49,931 - INFO - Running trigger function for desire 3 ...
2024-11-07 18:38:49,931 - INFO - Trigger function for desire 3 has been executed. Result: True
2024-11-07 18:38:49,931 - INFO - Desire 3 could be triggered. Adding it to the list...
2024-11-07 18:38:49,931 - INFO - Running trigger function for desire 4 ...
2024-11-07 18:38:49,931 - INFO - Trigger function for desire 4 has been executed. Result: True
2024-11-07 18:38:49,931 - INFO - Desire 4 could be triggered. Adding it to the list...
2024-11-07 18:38:49,931 - INFO - Desires triggered: [3, 4]. Now randomly choosing which one to run.
2024-11-07 18:38:49,950 - INFO - Desire 3 was randomly chosen. Desire 3 has been triggered.
2024-11-07 18:38:49,950 - INFO - Desire 3 is about to be executed ...
2024-11-07 18:38:49,950 - INFO - Executing all valid intentions for desire 3 ...
2024-11-07 18:38:49,950 - INFO - Executing intention 13 ...
2024-11-07 18:38:49,962 - INFO - Running intention 13 ...
2024-11-07 18:38:50,125 - INFO - Belief set thread started ...
2024-11-07 18:38:50,132 - INFO - Plan thread started ...
2024-11-07 18:38:50,157 - INFO - Started subprocess...
2024-11-07 18:38:50,170 - INFO - Belief set before intention 13 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 93}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:39:05,209 - ERROR - Error during intention 13 execution. Intention 13 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-07 18:39:05,272 - INFO - Plan thread terminated.
2024-11-07 18:39:05,316 - INFO - Belief set thread terminated.
2024-11-07 18:39:05,322 - INFO - Intention 13 execution has finished. Threads and subprocess terminated. Plan: []. Events: []
2024-11-07 18:39:05,322 - INFO - Belief set after intention 13 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 93}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:39:05,322 - INFO - Invalidating intention 13 ...
2024-11-07 18:39:05,329 - ERROR - Error during intention 13 execution. Desire 3 is now invalid and intention 13 has been invalidated.
2024-11-07 18:39:06,404 - INFO - Invalidating desire 3 ...
2024-11-07 18:39:09,099 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: False
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: True
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: True
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None



2024-11-07 18:39:09,099 - INFO - Running trigger function for desire 4 ...
2024-11-07 18:39:09,099 - INFO - Trigger function for desire 4 has been executed. Result: True
2024-11-07 18:39:09,099 - INFO - Desire 4 could be triggered. Adding it to the list...
2024-11-07 18:39:09,099 - INFO - Desires triggered: [4]. Now randomly choosing which one to run.
2024-11-07 18:39:09,130 - INFO - Desire 4 was randomly chosen. Desire 4 has been triggered.
2024-11-07 18:39:09,131 - INFO - Desire 4 is about to be executed ...
2024-11-07 18:39:09,131 - INFO - Executing all valid intentions for desire 4 ...
2024-11-07 18:39:09,131 - INFO - Executing intention 16 ...
2024-11-07 18:39:09,131 - INFO - Running intention 16 ...
2024-11-07 18:39:09,291 - INFO - Belief set thread started ...
2024-11-07 18:39:09,297 - INFO - Plan thread started ...
2024-11-07 18:39:09,310 - INFO - Started subprocess...
2024-11-07 18:39:09,329 - INFO - Belief set before intention 16 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 93}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:39:24,368 - ERROR - Error during intention 16 execution. Intention 16 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-07 18:39:24,441 - INFO - Plan thread terminated.
2024-11-07 18:39:24,485 - INFO - Belief set thread terminated.
2024-11-07 18:39:24,534 - INFO - Intention 16 execution has finished. Threads and subprocess terminated. Plan: []. Events: []
2024-11-07 18:39:24,535 - INFO - Belief set after intention 16 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 93}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:39:24,535 - INFO - Invalidating intention 16 ...
2024-11-07 18:39:24,541 - ERROR - Error during intention 16 execution. Desire 4 is now invalid and intention 16 has been invalidated.
2024-11-07 18:39:25,499 - INFO - Invalidating desire 4 ...
2024-11-07 18:39:27,219 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: False
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None



2024-11-07 18:39:27,219 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-11-07 18:39:27,219 - INFO - No desire has been triggered.
2024-11-07 18:39:27,243 - INFO - No desire triggered.
2024-11-07 18:39:28,528 - INFO - Desire added: 6. Desires:
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: False
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None


Desire 6: The agent should aim to collect and deliver as many parcels as possible while maintaining sufficient energy by collecting batteries when necessary.
Executable: False
Trigger function:
None



2024-11-07 18:39:53,893 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]['cell_coordinates']
    if agent['coordinates'] == delivery_cell and len(agent['parcels_carried_ids']) > 0:
        function_6()
    elif agent['coordinates'][0] < delivery_cell[0]:
        function_2()
    elif agent['coordinates'][0] > delivery_cell[0]:
        function_1()
    elif agent['coordinates'][1] < delivery_cell[1]:
        function_4()
    elif agent['coordinates'][1] > delivery_cell[1]:
        function_3()
    elif agent['energy'] < 30:
        battery_cell = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'batteries_spawn'][0]['cell_coordinates']
        if agent['coordinates'] == battery_cell:
            function_5()
        elif agent['coordinates'][0] < battery_cell[0]:
            function_2()
        elif agent['coordinates'][0] > battery_cell[0]:
            function_1()
        elif agent['coordinates'][1] < battery_cell[1]:
            function_4()
        elif agent['coordinates'][1] > battery_cell[1]:
            function_3()
    else:
        function_7()
2024-11-07 18:39:53,894 - INFO - The intention is valid.
2024-11-07 18:39:53,914 - INFO - Intention added to desire 6
2024-11-07 18:39:53,914 - INFO - Running intention 20 ...
2024-11-07 18:39:54,061 - INFO - Belief set thread started ...
2024-11-07 18:39:54,067 - INFO - Plan thread started ...
2024-11-07 18:39:54,073 - INFO - Started subprocess...
2024-11-07 18:39:54,073 - INFO - Belief set before intention 20 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 93}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:39:54,323 - INFO - Executing action action_3 ...
2024-11-07 18:39:54,554 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:39:54,918 - INFO - Plan thread terminated.
2024-11-07 18:39:54,942 - INFO - Belief set thread terminated.
2024-11-07 18:39:54,954 - INFO - Intention 20 execution has finished. Threads and subprocess terminated. Plan: ['action_3']. Events: [[]]
2024-11-07 18:39:54,955 - INFO - Belief set after intention 20 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 93}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:39:59,584 - INFO - Invalidating intention 20 ...
2024-11-07 18:40:05,077 - INFO - Testing intention 
def function():
    global belief_set
    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell')
    agent = belief_set['agent'][1]
    dx, dy = delivery_cell['cell_coordinates'][0] - agent['coordinates'][0], delivery_cell['cell_coordinates'][1] - agent['coordinates'][1]
    if dx < 0:
        function_1()
    elif dx > 0:
        function_2()
    elif dy < 0:
        function_3()
    elif dy > 0:
        function_4()
    function_6()
2024-11-07 18:40:05,078 - INFO - The intention is valid.
2024-11-07 18:40:05,085 - INFO - Intention added to desire 6
2024-11-07 18:40:05,085 - INFO - Running intention 21 ...
2024-11-07 18:40:05,179 - INFO - Belief set thread started ...
2024-11-07 18:40:05,185 - INFO - Plan thread started ...
2024-11-07 18:40:05,198 - INFO - Started subprocess...
2024-11-07 18:40:05,204 - INFO - Belief set before intention 21 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 93}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:40:05,440 - INFO - Executing action action_3 ...
2024-11-07 18:40:05,640 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:05,963 - INFO - Executing action action_6 ...
2024-11-07 18:40:06,224 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': None}}]
2024-11-07 18:40:06,560 - INFO - Plan thread terminated.
2024-11-07 18:40:06,591 - INFO - Belief set thread terminated.
2024-11-07 18:40:06,616 - INFO - Intention 21 execution has finished. Threads and subprocess terminated. Plan: ['action_3', 'action_6']. Events: [[], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': None}}]]
2024-11-07 18:40:06,617 - INFO - Belief set after intention 21 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 92}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': None}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': None}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:40:11,677 - INFO - Invalidating intention 21 ...
2024-11-07 18:40:23,578 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    if agent['energy'] < 30:
        for cell in belief_set['map']['grid']:
            if cell['cell_type'] == 'batteries_spawn':
                agent['coordinates'] = cell['cell_coordinates']
                break
    else:
        parcel_picked = False
        for parcel in belief_set['parcels'].values():
            if parcel['coordinates'] == agent['coordinates']:
                function_5()
                parcel_picked = True
                break
        if not parcel_picked:
            function_7()
        for cell in belief_set['map']['grid']:
            if cell['cell_type'] == 'delivery_cell':
                while agent['coordinates'] != cell['cell_coordinates']:
                    if agent['coordinates'][0] < cell['cell_coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > cell['cell_coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < cell['cell_coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > cell['cell_coordinates'][1]:
                        function_3()
                function_6()
                break
2024-11-07 18:40:23,604 - INFO - The intention is valid.
2024-11-07 18:40:23,617 - INFO - Intention added to desire 6
2024-11-07 18:40:23,629 - INFO - Running intention 22 ...
2024-11-07 18:40:23,760 - INFO - Belief set thread started ...
2024-11-07 18:40:23,766 - INFO - Plan thread started ...
2024-11-07 18:40:23,785 - INFO - Started subprocess...
2024-11-07 18:40:23,785 - INFO - Belief set before intention 22 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 92}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': None}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': None}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:40:24,074 - INFO - Executing action action_5 ...
2024-11-07 18:40:24,327 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 91}}]
2024-11-07 18:40:24,721 - INFO - Executing action action_3 ...
2024-11-07 18:40:25,026 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:25,385 - INFO - Executing action action_3 ...
2024-11-07 18:40:25,608 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:25,884 - INFO - Executing action action_3 ...
2024-11-07 18:40:26,129 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:26,510 - INFO - Executing action action_3 ...
2024-11-07 18:40:26,749 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:27,129 - INFO - Executing action action_3 ...
2024-11-07 18:40:27,392 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:27,748 - INFO - Executing action action_3 ...
2024-11-07 18:40:27,985 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:28,298 - INFO - Executing action action_3 ...
2024-11-07 18:40:28,547 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:28,867 - INFO - Executing action action_3 ...
2024-11-07 18:40:29,085 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:29,441 - INFO - Executing action action_3 ...
2024-11-07 18:40:29,689 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:30,050 - INFO - Executing action action_3 ...
2024-11-07 18:40:30,268 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:30,630 - INFO - Executing action action_3 ...
2024-11-07 18:40:30,856 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:31,174 - INFO - Executing action action_3 ...
2024-11-07 18:40:31,425 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:31,787 - INFO - Executing action action_3 ...
2024-11-07 18:40:32,025 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:32,329 - INFO - Executing action action_3 ...
2024-11-07 18:40:32,565 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:32,868 - INFO - Executing action action_3 ...
2024-11-07 18:40:33,113 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:33,437 - INFO - Executing action action_3 ...
2024-11-07 18:40:33,664 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:33,982 - INFO - Executing action action_3 ...
2024-11-07 18:40:34,219 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:34,565 - INFO - Executing action action_3 ...
2024-11-07 18:40:34,771 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:35,069 - INFO - Executing action action_3 ...
2024-11-07 18:40:35,292 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:35,659 - INFO - Executing action action_3 ...
2024-11-07 18:40:35,908 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:36,291 - INFO - Executing action action_3 ...
2024-11-07 18:40:36,498 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:36,877 - INFO - Executing action action_3 ...
2024-11-07 18:40:37,108 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:37,452 - INFO - Executing action action_3 ...
2024-11-07 18:40:37,676 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:38,010 - INFO - Executing action action_3 ...
2024-11-07 18:40:38,231 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:38,619 - INFO - Executing action action_3 ...
2024-11-07 18:40:38,811 - ERROR - Error during intention 22 execution. Intention 22 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-07 18:40:38,824 - INFO - Belief set thread terminated.
2024-11-07 18:40:38,830 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:39,135 - INFO - Plan thread terminated.
2024-11-07 18:40:39,160 - INFO - Intention 22 execution has finished. Threads and subprocess terminated. Plan: ['action_5', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 91}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-11-07 18:40:39,161 - INFO - Belief set after intention 22 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 91}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:40:45,669 - INFO - Invalidating intention 22 ...
2024-11-07 18:40:45,682 - INFO - Invalidating intention 1 ...
2024-11-07 18:40:45,688 - INFO - Intention 1 is a base action. It cannot be invalidated.
2024-11-07 18:40:45,688 - INFO - Invalidating intention 2 ...
2024-11-07 18:40:45,695 - INFO - Intention 2 is a base action. It cannot be invalidated.
2024-11-07 18:40:45,695 - INFO - Invalidating intention 3 ...
2024-11-07 18:40:45,701 - INFO - Intention 3 is a base action. It cannot be invalidated.
2024-11-07 18:40:45,701 - INFO - Invalidating intention 4 ...
2024-11-07 18:40:45,701 - INFO - Intention 4 is a base action. It cannot be invalidated.
2024-11-07 18:40:45,707 - INFO - Invalidating intention 6 ...
2024-11-07 18:40:45,707 - INFO - Intention 6 is a base action. It cannot be invalidated.
2024-11-07 18:40:47,618 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: False
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None


Desire 6: The agent should aim to collect and deliver as many parcels as possible while maintaining sufficient energy by collecting batteries when necessary.
    Intention ID: [20]
    Executable: False
    Description: The agent should aim to deliver the parcels it is currently carrying to the delivery cell, then move towards the nearest battery if its energy is below a certain threshold.
                def function_20():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    if agent['coordinates'] == delivery_cell and len(agent[
                        'parcels_carried_ids']) > 0:
                        function_6()
                    elif agent['coordinates'][0] < delivery_cell[0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell[0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell[1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell[1]:
                        function_3()
                    elif agent['energy'] < 30:
                        battery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                            'cell_type'] == 'batteries_spawn'][0]['cell_coordinates']
                        if agent['coordinates'] == battery_cell:
                            function_5()
                        elif agent['coordinates'][0] < battery_cell[0]:
                            function_2()
                        elif agent['coordinates'][0] > battery_cell[0]:
                            function_1()
                        elif agent['coordinates'][1] < battery_cell[1]:
                            function_4()
                        elif agent['coordinates'][1] > battery_cell[1]:
                            function_3()
                    else:
                        function_7()
                
    Intention ID: [21]
    Executable: False
    Description: The agent should move towards the delivery cell and drop off the parcels it is carrying to increase its score.
                def function_21():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    dx, dy = delivery_cell['cell_coordinates'][0] - agent['coordinates'][0
                        ], delivery_cell['cell_coordinates'][1] - agent['coordinates'][1]
                    if dx < 0:
                        function_1()
                    elif dx > 0:
                        function_2()
                    elif dy < 0:
                        function_3()
                    elif dy > 0:
                        function_4()
                    function_6()
                
    Intention ID: [22]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up and move towards the delivery cell to deliver it. If the energy of the agent is low, it moves towards the battery spawn cells to recharge.
                def function_22():
                    global belief_set
                    agent = belief_set['agent'][1]
                    if agent['energy'] < 30:
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'batteries_spawn':
                                agent['coordinates'] = cell['cell_coordinates']
                                break
                    else:
                        parcel_picked = False
                        for parcel in belief_set['parcels'].values():
                            if parcel['coordinates'] == agent['coordinates']:
                                function_5()
                                parcel_picked = True
                                break
                        if not parcel_picked:
                            function_7()
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'delivery_cell':
                                while agent['coordinates'] != cell['cell_coordinates']:
                                    if agent['coordinates'][0] < cell['cell_coordinates'][0]:
                                        function_2()
                                    elif agent['coordinates'][0] > cell['cell_coordinates'][0]:
                                        function_1()
                                    elif agent['coordinates'][1] < cell['cell_coordinates'][1]:
                                        function_4()
                                    elif agent['coordinates'][1] > cell['cell_coordinates'][1]:
                                        function_3()
                                function_6()
                                break
                
Executable: False
Trigger function:
None



2024-11-07 18:40:47,618 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-11-07 18:40:47,618 - INFO - No desire has been triggered.
2024-11-07 18:40:47,619 - INFO - No desire triggered.
2024-11-07 18:40:49,262 - INFO - Desire added: 7. Desires:
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: False
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None


Desire 6: The agent should aim to collect and deliver as many parcels as possible while maintaining sufficient energy by collecting batteries when necessary.
    Intention ID: [20]
    Executable: False
    Description: The agent should aim to deliver the parcels it is currently carrying to the delivery cell, then move towards the nearest battery if its energy is below a certain threshold.
                def function_20():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    if agent['coordinates'] == delivery_cell and len(agent[
                        'parcels_carried_ids']) > 0:
                        function_6()
                    elif agent['coordinates'][0] < delivery_cell[0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell[0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell[1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell[1]:
                        function_3()
                    elif agent['energy'] < 30:
                        battery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                            'cell_type'] == 'batteries_spawn'][0]['cell_coordinates']
                        if agent['coordinates'] == battery_cell:
                            function_5()
                        elif agent['coordinates'][0] < battery_cell[0]:
                            function_2()
                        elif agent['coordinates'][0] > battery_cell[0]:
                            function_1()
                        elif agent['coordinates'][1] < battery_cell[1]:
                            function_4()
                        elif agent['coordinates'][1] > battery_cell[1]:
                            function_3()
                    else:
                        function_7()
                
    Intention ID: [21]
    Executable: False
    Description: The agent should move towards the delivery cell and drop off the parcels it is carrying to increase its score.
                def function_21():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    dx, dy = delivery_cell['cell_coordinates'][0] - agent['coordinates'][0
                        ], delivery_cell['cell_coordinates'][1] - agent['coordinates'][1]
                    if dx < 0:
                        function_1()
                    elif dx > 0:
                        function_2()
                    elif dy < 0:
                        function_3()
                    elif dy > 0:
                        function_4()
                    function_6()
                
    Intention ID: [22]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up and move towards the delivery cell to deliver it. If the energy of the agent is low, it moves towards the battery spawn cells to recharge.
                def function_22():
                    global belief_set
                    agent = belief_set['agent'][1]
                    if agent['energy'] < 30:
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'batteries_spawn':
                                agent['coordinates'] = cell['cell_coordinates']
                                break
                    else:
                        parcel_picked = False
                        for parcel in belief_set['parcels'].values():
                            if parcel['coordinates'] == agent['coordinates']:
                                function_5()
                                parcel_picked = True
                                break
                        if not parcel_picked:
                            function_7()
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'delivery_cell':
                                while agent['coordinates'] != cell['cell_coordinates']:
                                    if agent['coordinates'][0] < cell['cell_coordinates'][0]:
                                        function_2()
                                    elif agent['coordinates'][0] > cell['cell_coordinates'][0]:
                                        function_1()
                                    elif agent['coordinates'][1] < cell['cell_coordinates'][1]:
                                        function_4()
                                    elif agent['coordinates'][1] > cell['cell_coordinates'][1]:
                                        function_3()
                                function_6()
                                break
                
Executable: False
Trigger function:
None


Desire 7: The agent's long term goal is to efficiently navigate the map, collect all parcels and deliver them to the delivery cell, recharging energy and using keys to open doors if necessary.
Executable: False
Trigger function:
None



2024-11-07 18:40:56,472 - INFO - Testing intention 
def function():
    global belief_set
    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]['cell_coordinates']
    agent_position = belief_set['agent'][1]['coordinates']
    while agent_position != delivery_cell:
        if agent_position[0] > delivery_cell[0]:
            function_1()
            agent_position[0] -= 1
        elif agent_position[0] < delivery_cell[0]:
            function_2()
            agent_position[0] += 1
        elif agent_position[1] > delivery_cell[1]:
            function_3()
            agent_position[1] -= 1
        elif agent_position[1] < delivery_cell[1]:
            function_4()
            agent_position[1] += 1
    function_6()

2024-11-07 18:40:56,472 - INFO - The intention is valid.
2024-11-07 18:40:56,492 - INFO - Intention added to desire 7
2024-11-07 18:40:56,492 - INFO - Running intention 23 ...
2024-11-07 18:40:56,655 - INFO - Belief set thread started ...
2024-11-07 18:40:56,693 - INFO - Plan thread started ...
2024-11-07 18:40:56,699 - INFO - Started subprocess...
2024-11-07 18:40:56,699 - INFO - Belief set before intention 23 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 91}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:40:56,984 - INFO - Executing action action_3 ...
2024-11-07 18:40:57,213 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:57,565 - INFO - Executing action action_3 ...
2024-11-07 18:40:57,777 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:40:58,097 - INFO - Executing action action_6 ...
2024-11-07 18:40:58,322 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 90}}]
2024-11-07 18:40:58,642 - INFO - Plan thread terminated.
2024-11-07 18:40:58,679 - INFO - Belief set thread terminated.
2024-11-07 18:40:58,679 - INFO - Intention 23 execution has finished. Threads and subprocess terminated. Plan: ['action_3', 'action_3', 'action_6']. Events: [[], [], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 90}}]]
2024-11-07 18:40:58,680 - INFO - Belief set after intention 23 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 90}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': None}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': None}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:41:02,454 - INFO - Invalidating intention 23 ...
2024-11-07 18:41:14,867 - INFO - Testing intention 
def function():
    global belief_set
    
    # Find nearest parcel
    agent = belief_set['agent'][1]
    parcels = belief_set['parcels']
    nearest_parcel = min(parcels.values(), key=lambda p: abs(p['coordinates'][0] - agent['coordinates'][0]) + abs(p['coordinates'][1] - agent['coordinates'][1]))
    
    # Move towards the parcel
    while agent['coordinates'] != nearest_parcel['coordinates']:
        if agent['coordinates'][0] < nearest_parcel['coordinates'][0]:
            function_2()
        elif agent['coordinates'][0] > nearest_parcel['coordinates'][0]:
            function_1()
        elif agent['coordinates'][1] < nearest_parcel['coordinates'][1]:
            function_4()
        else:
            function_3()
    
    # Pick up the parcel
    function_5()
    
    # Find the delivery cell
    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
    
    # Move towards the delivery cell
    while agent['coordinates'] != delivery_cell['cell_coordinates']:
        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
            function_2()
        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
            function_1()
        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
            function_4()
        else:
            function_3()
    
    # Deliver the parcel
    function_6()
2024-11-07 18:41:14,868 - INFO - The intention is valid.
2024-11-07 18:41:14,870 - INFO - Intention added to desire 7
2024-11-07 18:41:14,876 - INFO - Running intention 24 ...
2024-11-07 18:41:15,127 - INFO - Belief set thread started ...
2024-11-07 18:41:15,133 - INFO - Plan thread started ...
2024-11-07 18:41:15,139 - INFO - Started subprocess...
2024-11-07 18:41:15,139 - INFO - Belief set before intention 24 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'has_key': False, 'score': 0, 'energy': 90}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': None}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': None}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:41:15,432 - INFO - Executing action action_5 ...
2024-11-07 18:41:15,642 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}]
2024-11-07 18:41:15,923 - INFO - Executing action action_3 ...
2024-11-07 18:41:16,174 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:16,505 - INFO - Executing action action_3 ...
2024-11-07 18:41:16,731 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:17,054 - INFO - Executing action action_3 ...
2024-11-07 18:41:17,267 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:17,561 - INFO - Executing action action_3 ...
2024-11-07 18:41:17,829 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:18,153 - INFO - Executing action action_3 ...
2024-11-07 18:41:18,378 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:18,696 - INFO - Executing action action_3 ...
2024-11-07 18:41:18,915 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:19,281 - INFO - Executing action action_3 ...
2024-11-07 18:41:19,503 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:19,851 - INFO - Executing action action_3 ...
2024-11-07 18:41:20,105 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:20,419 - INFO - Executing action action_3 ...
2024-11-07 18:41:20,638 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:20,952 - INFO - Executing action action_3 ...
2024-11-07 18:41:21,176 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:21,451 - INFO - Executing action action_3 ...
2024-11-07 18:41:21,731 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:22,082 - INFO - Executing action action_3 ...
2024-11-07 18:41:22,332 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:22,676 - INFO - Executing action action_3 ...
2024-11-07 18:41:22,881 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:23,259 - INFO - Executing action action_3 ...
2024-11-07 18:41:23,491 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:23,829 - INFO - Executing action action_3 ...
2024-11-07 18:41:24,111 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:24,399 - INFO - Executing action action_3 ...
2024-11-07 18:41:24,625 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:24,898 - INFO - Executing action action_3 ...
2024-11-07 18:41:25,153 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:25,472 - INFO - Executing action action_3 ...
2024-11-07 18:41:25,732 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:26,082 - INFO - Executing action action_3 ...
2024-11-07 18:41:26,317 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:26,598 - INFO - Executing action action_3 ...
2024-11-07 18:41:26,828 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:27,127 - INFO - Executing action action_3 ...
2024-11-07 18:41:27,351 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:27,735 - INFO - Executing action action_3 ...
2024-11-07 18:41:27,953 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:28,358 - INFO - Executing action action_3 ...
2024-11-07 18:41:28,600 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:28,880 - INFO - Executing action action_3 ...
2024-11-07 18:41:29,136 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:29,441 - INFO - Executing action action_3 ...
2024-11-07 18:41:29,677 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:29,981 - INFO - Executing action action_3 ...
2024-11-07 18:41:30,166 - ERROR - Error during intention 24 execution. Intention 24 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-07 18:41:30,241 - INFO - Action action_3 executed. Events received: []
2024-11-07 18:41:30,241 - INFO - Belief set thread terminated.
2024-11-07 18:41:30,534 - INFO - Plan thread terminated.
2024-11-07 18:41:30,577 - INFO - Intention 24 execution has finished. Threads and subprocess terminated. Plan: ['action_5', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-11-07 18:41:30,577 - INFO - Belief set after intention 24 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 89}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:41:38,916 - INFO - Invalidating intention 24 ...
2024-11-07 18:41:56,821 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    batteries_spawn = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'batteries_spawn'][0]
    parcels_spawn = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
    max_moves = belief_set['map']['width'] * belief_set['map']['height']  # set maximum moves to avoid infinite loop
    # navigate to batteries spawn
    for _ in range(max_moves):
        if agent['coordinates'][0] > batteries_spawn[0]:
            function_1()
        elif agent['coordinates'][0] < batteries_spawn[0]:
            function_2()
        elif agent['coordinates'][1] > batteries_spawn[1]:
            function_3()
        elif agent['coordinates'][1] < batteries_spawn[1]:
            function_4()
        else:
            break
    function_5()  # pick up battery
    # navigate to parcels spawn
    for _ in range(max_moves):
        if agent['coordinates'][0] > parcels_spawn[0]:
            function_1()
        elif agent['coordinates'][0] < parcels_spawn[0]:
            function_2()
        elif agent['coordinates'][1] > parcels_spawn[1]:
            function_3()
        elif agent['coordinates'][1] < parcels_spawn[1]:
            function_4()
        else:
            break
    function_5()  # pick up parcel
    # navigate to delivery cell
    for _ in range(max_moves):
        if agent['coordinates'][0] > delivery_cell[0]:
            function_1()
        elif agent['coordinates'][0] < delivery_cell[0]:
            function_2()
        elif agent['coordinates'][1] > delivery_cell[1]:
            function_3()
        elif agent['coordinates'][1] < delivery_cell[1]:
            function_4()
        else:
            break
    function_6()  # deliver parcel
2024-11-07 18:41:56,835 - INFO - The intention is valid.
2024-11-07 18:41:56,843 - INFO - Intention added to desire 7
2024-11-07 18:41:56,849 - INFO - Running intention 25 ...
2024-11-07 18:41:56,974 - INFO - Belief set thread started ...
2024-11-07 18:41:56,993 - INFO - Plan thread started ...
2024-11-07 18:41:56,999 - INFO - Started subprocess...
2024-11-07 18:41:56,999 - INFO - Belief set before intention 25 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 89}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [0, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {2: {'coordinates': [3, 2]}}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:41:57,328 - INFO - Executing action action_2 ...
2024-11-07 18:41:57,608 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 2], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 88}}]
2024-11-07 18:41:57,873 - INFO - Executing action action_2 ...
2024-11-07 18:41:58,129 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 87}}]
2024-11-07 18:41:58,405 - INFO - Executing action action_2 ...
2024-11-07 18:41:58,679 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [3, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [3, 2], 'score': 42, 'carried_by_id': 1}}]
2024-11-07 18:41:59,021 - INFO - Executing action action_2 ...
2024-11-07 18:41:59,232 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:41:59,587 - INFO - Executing action action_2 ...
2024-11-07 18:41:59,819 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:00,112 - INFO - Executing action action_2 ...
2024-11-07 18:42:00,318 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:00,605 - INFO - Executing action action_2 ...
2024-11-07 18:42:00,824 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:01,144 - INFO - Executing action action_2 ...
2024-11-07 18:42:01,393 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:01,730 - INFO - Executing action action_2 ...
2024-11-07 18:42:01,948 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:02,245 - INFO - Executing action action_2 ...
2024-11-07 18:42:02,488 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:02,813 - INFO - Executing action action_2 ...
2024-11-07 18:42:03,018 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:03,421 - INFO - Executing action action_2 ...
2024-11-07 18:42:03,667 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:04,029 - INFO - Executing action action_2 ...
2024-11-07 18:42:04,236 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:04,528 - INFO - Executing action action_2 ...
2024-11-07 18:42:04,747 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:05,096 - INFO - Executing action action_2 ...
2024-11-07 18:42:05,302 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:05,632 - INFO - Executing action action_2 ...
2024-11-07 18:42:05,844 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:06,114 - INFO - Executing action action_5 ...
2024-11-07 18:42:06,407 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 100}}, {'event_type': 'object removed', 'object_type': 'battery', 'object': {'id': 2, 'coordinates': [3, 2]}}]
2024-11-07 18:42:06,788 - INFO - Executing action action_2 ...
2024-11-07 18:42:07,016 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:07,339 - INFO - Executing action action_2 ...
2024-11-07 18:42:07,584 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:07,897 - INFO - Executing action action_2 ...
2024-11-07 18:42:08,158 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:08,488 - INFO - Executing action action_2 ...
2024-11-07 18:42:08,729 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:09,077 - INFO - Executing action action_2 ...
2024-11-07 18:42:09,328 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:09,666 - INFO - Executing action action_2 ...
2024-11-07 18:42:09,904 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:10,243 - INFO - Executing action action_2 ...
2024-11-07 18:42:10,456 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:10,800 - INFO - Executing action action_2 ...
2024-11-07 18:42:11,042 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:11,341 - INFO - Executing action action_2 ...
2024-11-07 18:42:11,547 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:11,834 - INFO - Executing action action_2 ...
2024-11-07 18:42:12,035 - ERROR - Error during intention 25 execution. Intention 25 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-07 18:42:12,060 - INFO - Action action_2 executed. Events received: []
2024-11-07 18:42:12,066 - INFO - Belief set thread terminated.
2024-11-07 18:42:12,395 - INFO - Plan thread terminated.
2024-11-07 18:42:12,408 - INFO - Intention 25 execution has finished. Threads and subprocess terminated. Plan: ['action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_5', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 2], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 88}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 87}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [3, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [3, 2], 'score': 42, 'carried_by_id': 1}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 100}}, {'event_type': 'object removed', 'object_type': 'battery', 'object': {'id': 2, 'coordinates': [3, 2]}}], [], [], [], [], [], [], [], [], [], []]
2024-11-07 18:42:12,408 - INFO - Belief set after intention 25 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 100}}, 'parcels': {3: {'id': 3, 'coordinates': [3, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [3, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:42:19,258 - INFO - Invalidating intention 25 ...
2024-11-07 18:42:19,283 - INFO - Invalidating intention 1 ...
2024-11-07 18:42:19,283 - INFO - Intention 1 is a base action. It cannot be invalidated.
2024-11-07 18:42:19,283 - INFO - Invalidating intention 2 ...
2024-11-07 18:42:19,289 - INFO - Intention 2 is a base action. It cannot be invalidated.
2024-11-07 18:42:19,289 - INFO - Invalidating intention 3 ...
2024-11-07 18:42:19,289 - INFO - Intention 3 is a base action. It cannot be invalidated.
2024-11-07 18:42:19,289 - INFO - Invalidating intention 4 ...
2024-11-07 18:42:19,295 - INFO - Intention 4 is a base action. It cannot be invalidated.
2024-11-07 18:42:19,295 - INFO - Invalidating intention 6 ...
2024-11-07 18:42:19,295 - INFO - Intention 6 is a base action. It cannot be invalidated.
2024-11-07 18:42:23,104 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: False
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None


Desire 6: The agent should aim to collect and deliver as many parcels as possible while maintaining sufficient energy by collecting batteries when necessary.
    Intention ID: [20]
    Executable: False
    Description: The agent should aim to deliver the parcels it is currently carrying to the delivery cell, then move towards the nearest battery if its energy is below a certain threshold.
                def function_20():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    if agent['coordinates'] == delivery_cell and len(agent[
                        'parcels_carried_ids']) > 0:
                        function_6()
                    elif agent['coordinates'][0] < delivery_cell[0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell[0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell[1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell[1]:
                        function_3()
                    elif agent['energy'] < 30:
                        battery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                            'cell_type'] == 'batteries_spawn'][0]['cell_coordinates']
                        if agent['coordinates'] == battery_cell:
                            function_5()
                        elif agent['coordinates'][0] < battery_cell[0]:
                            function_2()
                        elif agent['coordinates'][0] > battery_cell[0]:
                            function_1()
                        elif agent['coordinates'][1] < battery_cell[1]:
                            function_4()
                        elif agent['coordinates'][1] > battery_cell[1]:
                            function_3()
                    else:
                        function_7()
                
    Intention ID: [21]
    Executable: False
    Description: The agent should move towards the delivery cell and drop off the parcels it is carrying to increase its score.
                def function_21():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    dx, dy = delivery_cell['cell_coordinates'][0] - agent['coordinates'][0
                        ], delivery_cell['cell_coordinates'][1] - agent['coordinates'][1]
                    if dx < 0:
                        function_1()
                    elif dx > 0:
                        function_2()
                    elif dy < 0:
                        function_3()
                    elif dy > 0:
                        function_4()
                    function_6()
                
    Intention ID: [22]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up and move towards the delivery cell to deliver it. If the energy of the agent is low, it moves towards the battery spawn cells to recharge.
                def function_22():
                    global belief_set
                    agent = belief_set['agent'][1]
                    if agent['energy'] < 30:
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'batteries_spawn':
                                agent['coordinates'] = cell['cell_coordinates']
                                break
                    else:
                        parcel_picked = False
                        for parcel in belief_set['parcels'].values():
                            if parcel['coordinates'] == agent['coordinates']:
                                function_5()
                                parcel_picked = True
                                break
                        if not parcel_picked:
                            function_7()
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'delivery_cell':
                                while agent['coordinates'] != cell['cell_coordinates']:
                                    if agent['coordinates'][0] < cell['cell_coordinates'][0]:
                                        function_2()
                                    elif agent['coordinates'][0] > cell['cell_coordinates'][0]:
                                        function_1()
                                    elif agent['coordinates'][1] < cell['cell_coordinates'][1]:
                                        function_4()
                                    elif agent['coordinates'][1] > cell['cell_coordinates'][1]:
                                        function_3()
                                function_6()
                                break
                
Executable: False
Trigger function:
None


Desire 7: The agent's long term goal is to efficiently navigate the map, collect all parcels and deliver them to the delivery cell, recharging energy and using keys to open doors if necessary.
    Intention ID: [23]
    Executable: False
    Description: The short term goal is for the agent to move towards the delivery cell and deliver all the parcels it is carrying.
                def function_23():
                    global belief_set
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_position = belief_set['agent'][1]['coordinates']
                    while agent_position != delivery_cell:
                        if agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                    function_6()
                
    Intention ID: [24]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest parcel, pick it up and then navigate towards the delivery cell to deliver the parcel.
                def function_24():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    nearest_parcel = min(parcels.values(), key=lambda p: abs(p[
                        'coordinates'][0] - agent['coordinates'][0]) + abs(p['coordinates']
                        [1] - agent['coordinates'][1]))
                    while agent['coordinates'] != nearest_parcel['coordinates']:
                        if agent['coordinates'][0] < nearest_parcel['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > nearest_parcel['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < nearest_parcel['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_5()
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_6()
                
    Intention ID: [25]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest battery, pick it up, and then navigate towards the nearest parcel, pick it up, and finally move towards the delivery cell and deliver the parcel.
                def function_25():
                    global belief_set
                    agent = belief_set['agent'][1]
                    batteries_spawn = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'batteries_spawn'][0]
                    parcels_spawn = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_moves = belief_set['map']['width'] * belief_set['map']['height']
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > batteries_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < batteries_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > batteries_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < batteries_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > parcels_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > delivery_cell[0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell[0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell[1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell[1]:
                            function_4()
                        else:
                            break
                    function_6()
                
Executable: False
Trigger function:
None



2024-11-07 18:42:23,104 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-11-07 18:42:23,104 - INFO - No desire has been triggered.
2024-11-07 18:42:23,104 - INFO - No desire triggered.
2024-11-07 18:42:24,456 - INFO - Desire added: 8. Desires:
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: False
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None


Desire 6: The agent should aim to collect and deliver as many parcels as possible while maintaining sufficient energy by collecting batteries when necessary.
    Intention ID: [20]
    Executable: False
    Description: The agent should aim to deliver the parcels it is currently carrying to the delivery cell, then move towards the nearest battery if its energy is below a certain threshold.
                def function_20():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    if agent['coordinates'] == delivery_cell and len(agent[
                        'parcels_carried_ids']) > 0:
                        function_6()
                    elif agent['coordinates'][0] < delivery_cell[0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell[0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell[1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell[1]:
                        function_3()
                    elif agent['energy'] < 30:
                        battery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                            'cell_type'] == 'batteries_spawn'][0]['cell_coordinates']
                        if agent['coordinates'] == battery_cell:
                            function_5()
                        elif agent['coordinates'][0] < battery_cell[0]:
                            function_2()
                        elif agent['coordinates'][0] > battery_cell[0]:
                            function_1()
                        elif agent['coordinates'][1] < battery_cell[1]:
                            function_4()
                        elif agent['coordinates'][1] > battery_cell[1]:
                            function_3()
                    else:
                        function_7()
                
    Intention ID: [21]
    Executable: False
    Description: The agent should move towards the delivery cell and drop off the parcels it is carrying to increase its score.
                def function_21():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    dx, dy = delivery_cell['cell_coordinates'][0] - agent['coordinates'][0
                        ], delivery_cell['cell_coordinates'][1] - agent['coordinates'][1]
                    if dx < 0:
                        function_1()
                    elif dx > 0:
                        function_2()
                    elif dy < 0:
                        function_3()
                    elif dy > 0:
                        function_4()
                    function_6()
                
    Intention ID: [22]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up and move towards the delivery cell to deliver it. If the energy of the agent is low, it moves towards the battery spawn cells to recharge.
                def function_22():
                    global belief_set
                    agent = belief_set['agent'][1]
                    if agent['energy'] < 30:
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'batteries_spawn':
                                agent['coordinates'] = cell['cell_coordinates']
                                break
                    else:
                        parcel_picked = False
                        for parcel in belief_set['parcels'].values():
                            if parcel['coordinates'] == agent['coordinates']:
                                function_5()
                                parcel_picked = True
                                break
                        if not parcel_picked:
                            function_7()
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'delivery_cell':
                                while agent['coordinates'] != cell['cell_coordinates']:
                                    if agent['coordinates'][0] < cell['cell_coordinates'][0]:
                                        function_2()
                                    elif agent['coordinates'][0] > cell['cell_coordinates'][0]:
                                        function_1()
                                    elif agent['coordinates'][1] < cell['cell_coordinates'][1]:
                                        function_4()
                                    elif agent['coordinates'][1] > cell['cell_coordinates'][1]:
                                        function_3()
                                function_6()
                                break
                
Executable: False
Trigger function:
None


Desire 7: The agent's long term goal is to efficiently navigate the map, collect all parcels and deliver them to the delivery cell, recharging energy and using keys to open doors if necessary.
    Intention ID: [23]
    Executable: False
    Description: The short term goal is for the agent to move towards the delivery cell and deliver all the parcels it is carrying.
                def function_23():
                    global belief_set
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_position = belief_set['agent'][1]['coordinates']
                    while agent_position != delivery_cell:
                        if agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                    function_6()
                
    Intention ID: [24]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest parcel, pick it up and then navigate towards the delivery cell to deliver the parcel.
                def function_24():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    nearest_parcel = min(parcels.values(), key=lambda p: abs(p[
                        'coordinates'][0] - agent['coordinates'][0]) + abs(p['coordinates']
                        [1] - agent['coordinates'][1]))
                    while agent['coordinates'] != nearest_parcel['coordinates']:
                        if agent['coordinates'][0] < nearest_parcel['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > nearest_parcel['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < nearest_parcel['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_5()
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_6()
                
    Intention ID: [25]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest battery, pick it up, and then navigate towards the nearest parcel, pick it up, and finally move towards the delivery cell and deliver the parcel.
                def function_25():
                    global belief_set
                    agent = belief_set['agent'][1]
                    batteries_spawn = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'batteries_spawn'][0]
                    parcels_spawn = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_moves = belief_set['map']['width'] * belief_set['map']['height']
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > batteries_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < batteries_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > batteries_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < batteries_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > parcels_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > delivery_cell[0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell[0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell[1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell[1]:
                            function_4()
                        else:
                            break
                    function_6()
                
Executable: False
Trigger function:
None


Desire 8: The agent should aim to find and carry the key, in order to unlock the doors and facilitate easier movement around the grid.
Executable: False
Trigger function:
None



2024-11-07 18:42:31,088 - INFO - Testing intention 
def function():
    global belief_set
    key_coordinates = belief_set['keys'][2]['coordinates']
    agent_coordinates = belief_set['agent'][1]['coordinates']
    while agent_coordinates != key_coordinates:
        if agent_coordinates[0] < key_coordinates[0]:
            function_2()
            agent_coordinates[0] += 1
        elif agent_coordinates[0] > key_coordinates[0]:
            function_1()
            agent_coordinates[0] -= 1
        elif agent_coordinates[1] < key_coordinates[1]:
            function_4()
            agent_coordinates[1] += 1
        else:
            function_3()
            agent_coordinates[1] -= 1
    function_5()
2024-11-07 18:42:31,094 - INFO - The intention is valid.
2024-11-07 18:42:31,108 - INFO - Intention added to desire 8
2024-11-07 18:42:31,132 - INFO - Running intention 26 ...
2024-11-07 18:42:31,364 - INFO - Belief set thread started ...
2024-11-07 18:42:31,364 - INFO - Plan thread started ...
2024-11-07 18:42:31,402 - INFO - Started subprocess...
2024-11-07 18:42:31,402 - INFO - Belief set before intention 26 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [3, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 100}}, 'parcels': {3: {'id': 3, 'coordinates': [3, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [3, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': None}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:42:31,719 - INFO - Executing action action_1 ...
2024-11-07 18:42:31,937 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 99}}]
2024-11-07 18:42:32,246 - INFO - Executing action action_5 ...
2024-11-07 18:42:32,476 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, {'event_type': 'object changed', 'object_type': 'key', 'object': {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}]
2024-11-07 18:42:32,819 - INFO - Plan thread terminated.
2024-11-07 18:42:32,862 - INFO - Belief set thread terminated.
2024-11-07 18:42:32,900 - INFO - Intention 26 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_5']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': False, 'score': 0, 'energy': 99}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, {'event_type': 'object changed', 'object_type': 'key', 'object': {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}]]
2024-11-07 18:42:32,932 - INFO - Belief set after intention 26 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, 'parcels': {3: {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:42:40,280 - INFO - Testing trigger function 
def should_pursue_goal(belief_set):
    if not belief_set['agent'][1]['has_key']:
        return True
    else:
        if belief_set['doors']:
            return True
        else:
            return False
2024-11-07 18:42:40,281 - INFO - The trigger function is valid.
2024-11-07 18:42:40,281 - INFO - Trigger function added to desire 8.
2024-11-07 18:42:44,197 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: False
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None


Desire 6: The agent should aim to collect and deliver as many parcels as possible while maintaining sufficient energy by collecting batteries when necessary.
    Intention ID: [20]
    Executable: False
    Description: The agent should aim to deliver the parcels it is currently carrying to the delivery cell, then move towards the nearest battery if its energy is below a certain threshold.
                def function_20():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    if agent['coordinates'] == delivery_cell and len(agent[
                        'parcels_carried_ids']) > 0:
                        function_6()
                    elif agent['coordinates'][0] < delivery_cell[0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell[0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell[1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell[1]:
                        function_3()
                    elif agent['energy'] < 30:
                        battery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                            'cell_type'] == 'batteries_spawn'][0]['cell_coordinates']
                        if agent['coordinates'] == battery_cell:
                            function_5()
                        elif agent['coordinates'][0] < battery_cell[0]:
                            function_2()
                        elif agent['coordinates'][0] > battery_cell[0]:
                            function_1()
                        elif agent['coordinates'][1] < battery_cell[1]:
                            function_4()
                        elif agent['coordinates'][1] > battery_cell[1]:
                            function_3()
                    else:
                        function_7()
                
    Intention ID: [21]
    Executable: False
    Description: The agent should move towards the delivery cell and drop off the parcels it is carrying to increase its score.
                def function_21():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    dx, dy = delivery_cell['cell_coordinates'][0] - agent['coordinates'][0
                        ], delivery_cell['cell_coordinates'][1] - agent['coordinates'][1]
                    if dx < 0:
                        function_1()
                    elif dx > 0:
                        function_2()
                    elif dy < 0:
                        function_3()
                    elif dy > 0:
                        function_4()
                    function_6()
                
    Intention ID: [22]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up and move towards the delivery cell to deliver it. If the energy of the agent is low, it moves towards the battery spawn cells to recharge.
                def function_22():
                    global belief_set
                    agent = belief_set['agent'][1]
                    if agent['energy'] < 30:
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'batteries_spawn':
                                agent['coordinates'] = cell['cell_coordinates']
                                break
                    else:
                        parcel_picked = False
                        for parcel in belief_set['parcels'].values():
                            if parcel['coordinates'] == agent['coordinates']:
                                function_5()
                                parcel_picked = True
                                break
                        if not parcel_picked:
                            function_7()
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'delivery_cell':
                                while agent['coordinates'] != cell['cell_coordinates']:
                                    if agent['coordinates'][0] < cell['cell_coordinates'][0]:
                                        function_2()
                                    elif agent['coordinates'][0] > cell['cell_coordinates'][0]:
                                        function_1()
                                    elif agent['coordinates'][1] < cell['cell_coordinates'][1]:
                                        function_4()
                                    elif agent['coordinates'][1] > cell['cell_coordinates'][1]:
                                        function_3()
                                function_6()
                                break
                
Executable: False
Trigger function:
None


Desire 7: The agent's long term goal is to efficiently navigate the map, collect all parcels and deliver them to the delivery cell, recharging energy and using keys to open doors if necessary.
    Intention ID: [23]
    Executable: False
    Description: The short term goal is for the agent to move towards the delivery cell and deliver all the parcels it is carrying.
                def function_23():
                    global belief_set
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_position = belief_set['agent'][1]['coordinates']
                    while agent_position != delivery_cell:
                        if agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                    function_6()
                
    Intention ID: [24]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest parcel, pick it up and then navigate towards the delivery cell to deliver the parcel.
                def function_24():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    nearest_parcel = min(parcels.values(), key=lambda p: abs(p[
                        'coordinates'][0] - agent['coordinates'][0]) + abs(p['coordinates']
                        [1] - agent['coordinates'][1]))
                    while agent['coordinates'] != nearest_parcel['coordinates']:
                        if agent['coordinates'][0] < nearest_parcel['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > nearest_parcel['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < nearest_parcel['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_5()
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_6()
                
    Intention ID: [25]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest battery, pick it up, and then navigate towards the nearest parcel, pick it up, and finally move towards the delivery cell and deliver the parcel.
                def function_25():
                    global belief_set
                    agent = belief_set['agent'][1]
                    batteries_spawn = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'batteries_spawn'][0]
                    parcels_spawn = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_moves = belief_set['map']['width'] * belief_set['map']['height']
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > batteries_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < batteries_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > batteries_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < batteries_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > parcels_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > delivery_cell[0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell[0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell[1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell[1]:
                            function_4()
                        else:
                            break
                    function_6()
                
Executable: False
Trigger function:
None


Desire 8: The agent should aim to find and carry the key, in order to unlock the doors and facilitate easier movement around the grid.
    Intention ID: [26]
    Executable: True
    Description: The agent should move towards the key and pick it up to facilitate unlocking doors in the future.
                def function_26():
                    global belief_set
                    key_coordinates = belief_set['keys'][2]['coordinates']
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != key_coordinates:
                        if agent_coordinates[0] < key_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > key_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < key_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        else:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
Executable: True
Trigger function:
def function_dtf_4(belief_set):
    if not belief_set['agent'][1]['has_key']:
        return True
    elif belief_set['doors']:
        return True
    else:
        return False




2024-11-07 18:42:44,210 - INFO - Running trigger function for desire 8 ...
2024-11-07 18:42:44,210 - INFO - Trigger function for desire 8 has been executed. Result: True
2024-11-07 18:42:44,210 - INFO - Desire 8 could be triggered. Adding it to the list...
2024-11-07 18:42:44,210 - INFO - Desires triggered: [8]. Now randomly choosing which one to run.
2024-11-07 18:42:44,210 - INFO - Desire 8 was randomly chosen. Desire 8 has been triggered.
2024-11-07 18:42:44,222 - INFO - Desire 8 is about to be executed ...
2024-11-07 18:42:44,222 - INFO - Executing all valid intentions for desire 8 ...
2024-11-07 18:42:44,222 - INFO - Executing intention 26 ...
2024-11-07 18:42:44,222 - INFO - Running intention 26 ...
2024-11-07 18:42:44,390 - INFO - Belief set thread started ...
2024-11-07 18:42:44,415 - INFO - Plan thread started ...
2024-11-07 18:42:44,440 - INFO - Started subprocess...
2024-11-07 18:42:44,440 - INFO - Belief set before intention 26 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, 'parcels': {3: {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:42:44,765 - INFO - Executing action action_5 ...
2024-11-07 18:42:45,039 - INFO - Action action_5 executed. Events received: []
2024-11-07 18:42:45,399 - INFO - Plan thread terminated.
2024-11-07 18:42:45,457 - INFO - Belief set thread terminated.
2024-11-07 18:42:45,495 - INFO - Intention 26 execution has finished. Threads and subprocess terminated. Plan: ['action_5']. Events: [[]]
2024-11-07 18:42:45,495 - INFO - Belief set after intention 26 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, 'parcels': {3: {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:42:45,495 - INFO - Intention 26 has been executed with plan ['action_5'] and events [[]].
2024-11-07 18:42:49,181 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: False
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None


Desire 6: The agent should aim to collect and deliver as many parcels as possible while maintaining sufficient energy by collecting batteries when necessary.
    Intention ID: [20]
    Executable: False
    Description: The agent should aim to deliver the parcels it is currently carrying to the delivery cell, then move towards the nearest battery if its energy is below a certain threshold.
                def function_20():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    if agent['coordinates'] == delivery_cell and len(agent[
                        'parcels_carried_ids']) > 0:
                        function_6()
                    elif agent['coordinates'][0] < delivery_cell[0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell[0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell[1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell[1]:
                        function_3()
                    elif agent['energy'] < 30:
                        battery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                            'cell_type'] == 'batteries_spawn'][0]['cell_coordinates']
                        if agent['coordinates'] == battery_cell:
                            function_5()
                        elif agent['coordinates'][0] < battery_cell[0]:
                            function_2()
                        elif agent['coordinates'][0] > battery_cell[0]:
                            function_1()
                        elif agent['coordinates'][1] < battery_cell[1]:
                            function_4()
                        elif agent['coordinates'][1] > battery_cell[1]:
                            function_3()
                    else:
                        function_7()
                
    Intention ID: [21]
    Executable: False
    Description: The agent should move towards the delivery cell and drop off the parcels it is carrying to increase its score.
                def function_21():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    dx, dy = delivery_cell['cell_coordinates'][0] - agent['coordinates'][0
                        ], delivery_cell['cell_coordinates'][1] - agent['coordinates'][1]
                    if dx < 0:
                        function_1()
                    elif dx > 0:
                        function_2()
                    elif dy < 0:
                        function_3()
                    elif dy > 0:
                        function_4()
                    function_6()
                
    Intention ID: [22]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up and move towards the delivery cell to deliver it. If the energy of the agent is low, it moves towards the battery spawn cells to recharge.
                def function_22():
                    global belief_set
                    agent = belief_set['agent'][1]
                    if agent['energy'] < 30:
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'batteries_spawn':
                                agent['coordinates'] = cell['cell_coordinates']
                                break
                    else:
                        parcel_picked = False
                        for parcel in belief_set['parcels'].values():
                            if parcel['coordinates'] == agent['coordinates']:
                                function_5()
                                parcel_picked = True
                                break
                        if not parcel_picked:
                            function_7()
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'delivery_cell':
                                while agent['coordinates'] != cell['cell_coordinates']:
                                    if agent['coordinates'][0] < cell['cell_coordinates'][0]:
                                        function_2()
                                    elif agent['coordinates'][0] > cell['cell_coordinates'][0]:
                                        function_1()
                                    elif agent['coordinates'][1] < cell['cell_coordinates'][1]:
                                        function_4()
                                    elif agent['coordinates'][1] > cell['cell_coordinates'][1]:
                                        function_3()
                                function_6()
                                break
                
Executable: False
Trigger function:
None


Desire 7: The agent's long term goal is to efficiently navigate the map, collect all parcels and deliver them to the delivery cell, recharging energy and using keys to open doors if necessary.
    Intention ID: [23]
    Executable: False
    Description: The short term goal is for the agent to move towards the delivery cell and deliver all the parcels it is carrying.
                def function_23():
                    global belief_set
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_position = belief_set['agent'][1]['coordinates']
                    while agent_position != delivery_cell:
                        if agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                    function_6()
                
    Intention ID: [24]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest parcel, pick it up and then navigate towards the delivery cell to deliver the parcel.
                def function_24():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    nearest_parcel = min(parcels.values(), key=lambda p: abs(p[
                        'coordinates'][0] - agent['coordinates'][0]) + abs(p['coordinates']
                        [1] - agent['coordinates'][1]))
                    while agent['coordinates'] != nearest_parcel['coordinates']:
                        if agent['coordinates'][0] < nearest_parcel['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > nearest_parcel['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < nearest_parcel['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_5()
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_6()
                
    Intention ID: [25]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest battery, pick it up, and then navigate towards the nearest parcel, pick it up, and finally move towards the delivery cell and deliver the parcel.
                def function_25():
                    global belief_set
                    agent = belief_set['agent'][1]
                    batteries_spawn = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'batteries_spawn'][0]
                    parcels_spawn = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_moves = belief_set['map']['width'] * belief_set['map']['height']
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > batteries_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < batteries_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > batteries_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < batteries_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > parcels_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > delivery_cell[0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell[0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell[1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell[1]:
                            function_4()
                        else:
                            break
                    function_6()
                
Executable: False
Trigger function:
None


Desire 8: The agent should aim to find and carry the key, in order to unlock the doors and facilitate easier movement around the grid.
    Intention ID: [26]
    Executable: True
    Description: The agent should move towards the key and pick it up to facilitate unlocking doors in the future.
                def function_26():
                    global belief_set
                    key_coordinates = belief_set['keys'][2]['coordinates']
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != key_coordinates:
                        if agent_coordinates[0] < key_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > key_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < key_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        else:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
Executable: True
Trigger function:
def function_dtf_4(belief_set):
    if not belief_set['agent'][1]['has_key']:
        return True
    elif belief_set['doors']:
        return True
    else:
        return False




2024-11-07 18:42:49,181 - INFO - Running trigger function for desire 8 ...
2024-11-07 18:42:49,182 - INFO - Trigger function for desire 8 has been executed. Result: True
2024-11-07 18:42:49,182 - INFO - Desire 8 could be triggered. Adding it to the list...
2024-11-07 18:42:49,182 - INFO - Desires triggered: [8]. Now randomly choosing which one to run.
2024-11-07 18:42:49,182 - INFO - Desire 8 was randomly chosen. Desire 8 has been triggered.
2024-11-07 18:42:49,182 - INFO - Desire 8 is about to be executed ...
2024-11-07 18:42:49,182 - INFO - Executing all valid intentions for desire 8 ...
2024-11-07 18:42:49,182 - INFO - Executing intention 26 ...
2024-11-07 18:42:49,188 - INFO - Running intention 26 ...
2024-11-07 18:42:49,410 - INFO - Belief set thread started ...
2024-11-07 18:42:49,422 - INFO - Plan thread started ...
2024-11-07 18:42:49,441 - INFO - Started subprocess...
2024-11-07 18:42:49,441 - INFO - Belief set before intention 26 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, 'parcels': {3: {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:42:49,774 - INFO - Executing action action_5 ...
2024-11-07 18:42:50,003 - INFO - Action action_5 executed. Events received: []
2024-11-07 18:42:50,358 - INFO - Plan thread terminated.
2024-11-07 18:42:50,396 - INFO - Belief set thread terminated.
2024-11-07 18:42:50,409 - INFO - Intention 26 execution has finished. Threads and subprocess terminated. Plan: ['action_5']. Events: [[]]
2024-11-07 18:42:50,409 - INFO - Belief set after intention 26 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, 'parcels': {3: {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:42:50,409 - INFO - Intention 26 has been executed with plan ['action_5'] and events [[]].
2024-11-07 18:42:51,214 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: False
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None


Desire 6: The agent should aim to collect and deliver as many parcels as possible while maintaining sufficient energy by collecting batteries when necessary.
    Intention ID: [20]
    Executable: False
    Description: The agent should aim to deliver the parcels it is currently carrying to the delivery cell, then move towards the nearest battery if its energy is below a certain threshold.
                def function_20():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    if agent['coordinates'] == delivery_cell and len(agent[
                        'parcels_carried_ids']) > 0:
                        function_6()
                    elif agent['coordinates'][0] < delivery_cell[0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell[0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell[1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell[1]:
                        function_3()
                    elif agent['energy'] < 30:
                        battery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                            'cell_type'] == 'batteries_spawn'][0]['cell_coordinates']
                        if agent['coordinates'] == battery_cell:
                            function_5()
                        elif agent['coordinates'][0] < battery_cell[0]:
                            function_2()
                        elif agent['coordinates'][0] > battery_cell[0]:
                            function_1()
                        elif agent['coordinates'][1] < battery_cell[1]:
                            function_4()
                        elif agent['coordinates'][1] > battery_cell[1]:
                            function_3()
                    else:
                        function_7()
                
    Intention ID: [21]
    Executable: False
    Description: The agent should move towards the delivery cell and drop off the parcels it is carrying to increase its score.
                def function_21():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    dx, dy = delivery_cell['cell_coordinates'][0] - agent['coordinates'][0
                        ], delivery_cell['cell_coordinates'][1] - agent['coordinates'][1]
                    if dx < 0:
                        function_1()
                    elif dx > 0:
                        function_2()
                    elif dy < 0:
                        function_3()
                    elif dy > 0:
                        function_4()
                    function_6()
                
    Intention ID: [22]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up and move towards the delivery cell to deliver it. If the energy of the agent is low, it moves towards the battery spawn cells to recharge.
                def function_22():
                    global belief_set
                    agent = belief_set['agent'][1]
                    if agent['energy'] < 30:
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'batteries_spawn':
                                agent['coordinates'] = cell['cell_coordinates']
                                break
                    else:
                        parcel_picked = False
                        for parcel in belief_set['parcels'].values():
                            if parcel['coordinates'] == agent['coordinates']:
                                function_5()
                                parcel_picked = True
                                break
                        if not parcel_picked:
                            function_7()
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'delivery_cell':
                                while agent['coordinates'] != cell['cell_coordinates']:
                                    if agent['coordinates'][0] < cell['cell_coordinates'][0]:
                                        function_2()
                                    elif agent['coordinates'][0] > cell['cell_coordinates'][0]:
                                        function_1()
                                    elif agent['coordinates'][1] < cell['cell_coordinates'][1]:
                                        function_4()
                                    elif agent['coordinates'][1] > cell['cell_coordinates'][1]:
                                        function_3()
                                function_6()
                                break
                
Executable: False
Trigger function:
None


Desire 7: The agent's long term goal is to efficiently navigate the map, collect all parcels and deliver them to the delivery cell, recharging energy and using keys to open doors if necessary.
    Intention ID: [23]
    Executable: False
    Description: The short term goal is for the agent to move towards the delivery cell and deliver all the parcels it is carrying.
                def function_23():
                    global belief_set
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_position = belief_set['agent'][1]['coordinates']
                    while agent_position != delivery_cell:
                        if agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                    function_6()
                
    Intention ID: [24]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest parcel, pick it up and then navigate towards the delivery cell to deliver the parcel.
                def function_24():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    nearest_parcel = min(parcels.values(), key=lambda p: abs(p[
                        'coordinates'][0] - agent['coordinates'][0]) + abs(p['coordinates']
                        [1] - agent['coordinates'][1]))
                    while agent['coordinates'] != nearest_parcel['coordinates']:
                        if agent['coordinates'][0] < nearest_parcel['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > nearest_parcel['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < nearest_parcel['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_5()
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_6()
                
    Intention ID: [25]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest battery, pick it up, and then navigate towards the nearest parcel, pick it up, and finally move towards the delivery cell and deliver the parcel.
                def function_25():
                    global belief_set
                    agent = belief_set['agent'][1]
                    batteries_spawn = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'batteries_spawn'][0]
                    parcels_spawn = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_moves = belief_set['map']['width'] * belief_set['map']['height']
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > batteries_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < batteries_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > batteries_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < batteries_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > parcels_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > delivery_cell[0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell[0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell[1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell[1]:
                            function_4()
                        else:
                            break
                    function_6()
                
Executable: False
Trigger function:
None


Desire 8: The agent should aim to find and carry the key, in order to unlock the doors and facilitate easier movement around the grid.
    Intention ID: [26]
    Executable: True
    Description: The agent should move towards the key and pick it up to facilitate unlocking doors in the future.
                def function_26():
                    global belief_set
                    key_coordinates = belief_set['keys'][2]['coordinates']
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != key_coordinates:
                        if agent_coordinates[0] < key_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > key_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < key_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        else:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
Executable: True
Trigger function:
def function_dtf_4(belief_set):
    if not belief_set['agent'][1]['has_key']:
        return True
    elif belief_set['doors']:
        return True
    else:
        return False




2024-11-07 18:42:51,238 - INFO - Running trigger function for desire 8 ...
2024-11-07 18:42:51,238 - INFO - Trigger function for desire 8 has been executed. Result: True
2024-11-07 18:42:51,239 - INFO - Desire 8 could be triggered. Adding it to the list...
2024-11-07 18:42:51,239 - INFO - Desires triggered: [8]. Now randomly choosing which one to run.
2024-11-07 18:42:51,239 - INFO - Desire 8 was randomly chosen. Desire 8 has been triggered.
2024-11-07 18:42:51,239 - INFO - Desire 8 is about to be executed ...
2024-11-07 18:42:51,239 - INFO - Executing all valid intentions for desire 8 ...
2024-11-07 18:42:51,239 - INFO - Executing intention 26 ...
2024-11-07 18:42:51,239 - INFO - Running intention 26 ...
2024-11-07 18:42:51,375 - INFO - Belief set thread started ...
2024-11-07 18:42:51,407 - INFO - Plan thread started ...
2024-11-07 18:42:51,457 - INFO - Started subprocess...
2024-11-07 18:42:51,457 - INFO - Belief set before intention 26 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, 'parcels': {3: {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:42:51,770 - INFO - Executing action action_5 ...
2024-11-07 18:42:52,000 - INFO - Action action_5 executed. Events received: []
2024-11-07 18:42:52,366 - INFO - Plan thread terminated.
2024-11-07 18:42:52,379 - INFO - Belief set thread terminated.
2024-11-07 18:42:52,410 - INFO - Intention 26 execution has finished. Threads and subprocess terminated. Plan: ['action_5']. Events: [[]]
2024-11-07 18:42:52,411 - INFO - Belief set after intention 26 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, 'parcels': {3: {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:42:52,411 - INFO - Intention 26 has been executed with plan ['action_5'] and events [[]].
2024-11-07 18:42:57,599 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: False
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None


Desire 6: The agent should aim to collect and deliver as many parcels as possible while maintaining sufficient energy by collecting batteries when necessary.
    Intention ID: [20]
    Executable: False
    Description: The agent should aim to deliver the parcels it is currently carrying to the delivery cell, then move towards the nearest battery if its energy is below a certain threshold.
                def function_20():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    if agent['coordinates'] == delivery_cell and len(agent[
                        'parcels_carried_ids']) > 0:
                        function_6()
                    elif agent['coordinates'][0] < delivery_cell[0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell[0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell[1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell[1]:
                        function_3()
                    elif agent['energy'] < 30:
                        battery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                            'cell_type'] == 'batteries_spawn'][0]['cell_coordinates']
                        if agent['coordinates'] == battery_cell:
                            function_5()
                        elif agent['coordinates'][0] < battery_cell[0]:
                            function_2()
                        elif agent['coordinates'][0] > battery_cell[0]:
                            function_1()
                        elif agent['coordinates'][1] < battery_cell[1]:
                            function_4()
                        elif agent['coordinates'][1] > battery_cell[1]:
                            function_3()
                    else:
                        function_7()
                
    Intention ID: [21]
    Executable: False
    Description: The agent should move towards the delivery cell and drop off the parcels it is carrying to increase its score.
                def function_21():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    dx, dy = delivery_cell['cell_coordinates'][0] - agent['coordinates'][0
                        ], delivery_cell['cell_coordinates'][1] - agent['coordinates'][1]
                    if dx < 0:
                        function_1()
                    elif dx > 0:
                        function_2()
                    elif dy < 0:
                        function_3()
                    elif dy > 0:
                        function_4()
                    function_6()
                
    Intention ID: [22]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up and move towards the delivery cell to deliver it. If the energy of the agent is low, it moves towards the battery spawn cells to recharge.
                def function_22():
                    global belief_set
                    agent = belief_set['agent'][1]
                    if agent['energy'] < 30:
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'batteries_spawn':
                                agent['coordinates'] = cell['cell_coordinates']
                                break
                    else:
                        parcel_picked = False
                        for parcel in belief_set['parcels'].values():
                            if parcel['coordinates'] == agent['coordinates']:
                                function_5()
                                parcel_picked = True
                                break
                        if not parcel_picked:
                            function_7()
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'delivery_cell':
                                while agent['coordinates'] != cell['cell_coordinates']:
                                    if agent['coordinates'][0] < cell['cell_coordinates'][0]:
                                        function_2()
                                    elif agent['coordinates'][0] > cell['cell_coordinates'][0]:
                                        function_1()
                                    elif agent['coordinates'][1] < cell['cell_coordinates'][1]:
                                        function_4()
                                    elif agent['coordinates'][1] > cell['cell_coordinates'][1]:
                                        function_3()
                                function_6()
                                break
                
Executable: False
Trigger function:
None


Desire 7: The agent's long term goal is to efficiently navigate the map, collect all parcels and deliver them to the delivery cell, recharging energy and using keys to open doors if necessary.
    Intention ID: [23]
    Executable: False
    Description: The short term goal is for the agent to move towards the delivery cell and deliver all the parcels it is carrying.
                def function_23():
                    global belief_set
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_position = belief_set['agent'][1]['coordinates']
                    while agent_position != delivery_cell:
                        if agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                    function_6()
                
    Intention ID: [24]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest parcel, pick it up and then navigate towards the delivery cell to deliver the parcel.
                def function_24():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    nearest_parcel = min(parcels.values(), key=lambda p: abs(p[
                        'coordinates'][0] - agent['coordinates'][0]) + abs(p['coordinates']
                        [1] - agent['coordinates'][1]))
                    while agent['coordinates'] != nearest_parcel['coordinates']:
                        if agent['coordinates'][0] < nearest_parcel['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > nearest_parcel['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < nearest_parcel['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_5()
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_6()
                
    Intention ID: [25]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest battery, pick it up, and then navigate towards the nearest parcel, pick it up, and finally move towards the delivery cell and deliver the parcel.
                def function_25():
                    global belief_set
                    agent = belief_set['agent'][1]
                    batteries_spawn = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'batteries_spawn'][0]
                    parcels_spawn = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_moves = belief_set['map']['width'] * belief_set['map']['height']
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > batteries_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < batteries_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > batteries_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < batteries_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > parcels_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > delivery_cell[0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell[0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell[1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell[1]:
                            function_4()
                        else:
                            break
                    function_6()
                
Executable: False
Trigger function:
None


Desire 8: The agent should aim to find and carry the key, in order to unlock the doors and facilitate easier movement around the grid.
    Intention ID: [26]
    Executable: True
    Description: The agent should move towards the key and pick it up to facilitate unlocking doors in the future.
                def function_26():
                    global belief_set
                    key_coordinates = belief_set['keys'][2]['coordinates']
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != key_coordinates:
                        if agent_coordinates[0] < key_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > key_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < key_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        else:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
Executable: True
Trigger function:
def function_dtf_4(belief_set):
    if not belief_set['agent'][1]['has_key']:
        return True
    elif belief_set['doors']:
        return True
    else:
        return False




2024-11-07 18:42:57,599 - INFO - Running trigger function for desire 8 ...
2024-11-07 18:42:57,599 - INFO - Trigger function for desire 8 has been executed. Result: True
2024-11-07 18:42:57,599 - INFO - Desire 8 could be triggered. Adding it to the list...
2024-11-07 18:42:57,599 - INFO - Desires triggered: [8]. Now randomly choosing which one to run.
2024-11-07 18:42:57,599 - INFO - Desire 8 was randomly chosen. Desire 8 has been triggered.
2024-11-07 18:42:57,612 - INFO - Desire 8 is about to be executed ...
2024-11-07 18:42:57,612 - INFO - Executing all valid intentions for desire 8 ...
2024-11-07 18:42:57,612 - INFO - Executing intention 26 ...
2024-11-07 18:42:57,612 - INFO - Running intention 26 ...
2024-11-07 18:42:57,772 - INFO - Belief set thread started ...
2024-11-07 18:42:57,784 - INFO - Plan thread started ...
2024-11-07 18:42:57,797 - INFO - Started subprocess...
2024-11-07 18:42:57,797 - INFO - Belief set before intention 26 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, 'parcels': {3: {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:42:58,077 - INFO - Executing action action_5 ...
2024-11-07 18:42:58,281 - INFO - Action action_5 executed. Events received: []
2024-11-07 18:42:58,668 - INFO - Plan thread terminated.
2024-11-07 18:42:58,725 - INFO - Belief set thread terminated.
2024-11-07 18:42:58,750 - INFO - Intention 26 execution has finished. Threads and subprocess terminated. Plan: ['action_5']. Events: [[]]
2024-11-07 18:42:58,750 - INFO - Belief set after intention 26 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, 'parcels': {3: {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:42:58,750 - INFO - Intention 26 has been executed with plan ['action_5'] and events [[]].
2024-11-07 18:43:00,514 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: False
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None


Desire 6: The agent should aim to collect and deliver as many parcels as possible while maintaining sufficient energy by collecting batteries when necessary.
    Intention ID: [20]
    Executable: False
    Description: The agent should aim to deliver the parcels it is currently carrying to the delivery cell, then move towards the nearest battery if its energy is below a certain threshold.
                def function_20():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    if agent['coordinates'] == delivery_cell and len(agent[
                        'parcels_carried_ids']) > 0:
                        function_6()
                    elif agent['coordinates'][0] < delivery_cell[0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell[0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell[1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell[1]:
                        function_3()
                    elif agent['energy'] < 30:
                        battery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                            'cell_type'] == 'batteries_spawn'][0]['cell_coordinates']
                        if agent['coordinates'] == battery_cell:
                            function_5()
                        elif agent['coordinates'][0] < battery_cell[0]:
                            function_2()
                        elif agent['coordinates'][0] > battery_cell[0]:
                            function_1()
                        elif agent['coordinates'][1] < battery_cell[1]:
                            function_4()
                        elif agent['coordinates'][1] > battery_cell[1]:
                            function_3()
                    else:
                        function_7()
                
    Intention ID: [21]
    Executable: False
    Description: The agent should move towards the delivery cell and drop off the parcels it is carrying to increase its score.
                def function_21():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    dx, dy = delivery_cell['cell_coordinates'][0] - agent['coordinates'][0
                        ], delivery_cell['cell_coordinates'][1] - agent['coordinates'][1]
                    if dx < 0:
                        function_1()
                    elif dx > 0:
                        function_2()
                    elif dy < 0:
                        function_3()
                    elif dy > 0:
                        function_4()
                    function_6()
                
    Intention ID: [22]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up and move towards the delivery cell to deliver it. If the energy of the agent is low, it moves towards the battery spawn cells to recharge.
                def function_22():
                    global belief_set
                    agent = belief_set['agent'][1]
                    if agent['energy'] < 30:
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'batteries_spawn':
                                agent['coordinates'] = cell['cell_coordinates']
                                break
                    else:
                        parcel_picked = False
                        for parcel in belief_set['parcels'].values():
                            if parcel['coordinates'] == agent['coordinates']:
                                function_5()
                                parcel_picked = True
                                break
                        if not parcel_picked:
                            function_7()
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'delivery_cell':
                                while agent['coordinates'] != cell['cell_coordinates']:
                                    if agent['coordinates'][0] < cell['cell_coordinates'][0]:
                                        function_2()
                                    elif agent['coordinates'][0] > cell['cell_coordinates'][0]:
                                        function_1()
                                    elif agent['coordinates'][1] < cell['cell_coordinates'][1]:
                                        function_4()
                                    elif agent['coordinates'][1] > cell['cell_coordinates'][1]:
                                        function_3()
                                function_6()
                                break
                
Executable: False
Trigger function:
None


Desire 7: The agent's long term goal is to efficiently navigate the map, collect all parcels and deliver them to the delivery cell, recharging energy and using keys to open doors if necessary.
    Intention ID: [23]
    Executable: False
    Description: The short term goal is for the agent to move towards the delivery cell and deliver all the parcels it is carrying.
                def function_23():
                    global belief_set
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_position = belief_set['agent'][1]['coordinates']
                    while agent_position != delivery_cell:
                        if agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                    function_6()
                
    Intention ID: [24]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest parcel, pick it up and then navigate towards the delivery cell to deliver the parcel.
                def function_24():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    nearest_parcel = min(parcels.values(), key=lambda p: abs(p[
                        'coordinates'][0] - agent['coordinates'][0]) + abs(p['coordinates']
                        [1] - agent['coordinates'][1]))
                    while agent['coordinates'] != nearest_parcel['coordinates']:
                        if agent['coordinates'][0] < nearest_parcel['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > nearest_parcel['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < nearest_parcel['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_5()
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_6()
                
    Intention ID: [25]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest battery, pick it up, and then navigate towards the nearest parcel, pick it up, and finally move towards the delivery cell and deliver the parcel.
                def function_25():
                    global belief_set
                    agent = belief_set['agent'][1]
                    batteries_spawn = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'batteries_spawn'][0]
                    parcels_spawn = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_moves = belief_set['map']['width'] * belief_set['map']['height']
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > batteries_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < batteries_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > batteries_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < batteries_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > parcels_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > delivery_cell[0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell[0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell[1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell[1]:
                            function_4()
                        else:
                            break
                    function_6()
                
Executable: False
Trigger function:
None


Desire 8: The agent should aim to find and carry the key, in order to unlock the doors and facilitate easier movement around the grid.
    Intention ID: [26]
    Executable: True
    Description: The agent should move towards the key and pick it up to facilitate unlocking doors in the future.
                def function_26():
                    global belief_set
                    key_coordinates = belief_set['keys'][2]['coordinates']
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != key_coordinates:
                        if agent_coordinates[0] < key_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > key_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < key_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        else:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
Executable: True
Trigger function:
def function_dtf_4(belief_set):
    if not belief_set['agent'][1]['has_key']:
        return True
    elif belief_set['doors']:
        return True
    else:
        return False




2024-11-07 18:43:00,539 - INFO - Running trigger function for desire 8 ...
2024-11-07 18:43:00,539 - INFO - Trigger function for desire 8 has been executed. Result: True
2024-11-07 18:43:00,539 - INFO - Desire 8 could be triggered. Adding it to the list...
2024-11-07 18:43:00,539 - INFO - Desires triggered: [8]. Now randomly choosing which one to run.
2024-11-07 18:43:00,539 - INFO - Desire 8 was randomly chosen. Desire 8 has been triggered.
2024-11-07 18:43:00,577 - INFO - Desire 8 is about to be executed ...
2024-11-07 18:43:00,577 - INFO - Executing all valid intentions for desire 8 ...
2024-11-07 18:43:00,577 - INFO - Executing intention 26 ...
2024-11-07 18:43:00,577 - INFO - Running intention 26 ...
2024-11-07 18:43:00,765 - INFO - Belief set thread started ...
2024-11-07 18:43:00,771 - INFO - Plan thread started ...
2024-11-07 18:43:00,777 - INFO - Started subprocess...
2024-11-07 18:43:00,778 - INFO - Belief set before intention 26 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, 'parcels': {3: {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:43:01,046 - INFO - Executing action action_5 ...
2024-11-07 18:43:01,252 - INFO - Action action_5 executed. Events received: []
2024-11-07 18:43:01,586 - INFO - Belief set thread terminated.
2024-11-07 18:43:01,593 - INFO - Plan thread terminated.
2024-11-07 18:43:01,656 - INFO - Intention 26 execution has finished. Threads and subprocess terminated. Plan: ['action_5']. Events: [[]]
2024-11-07 18:43:01,668 - INFO - Belief set after intention 26 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, 'parcels': {3: {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:43:01,668 - INFO - Intention 26 has been executed with plan ['action_5'] and events [[]].
2024-11-07 18:43:03,444 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically manage energy usage while efficiently collecting and delivering parcels to increase its score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is for the agent to move towards the nearest parcel and pick it up.
                def function_7():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcel_coordinates = belief_set['parcels'][1]['coordinates']
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The short term goal is for the agent to efficiently deliver the parcels it is carrying to increase its score.
                def function_8():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    if belief_set['agent'][1]['parcels_carried_ids']:
                        if 'delivery' in [cell['cell_type'] for cell in belief_set['map'][
                            'grid'] if cell['cell_coordinates'] == agent_coordinates]:
                            function_6()
                        else:
                            if agent_coordinates[0] > 0:
                                function_1()
                            elif agent_coordinates[0] < belief_set['map']['width'] - 1:
                                function_2()
                            if agent_coordinates[1] > 0:
                                function_3()
                            elif agent_coordinates[1] < belief_set['map']['height'] - 1:
                                function_4()
                    else:
                        function_7()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is for the agent to deliver the parcels it carries to the closest walkable cell and put them down, to increase its score.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    carried_parcels = [parcels[parcel_id] for parcel_id in agent[
                        'parcels_carried_ids']]
                    if not carried_parcels:
                        return
                    current_coordinates = agent['coordinates']
                    target_coordinates = find_closest_walkable_cell(current_coordinates,
                        belief_set['map']['grid'])
                    while current_coordinates != target_coordinates:
                        if current_coordinates[0] < target_coordinates[0]:
                            function_2()
                        elif current_coordinates[0] > target_coordinates[0]:
                            function_1()
                        if current_coordinates[1] < target_coordinates[1]:
                            function_4()
                        elif current_coordinates[1] > target_coordinates[1]:
                            function_3()
                        current_coordinates = agent['coordinates']
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is to move to the nearest walkable cell on the map and put the carried parcels down there in order to increase its score.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map = belief_set['map']['grid']
                    walkable_cells = [cell for cell in map if cell['cell_type'] == 'walkable']
                    current_coordinates = agent['coordinates']
                    nearest_walkable_cell = min(walkable_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - current_coordinates[0]) + abs(cell[
                        'cell_coordinates'][1] - current_coordinates[1]))
                    target_coordinates = nearest_walkable_cell['cell_coordinates']
                    while agent['coordinates'] != target_coordinates:
                        if agent['coordinates'][0] < target_coordinates[0]:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > target_coordinates[0]:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < target_coordinates[1]:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > target_coordinates[1]:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to optimize the path for collecting all parcels in the grid and delivering them to the designated delivery cell in the shortest time possible while maintaining sufficient energy levels.
    Intention ID: [11]
    Executable: False
    Description: The short term goal of the agent is to move towards the nearest parcel, pick it up, and deliver it to the designated delivery cell.
                def function_11():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel in belief_set['parcels'].values():
                        distance = abs(parcel['coordinates'][0] - belief_set['agent'][1][
                            'coordinates'][0]) + abs(parcel['coordinates'][1] - belief_set[
                            'agent'][1]['coordinates'][1])
                        if distance < min_distance:
                            min_distance = distance
                            nearest_parcel = parcel
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < nearest_parcel[
                            'coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    agent_energy = belief_set['agent'][1]['energy']
    parcels = belief_set['parcels']
    if agent_energy < 10:
        return False
    if parcels:
        for parcel in parcels.values():
            if parcel['carried_by_id'] is None:
                return True
    return False



Desire 3: The agent's long term goal is to locate and collect all available batteries in the grid efficiently to ensure it maintains optimal energy levels for continuous operation and exploration of the environment.
    Intention ID: [12]
    Executable: False
    Description: The agent's short term goal is to navigate towards the cell containing batteries and pick them up to maintain its energy levels
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    while agent['coordinates'] != battery['coordinates']:
                        if agent['coordinates'][0] < battery['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > battery['coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < battery['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > battery['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to navigate towards the cell containing batteries and collect them to maintain the agent's energy levels.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    battery = belief_set['batteries'][1]
                    x_distance = battery['coordinates'][0] - agent['coordinates'][0]
                    y_distance = battery['coordinates'][1] - agent['coordinates'][1]
                    iterations = 0
                    max_iterations = 10
                    while agent['coordinates'] != battery['coordinates'
                        ] and iterations < max_iterations:
                        if x_distance > 0:
                            function_2()
                            x_distance -= 1
                        elif x_distance < 0:
                            function_1()
                            x_distance += 1
                        if y_distance > 0:
                            function_4()
                            y_distance -= 1
                        elif y_distance < 0:
                            function_3()
                            y_distance += 1
                        iterations += 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if 'batteries' in belief_set and belief_set['batteries'] and belief_set[
        'agent'][1]['energy'] < 100:
        return True
    return False



Desire 4: The agent's long term goal is to locate and secure all available keys in the grid, enabling access to locked areas and expanding the agent's exploration and operation capabilities in the environment.
    Intention ID: [14]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the cell containing the key and collect it, thereby increasing its ability to access locked areas in the environment.
                def function_14():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > key['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < key['coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > key['coordinates'][1]:
                            function_3()
                    function_5()
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to navigate to the nearest key and pick it up, avoiding obstacles and respecting the boundaries of the grid map.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    keys = belief_set['keys']
                    for key_id, key in keys.items():
                        if key['carried_by_id'] is None:
                            while agent['coordinates'] != key['coordinates']:
                                if agent['coordinates'][0] > key['coordinates'][0] and agent[
                                    'coordinates'][0] > 0:
                                    function_1()
                                elif agent['coordinates'][0] < key['coordinates'][0] and agent[
                                    'coordinates'][0] < belief_set['map']['width'] - 1:
                                    function_2()
                                elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                                    'coordinates'][1] > 0:
                                    function_3()
                                elif agent['coordinates'][1] < key['coordinates'][1] and agent[
                                    'coordinates'][1] < belief_set['map']['height'] - 1:
                                    function_4()
                                else:
                                    break
                            function_5()
                            break
                
    Intention ID: [16]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest available key and pick it up.
                def function_16():
                    global belief_set
                    agent = belief_set['agent'][1]
                    key = belief_set['keys'][1]
                    while agent['coordinates'] != key['coordinates']:
                        if agent['coordinates'][0] < key['coordinates'][0] and agent[
                            'coordinates'][0] < belief_set['map']['width'] - 1:
                            function_2()
                            agent['coordinates'][0] += 1
                        elif agent['coordinates'][0] > key['coordinates'][0] and agent[
                            'coordinates'][0] > 0:
                            function_1()
                            agent['coordinates'][0] -= 1
                        if agent['coordinates'][1] < key['coordinates'][1] and agent[
                            'coordinates'][1] < belief_set['map']['height'] - 1:
                            function_4()
                            agent['coordinates'][1] += 1
                        elif agent['coordinates'][1] > key['coordinates'][1] and agent[
                            'coordinates'][1] > 0:
                            function_3()
                            agent['coordinates'][1] -= 1
                    function_5()
                
Executable: False
Trigger function:
def function_dtf_3(belief_set):
    keys = belief_set['keys']
    agent = belief_set['agent'][1]
    for key_id, key in keys.items():
        if key['carried_by_id'] is None or key['carried_by_id'] != agent['id']:
            return True
    return False



Desire 5: The agent's long term goal is to identify the locations of all doors in the grid and create the most efficient path to unlock them using collected keys, thereby maximizing area accessibility and exploration potential in the environment.
    Intention ID: [17]
    Executable: False
    Description: The short term goal is for the agent to navigate towards the door and unlock it using the key it has.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    if agent['coordinates'][0] < door['coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > door['coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < door['coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > door['coordinates'][1]:
                        function_3()
                    elif agent['has_key']:
                        function_5()
                
    Intention ID: [18]
    Executable: False
    Description: The short term goal is to navigate the agent towards the door and unlock it using the key
                def function_18():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    while agent['coordinates'] != door['coordinates']:
                        if agent['coordinates'][0] < door['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > door['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < door['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    door['is_locked'] = False
                    return
                
    Intention ID: [19]
    Executable: False
    Description: The short term goal is for the agent to navigate to the nearest door and unlock it, provided it has a key.
                def function_19():
                    global belief_set
                    agent = belief_set['agent'][1]
                    door = belief_set['doors'][1]
                    agent_coordinates = agent['coordinates']
                    door_coordinates = door['coordinates']
                    while agent_coordinates != door_coordinates:
                        if agent_coordinates[0] < door_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > door_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        if agent_coordinates[1] < door_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > door_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                
Executable: False
Trigger function:
None


Desire 6: The agent should aim to collect and deliver as many parcels as possible while maintaining sufficient energy by collecting batteries when necessary.
    Intention ID: [20]
    Executable: False
    Description: The agent should aim to deliver the parcels it is currently carrying to the delivery cell, then move towards the nearest battery if its energy is below a certain threshold.
                def function_20():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    if agent['coordinates'] == delivery_cell and len(agent[
                        'parcels_carried_ids']) > 0:
                        function_6()
                    elif agent['coordinates'][0] < delivery_cell[0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell[0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell[1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell[1]:
                        function_3()
                    elif agent['energy'] < 30:
                        battery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                            'cell_type'] == 'batteries_spawn'][0]['cell_coordinates']
                        if agent['coordinates'] == battery_cell:
                            function_5()
                        elif agent['coordinates'][0] < battery_cell[0]:
                            function_2()
                        elif agent['coordinates'][0] > battery_cell[0]:
                            function_1()
                        elif agent['coordinates'][1] < battery_cell[1]:
                            function_4()
                        elif agent['coordinates'][1] > battery_cell[1]:
                            function_3()
                    else:
                        function_7()
                
    Intention ID: [21]
    Executable: False
    Description: The agent should move towards the delivery cell and drop off the parcels it is carrying to increase its score.
                def function_21():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    dx, dy = delivery_cell['cell_coordinates'][0] - agent['coordinates'][0
                        ], delivery_cell['cell_coordinates'][1] - agent['coordinates'][1]
                    if dx < 0:
                        function_1()
                    elif dx > 0:
                        function_2()
                    elif dy < 0:
                        function_3()
                    elif dy > 0:
                        function_4()
                    function_6()
                
    Intention ID: [22]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up and move towards the delivery cell to deliver it. If the energy of the agent is low, it moves towards the battery spawn cells to recharge.
                def function_22():
                    global belief_set
                    agent = belief_set['agent'][1]
                    if agent['energy'] < 30:
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'batteries_spawn':
                                agent['coordinates'] = cell['cell_coordinates']
                                break
                    else:
                        parcel_picked = False
                        for parcel in belief_set['parcels'].values():
                            if parcel['coordinates'] == agent['coordinates']:
                                function_5()
                                parcel_picked = True
                                break
                        if not parcel_picked:
                            function_7()
                        for cell in belief_set['map']['grid']:
                            if cell['cell_type'] == 'delivery_cell':
                                while agent['coordinates'] != cell['cell_coordinates']:
                                    if agent['coordinates'][0] < cell['cell_coordinates'][0]:
                                        function_2()
                                    elif agent['coordinates'][0] > cell['cell_coordinates'][0]:
                                        function_1()
                                    elif agent['coordinates'][1] < cell['cell_coordinates'][1]:
                                        function_4()
                                    elif agent['coordinates'][1] > cell['cell_coordinates'][1]:
                                        function_3()
                                function_6()
                                break
                
Executable: False
Trigger function:
None


Desire 7: The agent's long term goal is to efficiently navigate the map, collect all parcels and deliver them to the delivery cell, recharging energy and using keys to open doors if necessary.
    Intention ID: [23]
    Executable: False
    Description: The short term goal is for the agent to move towards the delivery cell and deliver all the parcels it is carrying.
                def function_23():
                    global belief_set
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_position = belief_set['agent'][1]['coordinates']
                    while agent_position != delivery_cell:
                        if agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                    function_6()
                
    Intention ID: [24]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest parcel, pick it up and then navigate towards the delivery cell to deliver the parcel.
                def function_24():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    nearest_parcel = min(parcels.values(), key=lambda p: abs(p[
                        'coordinates'][0] - agent['coordinates'][0]) + abs(p['coordinates']
                        [1] - agent['coordinates'][1]))
                    while agent['coordinates'] != nearest_parcel['coordinates']:
                        if agent['coordinates'][0] < nearest_parcel['coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > nearest_parcel['coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < nearest_parcel['coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_5()
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        else:
                            function_3()
                    function_6()
                
    Intention ID: [25]
    Executable: False
    Description: The agent's short term goal is to navigate towards the nearest battery, pick it up, and then navigate towards the nearest parcel, pick it up, and finally move towards the delivery cell and deliver the parcel.
                def function_25():
                    global belief_set
                    agent = belief_set['agent'][1]
                    batteries_spawn = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'batteries_spawn'][0]
                    parcels_spawn = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_moves = belief_set['map']['width'] * belief_set['map']['height']
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > batteries_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < batteries_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > batteries_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < batteries_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > parcels_spawn[0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn[0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn[1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn[1]:
                            function_4()
                        else:
                            break
                    function_5()
                    for _ in range(max_moves):
                        if agent['coordinates'][0] > delivery_cell[0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell[0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell[1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell[1]:
                            function_4()
                        else:
                            break
                    function_6()
                
Executable: False
Trigger function:
None


Desire 8: The agent should aim to find and carry the key, in order to unlock the doors and facilitate easier movement around the grid.
    Intention ID: [26]
    Executable: True
    Description: The agent should move towards the key and pick it up to facilitate unlocking doors in the future.
                def function_26():
                    global belief_set
                    key_coordinates = belief_set['keys'][2]['coordinates']
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != key_coordinates:
                        if agent_coordinates[0] < key_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > key_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < key_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        else:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                
Executable: True
Trigger function:
def function_dtf_4(belief_set):
    if not belief_set['agent'][1]['has_key']:
        return True
    elif belief_set['doors']:
        return True
    else:
        return False




2024-11-07 18:43:03,445 - INFO - Running trigger function for desire 8 ...
2024-11-07 18:43:03,445 - INFO - Trigger function for desire 8 has been executed. Result: True
2024-11-07 18:43:03,445 - INFO - Desire 8 could be triggered. Adding it to the list...
2024-11-07 18:43:03,445 - INFO - Desires triggered: [8]. Now randomly choosing which one to run.
2024-11-07 18:43:03,445 - INFO - Desire 8 was randomly chosen. Desire 8 has been triggered.
2024-11-07 18:43:03,451 - INFO - Desire 8 is about to be executed ...
2024-11-07 18:43:03,451 - INFO - Executing all valid intentions for desire 8 ...
2024-11-07 18:43:03,452 - INFO - Executing intention 26 ...
2024-11-07 18:43:03,452 - INFO - Running intention 26 ...
2024-11-07 18:43:03,563 - INFO - Belief set thread started ...
2024-11-07 18:43:03,581 - INFO - Plan thread started ...
2024-11-07 18:43:03,581 - INFO - Started subprocess...
2024-11-07 18:43:03,582 - INFO - Belief set before intention 26 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, 'parcels': {3: {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:43:03,881 - INFO - Executing action action_5 ...
2024-11-07 18:43:04,100 - INFO - Action action_5 executed. Events received: []
2024-11-07 18:43:04,406 - INFO - Plan thread terminated.
2024-11-07 18:43:04,450 - INFO - Belief set thread terminated.
2024-11-07 18:43:04,462 - INFO - Intention 26 execution has finished. Threads and subprocess terminated. Plan: ['action_5']. Events: [[]]
2024-11-07 18:43:04,469 - INFO - Belief set after intention 26 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [3, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'batteries_spawn'}, {'cell_coordinates': [3, 3], 'cell_type': 'walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [2, 2], 'parcels_carried_ids': [3, 4], 'has_key': True, 'score': 0, 'energy': 98}}, 'parcels': {3: {'id': 3, 'coordinates': [2, 2], 'score': 15, 'carried_by_id': 1}, 4: {'id': 4, 'coordinates': [2, 2], 'score': 42, 'carried_by_id': 1}}, 'batteries': {}, 'keys': {2: {'id': 2, 'coordinates': [2, 2], 'carried_by_id': 1}}, 'doors': {2: {'id': 2, 'coordinates': [0, 1]}, 3: {'id': 3, 'coordinates': [1, 0]}}}
2024-11-07 18:43:04,469 - INFO - Intention 26 has been executed with plan ['action_5'] and events [[]].
