
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        
[7]
Executable: False
Description: The short term goal is to navigate the agent to the nearest parcel, pick it up and deliver it to the delivery cell.
        def function_7():
            global belief_set
            agent_loc = belief_set['agent'][1]['coordinates']
            parcel_loc = belief_set['parcels'][1]['coordinates']
            delivery_loc = [cell['cell_coordinates'] for cell in belief_set['map'][
                'grid'] if cell['cell_type'] == 'delivery_cell'][0]
            while agent_loc != parcel_loc:
                if agent_loc[0] < parcel_loc[0]:
                    function_2()
                elif agent_loc[0] > parcel_loc[0]:
                    function_1()
                elif agent_loc[1] < parcel_loc[1]:
                    function_4()
                else:
                    function_3()
                agent_loc = belief_set['agent'][1]['coordinates']
            function_5()
            while agent_loc != delivery_loc:
                if agent_loc[0] < delivery_loc[0]:
                    function_2()
                elif agent_loc[0] > delivery_loc[0]:
                    function_1()
                elif agent_loc[1] < delivery_loc[1]:
                    function_4()
                else:
                    function_3()
                agent_loc = belief_set['agent'][1]['coordinates']
            function_6()
        
[8]
Executable: False
Description: The short term goal is to navigate the agent towards the parcel spawn cell to pick up a parcel. By doing so, the agent progresses towards its long-term goal of delivering parcels.
        def function_8():
            global belief_set
            agent = belief_set['agent'][1]
            parcel_spawn_cell = [cell for cell in belief_set['map']['grid'] if cell
                ['cell_type'] == 'parcels_spawn'][0]
            parcel_spawn_coordinates = parcel_spawn_cell['cell_coordinates']
            while agent['coordinates'] != parcel_spawn_coordinates:
                if agent['coordinates'][0] > parcel_spawn_coordinates[0]:
                    function_1()
                elif agent['coordinates'][0] < parcel_spawn_coordinates[0]:
                    function_2()
                elif agent['coordinates'][1] > parcel_spawn_coordinates[1]:
                    function_3()
                elif agent['coordinates'][1] < parcel_spawn_coordinates[1]:
                    function_4()
            function_5()
        
[9]
Executable: True
Description: The agent's short term goal is to navigate towards the nearest parcel spawn cell while ensuring that the path to the target is clear. If the path is not clear, the agent should alter its course and if the agent is stuck in a loop, it should break out of it after a certain number of attempts.
        def function_9():
            global belief_set
            agent = belief_set['agent'][1]
            target_cell = None
            for cell in belief_set['map']['grid']:
                if cell['cell_type'] == 'parcels_spawn':
                    target_cell = cell['cell_coordinates']
            if target_cell is None:
                return
            x_diff = target_cell[0] - agent['coordinates'][0]
            y_diff = target_cell[1] - agent['coordinates'][1]
            attempt_count = 0
            while agent['coordinates'] != target_cell and attempt_count < 100:
                if x_diff > 0:
                    function_2()
                    x_diff -= 1
                elif x_diff < 0:
                    function_1()
                    x_diff += 1
                if y_diff > 0:
                    function_4()
                    y_diff -= 1
                elif y_diff < 0:
                    function_3()
                    y_diff += 1
                attempt_count += 1
        
[10]
Executable: False
Description: The agent's short term goal is to move towards the nearest batteries spawn cell while ensuring that its energy level is above a certain threshold. If the energy level is below the threshold, the agent should pick up a battery to replenish its energy.
        def function_10():
            global belief_set
            agent = belief_set['agent'][1]
            battery_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                'cell_type'] == 'batteries_spawn'][0]['cell_coordinates']
            if agent['energy'] < 30:
                if agent['coordinates'] == battery_spawn:
                    function_5()
                else:
                    function_9()
            elif agent['coordinates'][0] < battery_spawn[0]:
                function_2()
            elif agent['coordinates'][0] > battery_spawn[0]:
                function_1()
            elif agent['coordinates'][1] < battery_spawn[1]:
                function_4()
            elif agent['coordinates'][1] > battery_spawn[1]:
                function_3()
        
[11]
Executable: False
Description: The agent's short term goal is to pick up a parcel from the spawn cell, if it's currently in that cell. If not, it should navigate towards the nearest parcel spawn cell.
        def function_11():
            global belief_set
            agent_coordinates = belief_set['agent'][1]['coordinates']
            for cell in belief_set['map']['grid']:
                if cell['cell_type'] == 'parcels_spawn':
                    spawn_coordinates = cell['cell_coordinates']
                    break
            if agent_coordinates == spawn_coordinates:
                function_5()
            else:
                function_9()
        
[12]
Executable: True
Description: The agent's short term goal is to navigate to the parcel spawn location, pick up any parcels, and then move to the delivery cell to drop off the parcels.
        def function_12():
            global belief_set
            current_position = belief_set['agent'][1]['coordinates']
            parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
            delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
            while current_position != parcel_spawn:
                if parcel_spawn[0] < current_position[0]:
                    function_1()
                elif parcel_spawn[0] > current_position[0]:
                    function_2()
                if parcel_spawn[1] < current_position[1]:
                    function_3()
                elif parcel_spawn[1] > current_position[1]:
                    function_4()
                current_position = belief_set['agent'][1]['coordinates']
            function_5()
            while current_position != delivery_cell:
                if delivery_cell[0] < current_position[0]:
                    function_1()
                elif delivery_cell[0] > current_position[0]:
                    function_2()
                if delivery_cell[1] < current_position[1]:
                    function_3()
                elif delivery_cell[1] > current_position[1]:
                    function_4()
                current_position = belief_set['agent'][1]['coordinates']
            function_6()
        
[13]
Executable: True
Description: The agent's short term goal is to navigate to the nearest parcel, pick it up, and then move to the delivery cell to drop off the parcel.
        def function_13():
            global belief_set
            function_9()
            function_5()
            function_12()
            function_6()
        
