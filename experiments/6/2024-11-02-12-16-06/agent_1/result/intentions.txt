
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        
[7]
Executable: False
Description: The short term goal is to move the agent towards the battery spawn if its energy level is below 50, otherwise move it towards the parcel spawn.
        def function_7():
            global belief_set
            agent = belief_set['agent'][1]
            if agent['energy'] < 50:
                battery_spawn = next(cell for cell in belief_set['map']['grid'] if 
                    cell['cell_type'] == 'batteries_spawn')['cell_coordinates']
                if agent['coordinates'][0] > battery_spawn[0]:
                    function_1()
                elif agent['coordinates'][0] < battery_spawn[0]:
                    function_2()
                elif agent['coordinates'][1] > battery_spawn[1]:
                    function_3()
                else:
                    function_4()
            else:
                parcel_spawn = next(cell for cell in belief_set['map']['grid'] if 
                    cell['cell_type'] == 'parcels_spawn')['cell_coordinates']
                if agent['coordinates'][0] > parcel_spawn[0]:
                    function_1()
                elif agent['coordinates'][0] < parcel_spawn[0]:
                    function_2()
                elif agent['coordinates'][1] > parcel_spawn[1]:
                    function_3()
                else:
                    function_4()
        
[8]
Executable: False
Description: The short term goal is to move the agent to the cell containing the parcels and pick them up.
        def function_8():
            global belief_set
            agent_coordinates = belief_set['agent'][1]['coordinates']
            parcels_coordinates = belief_set['parcels'][1]['coordinates']
            while agent_coordinates[0] < parcels_coordinates[0]:
                function_2()
                agent_coordinates[0] += 1
            while agent_coordinates[0] > parcels_coordinates[0]:
                function_1()
                agent_coordinates[0] -= 1
            while agent_coordinates[1] < parcels_coordinates[1]:
                function_4()
                agent_coordinates[1] += 1
            while agent_coordinates[1] > parcels_coordinates[1]:
                function_3()
                agent_coordinates[1] -= 1
            function_5()
        
[9]
Executable: False
Description: The short term goal is to move the agent to the cell containing the delivery point and deliver the parcels.
        def function_9():
            global belief_set
            delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                ['cell_type'] == 'delivery_cell')
            agent = belief_set['agent'][1]
            while agent['coordinates'] != delivery_cell['cell_coordinates']:
                if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                    function_2()
                elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                    function_1()
                elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                    function_4()
                else:
                    function_3()
            function_6()
            return
        
[10]
Executable: False
Description: The agent's short term goal is to move to the cell containing the delivery point and deliver all the parcels it is carrying.
        def function_10():
            global belief_set
            delivery_cell = None
            for cell in belief_set['map']['grid']:
                if cell['cell_type'] == 'delivery_cell':
                    delivery_cell = cell
                    break
            agent = belief_set['agent'][1]
            while agent['coordinates'] != delivery_cell['cell_coordinates']:
                if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                    function_2()
                elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                    function_1()
                elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                    function_4()
                else:
                    function_3()
            function_6()
        
[11]
Executable: True
Description: The agent should aim to move to the delivery cell and drop off all the parcels it is carrying, while also checking that it has enough energy to perform the action. If the agent finds itself on the batteries spawn cell while having less than 50% energy, it should pick up a battery before moving to the delivery cell.
        def function_11():
            global belief_set
            delivery_cell = [item['cell_coordinates'] for item in belief_set['map']
                ['grid'] if item['cell_type'] == 'delivery_cell'][0]
            agent = belief_set['agent'][1]
            while agent['coordinates'] != delivery_cell:
                if agent['coordinates'][0] > delivery_cell[0]:
                    function_1()
                elif agent['coordinates'][0] < delivery_cell[0]:
                    function_2()
                elif agent['coordinates'][1] > delivery_cell[1]:
                    function_3()
                elif agent['coordinates'][1] < delivery_cell[1]:
                    function_4()
                agent = belief_set['agent'][1]
                if agent['coordinates'] == [item['cell_coordinates'] for item in
                    belief_set['map']['grid'] if item['cell_type'] == 'batteries_spawn'
                    ][0] and agent['energy'] < 50:
                    function_5()
            function_6()
        
[12]
Executable: False
Description: The agent should move towards the parcels spawn cell, pick up all available parcels and then proceed to the delivery cell if the energy level allows it. If the energy is less than 50%, the agent should go to the batteries spawn cell first, pick up a battery and then proceed to the delivery cell.
        def function_12():
            global belief_set
            while belief_set['agent'][1]['coordinates'] != [0, 0]:
                if belief_set['agent'][1]['coordinates'][0] > 0:
                    function_1()
                elif belief_set['agent'][1]['coordinates'][1] > 0:
                    function_3()
            function_5()
            if belief_set['agent'][1]['energy'] < 50:
                while belief_set['agent'][1]['coordinates'] != [2, 0]:
                    if belief_set['agent'][1]['coordinates'][0] < 2:
                        function_2()
                    elif belief_set['agent'][1]['coordinates'][1] > 0:
                        function_3()
                function_5()
            while belief_set['agent'][1]['coordinates'] != [2, 3]:
                if belief_set['agent'][1]['coordinates'][0] < 2:
                    function_2()
                elif belief_set['agent'][1]['coordinates'][1] < 3:
                    function_4()
            function_6()
        
[13]
Executable: False
Description: The agent should aim to move towards the batteries spawn cell, pick up a battery if the energy level is less than 50%, then proceed to visit all walkable cells on the grid.
        def function_13():
            global belief_set
            agent = belief_set['agent'][1]
            if agent['energy'] < 50:
                function_2()
                function_5()
            elif agent['coordinates'][0] < belief_set['map']['width'] - 1:
                function_2()
            elif agent['coordinates'][1] < belief_set['map']['height'] - 1:
                function_4()
            else:
                function_1()
                function_3()
        
[14]
Executable: False
Description: The agent should aim to move towards the battery spawn cell to pick up a battery if the energy level is less than 50%. If the energy level is above 50%, the agent should move towards the parcels spawn cell, pick up all available parcels, and then proceed to the delivery cell.
        def function_14():
            global belief_set
            agent = belief_set['agent'][1]
            if agent['energy'] < 50:
                function_2()
            else:
                function_12()
        
[15]
Executable: False
Description: The agent should aim to move to the nearest unexplored walkable cell. If the agent's energy level drops below 50%, it should first go to the nearest batteries spawn cell to recharge.
        def function_15():
            global belief_set
            agent = belief_set['agent'][1]
            location = agent['coordinates']
            energy = agent['energy']
            if energy < 50:
                function_14()
            else:
                unexplored_cells = [cell for cell in belief_set['map']['grid'] if 
                    cell['cell_type'] == 'walkable' and cell['cell_coordinates'] !=
                    location]
                if unexplored_cells:
                    nearest_cell = min(unexplored_cells, key=lambda cell: abs(cell[
                        'cell_coordinates'][0] - location[0]) + abs(cell[
                        'cell_coordinates'][1] - location[1]))
                    while location != nearest_cell['cell_coordinates']:
                        if nearest_cell['cell_coordinates'][0] < location[0]:
                            function_1()
                        elif nearest_cell['cell_coordinates'][0] > location[0]:
                            function_2()
                        elif nearest_cell['cell_coordinates'][1] < location[1]:
                            function_3()
                        elif nearest_cell['cell_coordinates'][1] > location[1]:
                            function_4()
                        location = belief_set['agent'][1]['coordinates']
        
[16]
Executable: False
Description: The short term goal is for the agent to move towards the battery spawn cell, pick up a battery if the energy level is less than 50%, and then go towards the parcels spawn cell, pick up all available parcels, and finally, proceed to the delivery cell.
        def function_16():
            global belief_set
            if belief_set['agent'][1]['energy'] < 50:
                function_14()
            else:
                function_12()
        
[17]
Executable: False
Description: The short term goal is to check the agent's energy level. If it's less than 50%, the agent should move to the battery spawn cell and pick up a battery. If the energy level is above 50%, the agent should explore the nearest unvisited walkable cell.
        def function_17():
            global belief_set
            agent = belief_set['agent'][1]
            if agent['energy'] < 50:
                function_14()
            elif agent['coordinates'][0] + 1 < belief_set['map']['width'] and {
                'cell_coordinates': [agent['coordinates'][0] + 1, agent[
                'coordinates'][1]], 'cell_type': 'walkable'} in belief_set['map'][
                'grid']:
                function_2()
            elif agent['coordinates'][0] - 1 >= 0 and {'cell_coordinates': [agent[
                'coordinates'][0] - 1, agent['coordinates'][1]], 'cell_type':
                'walkable'} in belief_set['map']['grid']:
                function_1()
            elif agent['coordinates'][1] + 1 < belief_set['map']['height'] and {
                'cell_coordinates': [agent['coordinates'][0], agent['coordinates'][
                1] + 1], 'cell_type': 'walkable'} in belief_set['map']['grid']:
                function_4()
            elif agent['coordinates'][1] - 1 >= 0 and {'cell_coordinates': [agent[
                'coordinates'][0], agent['coordinates'][1] - 1], 'cell_type':
                'walkable'} in belief_set['map']['grid']:
                function_3()
        
[18]
Executable: False
Description: The short term goal is for the agent to move towards and pickup a parcel if its energy is above 50% and it is not currently carrying any parcels. If the agent's energy is below 50%, it will move towards and pickup a battery. If the agent is carrying a parcel, it will move towards the delivery cell to deliver the parcel.
        def function_18():
            global belief_set
            agent = belief_set['agent'][1]
            if agent['energy'] > 50:
                if not agent['parcels_carried_ids']:
                    if belief_set['parcels'] and agent['coordinates'][0] > belief_set[
                        'parcels'][list(belief_set['parcels'].keys())[0]]['coordinates'
                        ][0]:
                        function_1()
                    elif belief_set['parcels'] and agent['coordinates'][0
                        ] < belief_set['parcels'][list(belief_set['parcels'].keys())[0]
                        ]['coordinates'][0]:
                        function_2()
                    elif belief_set['parcels'] and agent['coordinates'][1
                        ] > belief_set['parcels'][list(belief_set['parcels'].keys())[0]
                        ]['coordinates'][1]:
                        function_3()
                    elif belief_set['parcels'] and agent['coordinates'][1
                        ] < belief_set['parcels'][list(belief_set['parcels'].keys())[0]
                        ]['coordinates'][1]:
                        function_4()
                    else:
                        function_5()
                elif agent['coordinates'][0] > belief_set['map']['grid'][11][
                    'cell_coordinates'][0]:
                    function_1()
                elif agent['coordinates'][0] < belief_set['map']['grid'][11][
                    'cell_coordinates'][0]:
                    function_2()
                elif agent['coordinates'][1] > belief_set['map']['grid'][11][
                    'cell_coordinates'][1]:
                    function_3()
                elif agent['coordinates'][1] < belief_set['map']['grid'][11][
                    'cell_coordinates'][1]:
                    function_4()
                else:
                    function_6()
            elif belief_set['batteries'] and agent['coordinates'][0] > belief_set[
                'batteries'][list(belief_set['batteries'].keys())[0]]['coordinates'][0
                ]:
                function_1()
            elif belief_set['batteries'] and agent['coordinates'][0] < belief_set[
                'batteries'][list(belief_set['batteries'].keys())[0]]['coordinates'][0
                ]:
                function_2()
            elif belief_set['batteries'] and agent['coordinates'][1] > belief_set[
                'batteries'][list(belief_set['batteries'].keys())[0]]['coordinates'][1
                ]:
                function_3()
            elif belief_set['batteries'] and agent['coordinates'][1] < belief_set[
                'batteries'][list(belief_set['batteries'].keys())[0]]['coordinates'][1
                ]:
                function_4()
            else:
                function_5()
        
[19]
Executable: False
Description: The agent should aim to move towards the parcels_spawn location, picking up any parcels on the way, and then move to the batteries_spawn location, picking up batteries if its energy is less than 50%. The agent should then move towards the delivery_cell to drop off any parcels it is carrying.
        def function_19():
            global belief_set
            agent_location = belief_set['agent'][1]['coordinates']
            parcels_spawn_location = [cell['cell_coordinates'] for cell in
                belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
            batteries_spawn_location = [cell['cell_coordinates'] for cell in
                belief_set['map']['grid'] if cell['cell_type'] == 'batteries_spawn'][0]
            delivery_cell_location = [cell['cell_coordinates'] for cell in
                belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
            while agent_location != parcels_spawn_location:
                if agent_location[0] < parcels_spawn_location[0]:
                    function_2()
                elif agent_location[0] > parcels_spawn_location[0]:
                    function_1()
                elif agent_location[1] < parcels_spawn_location[1]:
                    function_4()
                else:
                    function_3()
                function_5()
            while agent_location != batteries_spawn_location:
                if agent_location[0] < batteries_spawn_location[0]:
                    function_2()
                elif agent_location[0] > batteries_spawn_location[0]:
                    function_1()
                elif agent_location[1] < batteries_spawn_location[1]:
                    function_4()
                else:
                    function_3()
                if belief_set['agent'][1]['energy'] < 50:
                    function_5()
            while agent_location != delivery_cell_location:
                if agent_location[0] < delivery_cell_location[0]:
                    function_2()
                elif agent_location[0] > delivery_cell_location[0]:
                    function_1()
                elif agent_location[1] < delivery_cell_location[1]:
                    function_4()
                else:
                    function_3()
            function_6()
        
[20]
Executable: True
Description: The agent's short term goal is to move towards the 'parcels_spawn' location, pick up any parcels, move to the 'batteries_spawn' location, pick up batteries if its energy is less than 50%, then move towards the 'delivery_cell' while avoiding non-walkable areas to drop off any parcels it is carrying.
        def function_20():
            global belief_set
            agent = belief_set['agent'][1]
            parcels_spawn = next(cell['cell_coordinates'] for cell in belief_set[
                'map']['grid'] if cell['cell_type'] == 'parcels_spawn')
            batteries_spawn = next(cell['cell_coordinates'] for cell in belief_set[
                'map']['grid'] if cell['cell_type'] == 'batteries_spawn')
            delivery_cell = next(cell['cell_coordinates'] for cell in belief_set[
                'map']['grid'] if cell['cell_type'] == 'delivery_cell')
            while agent['coordinates'] != parcels_spawn:
                if agent['coordinates'][0] < parcels_spawn[0]:
                    function_2()
                elif agent['coordinates'][0] > parcels_spawn[0]:
                    function_1()
                elif agent['coordinates'][1] < parcels_spawn[1]:
                    function_4()
                elif agent['coordinates'][1] > parcels_spawn[1]:
                    function_3()
                agent = belief_set['agent'][1]
            function_5()
            while agent['coordinates'] != batteries_spawn:
                if agent['coordinates'][0] < batteries_spawn[0]:
                    function_2()
                elif agent['coordinates'][0] > batteries_spawn[0]:
                    function_1()
                elif agent['coordinates'][1] < batteries_spawn[1]:
                    function_4()
                elif agent['coordinates'][1] > batteries_spawn[1]:
                    function_3()
                agent = belief_set['agent'][1]
            if agent['energy'] < 50:
                function_5()
            while agent['coordinates'] != delivery_cell:
                if agent['coordinates'][0] < delivery_cell[0]:
                    function_2()
                elif agent['coordinates'][0] > delivery_cell[0]:
                    function_1()
                elif agent['coordinates'][1] < delivery_cell[1]:
                    function_4()
                elif agent['coordinates'][1] > delivery_cell[1]:
                    function_3()
                agent = belief_set['agent'][1]
            function_6()
        
[21]
Executable: True
Description: The agent should aim to move towards the parcels spawn location, pick up any parcels, and then move to the delivery cell to drop off the parcels it is carrying. During this process, it should also check its energy levels. If the energy level is less than 50% and the agent is on the batteries spawn cell, it should pick up a battery.
        def function_21():
            global belief_set
            function_20()
            agent = belief_set['agent'][1]
            if agent['energy'] < 50:
                for cell in belief_set['map']['grid']:
                    if cell['cell_type'] == 'batteries_spawn' and cell[
                        'cell_coordinates'] == agent['coordinates']:
                        function_5()
            function_11()
        
[22]
Executable: False
Description: The agent should aim to efficiently pick up parcels and batteries when necessary, and deliver parcels to the delivery cell, while maintaining a high energy level.
        def function_22():
            global belief_set
            function_20()
            if belief_set['agent'][1]['energy'] < 50:
                function_5()
            function_11()
            function_6()
        
[23]
Executable: True
Description: The agent's short-term goal is to move towards the parcel spawn location, pick up any parcels, then move to the battery spawn location, pick up a battery if its energy is less than 50%, and finally move towards the delivery cell to drop off the parcels it is carrying.
        def function_23():
            global belief_set
            function_20()
            if belief_set['agent'][1]['energy'] < 50:
                function_5()
            function_11()
        
