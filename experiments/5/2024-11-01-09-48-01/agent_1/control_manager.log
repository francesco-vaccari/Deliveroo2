2024-11-01 09:48:02,552 - INFO - Loading actions from agent_dir/actions.json ...
2024-11-01 09:48:02,619 - INFO - Actions loaded: 
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        

2024-11-01 09:48:38,699 - INFO - Checking if a desire has been triggered ...
Desires: Empty
2024-11-01 09:48:38,743 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-11-01 09:48:38,768 - INFO - No desire has been triggered.
2024-11-01 09:48:38,768 - INFO - No desire triggered.
2024-11-01 09:48:40,497 - INFO - Desire added: 1. Desires:
Desire 1: The agent's long term goal is to explore the map, identify all parcel spawn locations and delivery cells, and plan optimal routes between them for efficient parcel delivery.
Executable: False
Trigger function:
None



2024-11-01 09:48:52,425 - INFO - Testing intention 
def function():
	global belief_set
	agent = belief_set['agent'][1]
	parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
	delivery_cell = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
	while agent['coordinates'] != parcel_spawn['cell_coordinates']:
		if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
			function_2()
		elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
			function_1()
		elif agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
			function_4()
		elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
			function_3()
	function_5()
	while agent['coordinates'] != delivery_cell['cell_coordinates']:
		if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
			function_2()
		elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
			function_1()
		elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
			function_4()
		elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
			function_3()
	function_6()
2024-11-01 09:48:52,444 - INFO - The intention is valid.
2024-11-01 09:48:52,482 - INFO - Intention added to desire 1
2024-11-01 09:48:52,489 - INFO - Running intention 7 ...
2024-11-01 09:48:52,645 - INFO - Belief set thread started ...
2024-11-01 09:48:52,700 - INFO - Plan thread started ...
2024-11-01 09:48:52,700 - INFO - Started subprocess...
2024-11-01 09:48:52,700 - INFO - Belief set before intention 7 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 2: {'id': 2, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:48:53,002 - INFO - Executing action action_1 ...
2024-11-01 09:48:53,240 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 0}}]
2024-11-01 09:48:53,618 - INFO - Executing action action_1 ...
2024-11-01 09:48:53,841 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:48:54,109 - INFO - Executing action action_1 ...
2024-11-01 09:48:54,351 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:48:54,716 - INFO - Executing action action_1 ...
2024-11-01 09:48:54,941 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:48:55,353 - INFO - Executing action action_1 ...
2024-11-01 09:48:55,571 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:48:55,965 - INFO - Executing action action_1 ...
2024-11-01 09:48:56,209 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:48:56,519 - INFO - Executing action action_1 ...
2024-11-01 09:48:56,755 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:48:57,070 - INFO - Executing action action_1 ...
2024-11-01 09:48:57,323 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:48:57,640 - INFO - Executing action action_1 ...
2024-11-01 09:48:57,865 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:48:58,227 - INFO - Executing action action_1 ...
2024-11-01 09:48:58,457 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:48:58,757 - INFO - Executing action action_1 ...
2024-11-01 09:48:58,996 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:48:59,291 - INFO - Executing action action_1 ...
2024-11-01 09:48:59,528 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:48:59,859 - INFO - Executing action action_1 ...
2024-11-01 09:49:00,086 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:49:00,466 - INFO - Executing action action_1 ...
2024-11-01 09:49:00,694 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:49:01,159 - INFO - Executing action action_1 ...
2024-11-01 09:49:01,369 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:49:01,713 - INFO - Executing action action_1 ...
2024-11-01 09:49:01,930 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:49:02,238 - INFO - Executing action action_1 ...
2024-11-01 09:49:02,484 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:49:02,814 - INFO - Executing action action_1 ...
2024-11-01 09:49:03,090 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:49:03,394 - INFO - Executing action action_1 ...
2024-11-01 09:49:03,637 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:49:04,006 - INFO - Executing action action_1 ...
2024-11-01 09:49:04,232 - INFO - Action action_1 executed. Events received: [{'event_type': 'object added', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}]
2024-11-01 09:49:04,596 - INFO - Executing action action_1 ...
2024-11-01 09:49:04,812 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:49:05,171 - INFO - Executing action action_1 ...
2024-11-01 09:49:05,399 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:49:05,765 - INFO - Executing action action_1 ...
2024-11-01 09:49:06,025 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:49:06,342 - INFO - Executing action action_1 ...
2024-11-01 09:49:06,586 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:49:06,967 - INFO - Executing action action_1 ...
2024-11-01 09:49:07,167 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:49:07,471 - INFO - Executing action action_1 ...
2024-11-01 09:49:07,718 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:49:07,768 - ERROR - Error during intention 7 execution. Intention 7 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-01 09:49:07,855 - INFO - Belief set thread terminated.
2024-11-01 09:49:07,999 - INFO - Plan thread terminated.
2024-11-01 09:49:08,017 - INFO - Intention 7 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 0}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [{'event_type': 'object added', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}], [], [], [], [], [], []]
2024-11-01 09:49:08,017 - INFO - Belief set after intention 7 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 2: {'id': 2, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 3: {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:49:14,465 - INFO - Invalidating intention 7 ...
2024-11-01 09:49:31,399 - INFO - Testing intention 
def function():
    global belief_set
    def get_distance(coord1, coord2):
        return abs(coord1[0] - coord2[0]) + abs(coord1[1] - coord2[1])
    current_position = belief_set['agent'][1]['coordinates']
    parcels = [parcel for parcel in belief_set['parcels'].values() if parcel['carried_by_id'] is None]
    reachable_parcels = [parcel for parcel in parcels if belief_set['map']['grid'][parcel['coordinates'][0] * belief_set['map']['width'] + parcel['coordinates'][1]]['cell_type'] != 'non_walkable']
    if not reachable_parcels:
        return
    nearest_parcel = min(reachable_parcels, key=lambda parcel: get_distance(current_position, parcel['coordinates']))
    while current_position != nearest_parcel['coordinates']:
        if current_position[0] > nearest_parcel['coordinates'][0]:
            function_1()
            current_position[0] -= 1
        elif current_position[0] < nearest_parcel['coordinates'][0]:
            function_2()
            current_position[0] += 1
        elif current_position[1] > nearest_parcel['coordinates'][1]:
            function_3()
            current_position[1] -= 1
        else:
            function_4()
            current_position[1] += 1
    function_5()
    delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell']
    nearest_delivery_cell = min(delivery_cells, key=lambda cell: get_distance(current_position, cell))
    while current_position != nearest_delivery_cell:
        if current_position[0] > nearest_delivery_cell[0]:
            function_1()
            current_position[0] -= 1
        elif current_position[0] < nearest_delivery_cell[0]:
            function_2()
            current_position[0] += 1
        elif current_position[1] > nearest_delivery_cell[1]:
            function_3()
            current_position[1] -= 1
        else:
            function_4()
            current_position[1] += 1
    function_6()
2024-11-01 09:49:31,425 - ERROR - The intention is invalid. Error: The code contains more than one function definition.
2024-11-01 09:49:50,524 - INFO - Testing intention 
def function():
    global belief_set
    def get_distance(coord1, coord2):
        return abs(coord1[0] - coord2[0]) + abs(coord1[1] - coord2[1])
    current_position = belief_set['agent'][1]['coordinates']
    parcels = [parcel for parcel in belief_set['parcels'].values() if parcel['carried_by_id'] is None]
    reachable_parcels = [parcel for parcel in parcels if belief_set['map']['grid'][parcel['coordinates'][0] * belief_set['map']['width'] + parcel['coordinates'][1]]['cell_type'] != 'non_walkable']
    if not reachable_parcels:
        return
    nearest_parcel = min(reachable_parcels, key=lambda parcel: get_distance(current_position, parcel['coordinates']))
    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates']:
        if belief_set['agent'][1]['coordinates'][0] > nearest_parcel['coordinates'][0]:
            function_1()
            belief_set['agent'][1]['coordinates'][0] -= 1
        elif belief_set['agent'][1]['coordinates'][0] < nearest_parcel['coordinates'][0]:
            function_2()
            belief_set['agent'][1]['coordinates'][0] += 1
        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel['coordinates'][1]:
            function_3()
            belief_set['agent'][1]['coordinates'][1] -= 1
        else:
            function_4()
            belief_set['agent'][1]['coordinates'][1] += 1
    function_5()
    delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell']
    nearest_delivery_cell = min(delivery_cells, key=lambda cell: get_distance(belief_set['agent'][1]['coordinates'], cell))
    while belief_set['agent'][1]['coordinates'] != nearest_delivery_cell:
        if belief_set['agent'][1]['coordinates'][0] > nearest_delivery_cell[0]:
            function_1()
            belief_set['agent'][1]['coordinates'][0] -= 1
        elif belief_set['agent'][1]['coordinates'][0] < nearest_delivery_cell[0]:
            function_2()
            belief_set['agent'][1]['coordinates'][0] += 1
        elif belief_set['agent'][1]['coordinates'][1] > nearest_delivery_cell[1]:
            function_3()
            belief_set['agent'][1]['coordinates'][1] -= 1
        else:
            function_4()
            belief_set['agent'][1]['coordinates'][1] += 1
    function_6()
2024-11-01 09:49:50,537 - ERROR - The intention is invalid. Error: The code contains more than one function definition.
2024-11-01 09:50:09,565 - INFO - Testing intention 
def function():
    global belief_set
    def get_distance(coord1, coord2):
        return abs(coord1[0] - coord2[0]) + abs(coord1[1] - coord2[1])
    current_position = belief_set['agent'][1]['coordinates']
    parcels = [parcel for parcel in belief_set['parcels'].values() if parcel['carried_by_id'] is None]
    reachable_parcels = [parcel for parcel in parcels if belief_set['map']['grid'][parcel['coordinates'][0] * belief_set['map']['width'] + parcel['coordinates'][1]]['cell_type'] != 'non_walkable']
    if not reachable_parcels:
        return
    nearest_parcel = min(reachable_parcels, key=lambda parcel: get_distance(current_position, parcel['coordinates']))
    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates']:
        if belief_set['agent'][1]['coordinates'][0] > nearest_parcel['coordinates'][0]:
            function_1()
            belief_set['agent'][1]['coordinates'][0] -= 1
        elif belief_set['agent'][1]['coordinates'][0] < nearest_parcel['coordinates'][0]:
            function_2()
            belief_set['agent'][1]['coordinates'][0] += 1
        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel['coordinates'][1]:
            function_3()
            belief_set['agent'][1]['coordinates'][1] -= 1
        else:
            function_4()
            belief_set['agent'][1]['coordinates'][1] += 1
    function_5()
    delivery_cells = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell']
    nearest_delivery_cell = min(delivery_cells, key=lambda cell: get_distance(belief_set['agent'][1]['coordinates'], cell))
    while belief_set['agent'][1]['coordinates'] != nearest_delivery_cell:
        if belief_set['agent'][1]['coordinates'][0] > nearest_delivery_cell[0]:
            function_1()
            belief_set['agent'][1]['coordinates'][0] -= 1
        elif belief_set['agent'][1]['coordinates'][0] < nearest_delivery_cell[0]:
            function_2()
            belief_set['agent'][1]['coordinates'][0] += 1
        elif belief_set['agent'][1]['coordinates'][1] > nearest_delivery_cell[1]:
            function_3()
            belief_set['agent'][1]['coordinates'][1] -= 1
        else:
            function_4()
            belief_set['agent'][1]['coordinates'][1] += 1
    function_6()
2024-11-01 09:50:09,591 - ERROR - The intention is invalid. Error: The code contains more than one function definition.
2024-11-01 09:50:24,025 - INFO - Testing intention 
def function():
    global belief_set
    agent_position = belief_set['agent'][1]['coordinates']
    parcel_spawn_location = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
    max_iterations = 1000
    i = 0
    while agent_position != parcel_spawn_location and i < max_iterations:
        i += 1
        if agent_position[0] < parcel_spawn_location[0]:
            function_2()
            agent_position[0] += 1
        elif agent_position[0] > parcel_spawn_location[0]:
            function_1()
            agent_position[0] -= 1
        elif agent_position[1] < parcel_spawn_location[1]:
            function_4()
            agent_position[1] += 1
        elif agent_position[1] > parcel_spawn_location[1]:
            function_3()
            agent_position[1] -= 1
    function_5()
    i = 0
    while agent_position != delivery_cell and i < max_iterations:
        i += 1
        if agent_position[0] < delivery_cell[0]:
            function_2()
            agent_position[0] += 1
        elif agent_position[0] > delivery_cell[0]:
            function_1()
            agent_position[0] -= 1
        elif agent_position[1] < delivery_cell[1]:
            function_4()
            agent_position[1] += 1
        elif agent_position[1] > delivery_cell[1]:
            function_3()
            agent_position[1] -= 1
    function_6()

2024-11-01 09:50:24,050 - INFO - The intention is valid.
2024-11-01 09:50:24,076 - INFO - Intention added to desire 1
2024-11-01 09:50:24,094 - INFO - Running intention 8 ...
2024-11-01 09:50:24,307 - INFO - Belief set thread started ...
2024-11-01 09:50:24,338 - INFO - Plan thread started ...
2024-11-01 09:50:24,345 - INFO - Started subprocess...
2024-11-01 09:50:24,369 - INFO - Belief set before intention 8 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 2: {'id': 2, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 3: {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 4: {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:50:24,679 - INFO - Executing action action_3 ...
2024-11-01 09:50:24,924 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 0}}]
2024-11-01 09:50:25,214 - INFO - Executing action action_5 ...
2024-11-01 09:50:25,420 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}]
2024-11-01 09:50:25,717 - INFO - Executing action action_2 ...
2024-11-01 09:50:25,930 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [1, 2, 3, 4, 5, 6], 'score': 0}}]
2024-11-01 09:50:26,306 - INFO - Executing action action_4 ...
2024-11-01 09:50:26,528 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [1, 2, 3, 4, 5, 6], 'score': 0}}]
2024-11-01 09:50:26,922 - INFO - Executing action action_4 ...
2024-11-01 09:50:27,153 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}]
2024-11-01 09:50:27,542 - INFO - Executing action action_4 ...
2024-11-01 09:50:27,766 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [1, 2, 3, 4, 5, 6], 'score': 0}}]
2024-11-01 09:50:28,163 - INFO - Executing action action_6 ...
2024-11-01 09:50:28,420 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 120}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-11-01 09:50:28,838 - INFO - Plan thread terminated.
2024-11-01 09:50:28,893 - INFO - Belief set thread terminated.
2024-11-01 09:50:28,918 - INFO - Intention 8 execution has finished. Threads and subprocess terminated. Plan: ['action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [1, 2, 3, 4, 5, 6], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [1, 2, 3, 4, 5, 6], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [1, 2, 3, 4, 5, 6], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 120}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-11-01 09:50:28,918 - INFO - Belief set after intention 8 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 120}}, 'parcels': {7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:50:38,769 - INFO - Testing trigger function 
def should_pursue_goal(belief_set):
    spawn_cells = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn']
    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell']
    walkable_cells = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'walkable']
    agent_position = belief_set['agent'][1]['coordinates']
    parcels_carried = belief_set['agent'][1]['parcels_carried_ids']
    if len(spawn_cells) == 0 or len(delivery_cells) == 0 or len(walkable_cells) == 0:
        return False
    elif agent_position in [cell['cell_coordinates'] for cell in delivery_cells] and len(parcels_carried) > 0:
        return False
    else:
        return True
2024-11-01 09:50:38,782 - INFO - The trigger function is valid.
2024-11-01 09:50:38,820 - INFO - Trigger function added to desire 1.
2024-11-01 09:50:40,111 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long term goal is to explore the map, identify all parcel spawn locations and delivery cells, and plan optimal routes between them for efficient parcel delivery.
    Intention ID: [7]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up the parcel and then move towards the nearest delivery cell to deliver the parcel.
                def function_7():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                    function_6()
                
    Intention ID: [8]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_8():
                    global belief_set
                    agent_position = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_iterations = 1000
                    i = 0
                    while agent_position != parcel_spawn_location and i < max_iterations:
                        i += 1
                        if agent_position[0] < parcel_spawn_location[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > parcel_spawn_location[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < parcel_spawn_location[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > parcel_spawn_location[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_5()
                    i = 0
                    while agent_position != delivery_cell and i < max_iterations:
                        i += 1
                        if agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    spawn_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'parcels_spawn']
    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'delivery_cell']
    walkable_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'walkable']
    agent_position = belief_set['agent'][1]['coordinates']
    parcels_carried = belief_set['agent'][1]['parcels_carried_ids']
    if len(spawn_cells) == 0 or len(delivery_cells) == 0 or len(walkable_cells
        ) == 0:
        return False
    elif agent_position in [cell['cell_coordinates'] for cell in delivery_cells
        ] and len(parcels_carried) > 0:
        return False
    else:
        return True




2024-11-01 09:50:40,111 - INFO - Running trigger function for desire 1 ...
2024-11-01 09:50:40,111 - INFO - Trigger function for desire 1 has been executed. Result: True
2024-11-01 09:50:40,111 - INFO - Desire 1 could be triggered. Adding it to the list...
2024-11-01 09:50:40,111 - INFO - Desires triggered: [1]. Now randomly choosing which one to run.
2024-11-01 09:50:40,111 - INFO - Desire 1 was randomly chosen. Desire 1 has been triggered.
2024-11-01 09:50:40,111 - INFO - Desire 1 is about to be executed ...
2024-11-01 09:50:40,111 - INFO - Executing all valid intentions for desire 1 ...
2024-11-01 09:50:40,111 - INFO - Executing intention 8 ...
2024-11-01 09:50:40,123 - INFO - Running intention 8 ...
2024-11-01 09:50:40,346 - INFO - Belief set thread started ...
2024-11-01 09:50:40,371 - INFO - Plan thread started ...
2024-11-01 09:50:40,378 - INFO - Started subprocess...
2024-11-01 09:50:40,378 - INFO - Belief set before intention 8 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 120}}, 'parcels': {7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:50:40,737 - INFO - Executing action action_1 ...
2024-11-01 09:50:40,956 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 120}}]
2024-11-01 09:50:41,267 - INFO - Executing action action_3 ...
2024-11-01 09:50:41,528 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 120}}]
2024-11-01 09:50:41,845 - INFO - Executing action action_3 ...
2024-11-01 09:50:42,175 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 120}}]
2024-11-01 09:50:42,461 - INFO - Executing action action_3 ...
2024-11-01 09:50:42,684 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 120}}]
2024-11-01 09:50:42,964 - INFO - Executing action action_5 ...
2024-11-01 09:50:43,194 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [7], 'score': 120}}]
2024-11-01 09:50:43,505 - INFO - Executing action action_2 ...
2024-11-01 09:50:43,729 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [7], 'score': 120}}]
2024-11-01 09:50:44,104 - INFO - Executing action action_4 ...
2024-11-01 09:50:44,324 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [7], 'score': 120}}]
2024-11-01 09:50:44,637 - INFO - Executing action action_4 ...
2024-11-01 09:50:44,886 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [7], 'score': 120}}]
2024-11-01 09:50:45,208 - INFO - Executing action action_4 ...
2024-11-01 09:50:45,451 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [7], 'score': 120}}]
2024-11-01 09:50:45,751 - INFO - Executing action action_6 ...
2024-11-01 09:50:45,972 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 140}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-11-01 09:50:46,359 - INFO - Belief set thread terminated.
2024-11-01 09:50:46,384 - INFO - Plan thread terminated.
2024-11-01 09:50:46,415 - INFO - Intention 8 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [7], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [7], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [7], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [7], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [7], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 140}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-11-01 09:50:46,428 - INFO - Belief set after intention 8 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 140}}, 'parcels': {}}
2024-11-01 09:50:46,428 - INFO - Intention 8 has been executed with plan ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6'] and events [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [7], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [7], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [7], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [7], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [7], 'score': 120}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 140}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]].
2024-11-01 09:50:47,410 - INFO - Invalidating desire 1 ...
2024-11-01 09:50:48,595 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long term goal is to explore the map, identify all parcel spawn locations and delivery cells, and plan optimal routes between them for efficient parcel delivery.
    Intention ID: [7]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up the parcel and then move towards the nearest delivery cell to deliver the parcel.
                def function_7():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                    function_6()
                
    Intention ID: [8]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_8():
                    global belief_set
                    agent_position = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_iterations = 1000
                    i = 0
                    while agent_position != parcel_spawn_location and i < max_iterations:
                        i += 1
                        if agent_position[0] < parcel_spawn_location[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > parcel_spawn_location[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < parcel_spawn_location[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > parcel_spawn_location[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_5()
                    i = 0
                    while agent_position != delivery_cell and i < max_iterations:
                        i += 1
                        if agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    spawn_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'parcels_spawn']
    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'delivery_cell']
    walkable_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'walkable']
    agent_position = belief_set['agent'][1]['coordinates']
    parcels_carried = belief_set['agent'][1]['parcels_carried_ids']
    if len(spawn_cells) == 0 or len(delivery_cells) == 0 or len(walkable_cells
        ) == 0:
        return False
    elif agent_position in [cell['cell_coordinates'] for cell in delivery_cells
        ] and len(parcels_carried) > 0:
        return False
    else:
        return True




2024-11-01 09:50:48,601 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-11-01 09:50:48,613 - INFO - No desire has been triggered.
2024-11-01 09:50:48,613 - INFO - No desire triggered.
2024-11-01 09:50:50,117 - INFO - Desire added: 2. Desires:
Desire 1: The agent's long term goal is to explore the map, identify all parcel spawn locations and delivery cells, and plan optimal routes between them for efficient parcel delivery.
    Intention ID: [7]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up the parcel and then move towards the nearest delivery cell to deliver the parcel.
                def function_7():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                    function_6()
                
    Intention ID: [8]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_8():
                    global belief_set
                    agent_position = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_iterations = 1000
                    i = 0
                    while agent_position != parcel_spawn_location and i < max_iterations:
                        i += 1
                        if agent_position[0] < parcel_spawn_location[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > parcel_spawn_location[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < parcel_spawn_location[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > parcel_spawn_location[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_5()
                    i = 0
                    while agent_position != delivery_cell and i < max_iterations:
                        i += 1
                        if agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    spawn_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'parcels_spawn']
    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'delivery_cell']
    walkable_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'walkable']
    agent_position = belief_set['agent'][1]['coordinates']
    parcels_carried = belief_set['agent'][1]['parcels_carried_ids']
    if len(spawn_cells) == 0 or len(delivery_cells) == 0 or len(walkable_cells
        ) == 0:
        return False
    elif agent_position in [cell['cell_coordinates'] for cell in delivery_cells
        ] and len(parcels_carried) > 0:
        return False
    else:
        return True



Desire 2: The agent should aim to maximize its score by efficiently picking up parcels from the spawn location and delivering them to the designated delivery cells, while avoiding non-walkable areas.
Executable: False
Trigger function:
None



2024-11-01 09:51:13,214 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    parcels_spawn = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
    while agent['coordinates'] != parcels_spawn['cell_coordinates']:
        if agent['coordinates'][0] > parcels_spawn['cell_coordinates'][0]:
            function_1()
        elif agent['coordinates'][0] < parcels_spawn['cell_coordinates'][0]:
            function_2()
        elif agent['coordinates'][1] > parcels_spawn['cell_coordinates'][1]:
            function_3()
        elif agent['coordinates'][1] < parcels_spawn['cell_coordinates'][1]:
            function_4()
    function_5()
    while agent['coordinates'] != delivery_cell['cell_coordinates']:
        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
            function_1()
        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
            function_2()
        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
            function_3()
        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
            function_4()
    function_6()
2024-11-01 09:51:13,214 - INFO - The intention is valid.
2024-11-01 09:51:13,228 - INFO - Intention added to desire 2
2024-11-01 09:51:13,239 - INFO - Running intention 9 ...
2024-11-01 09:51:13,370 - INFO - Belief set thread started ...
2024-11-01 09:51:13,377 - INFO - Plan thread started ...
2024-11-01 09:51:13,377 - INFO - Started subprocess...
2024-11-01 09:51:13,377 - INFO - Belief set before intention 9 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 140}}, 'parcels': {8: {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 9: {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:51:13,693 - INFO - Executing action action_1 ...
2024-11-01 09:51:13,920 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 140}}]
2024-11-01 09:51:14,326 - INFO - Executing action action_1 ...
2024-11-01 09:51:14,576 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:14,889 - INFO - Executing action action_1 ...
2024-11-01 09:51:15,115 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:15,495 - INFO - Executing action action_1 ...
2024-11-01 09:51:15,763 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:16,080 - INFO - Executing action action_1 ...
2024-11-01 09:51:16,306 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:16,733 - INFO - Executing action action_1 ...
2024-11-01 09:51:16,938 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:17,291 - INFO - Executing action action_1 ...
2024-11-01 09:51:17,512 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:17,813 - INFO - Executing action action_1 ...
2024-11-01 09:51:18,080 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:18,439 - INFO - Executing action action_1 ...
2024-11-01 09:51:18,657 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:18,980 - INFO - Executing action action_1 ...
2024-11-01 09:51:19,235 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:19,576 - INFO - Executing action action_1 ...
2024-11-01 09:51:19,794 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:20,088 - INFO - Executing action action_1 ...
2024-11-01 09:51:20,331 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:20,680 - INFO - Executing action action_1 ...
2024-11-01 09:51:20,897 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:21,231 - INFO - Executing action action_1 ...
2024-11-01 09:51:21,457 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:21,751 - INFO - Executing action action_1 ...
2024-11-01 09:51:22,026 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:22,368 - INFO - Executing action action_1 ...
2024-11-01 09:51:22,623 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:22,902 - INFO - Executing action action_1 ...
2024-11-01 09:51:23,147 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:23,532 - INFO - Executing action action_1 ...
2024-11-01 09:51:23,745 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:24,045 - INFO - Executing action action_1 ...
2024-11-01 09:51:24,310 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:24,725 - INFO - Executing action action_1 ...
2024-11-01 09:51:24,942 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:25,253 - INFO - Executing action action_1 ...
2024-11-01 09:51:25,477 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:25,807 - INFO - Executing action action_1 ...
2024-11-01 09:51:26,013 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:26,351 - INFO - Executing action action_1 ...
2024-11-01 09:51:26,612 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:27,016 - INFO - Executing action action_1 ...
2024-11-01 09:51:27,240 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:27,561 - INFO - Executing action action_1 ...
2024-11-01 09:51:27,792 - INFO - Action action_1 executed. Events received: [{'event_type': 'object added', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}]
2024-11-01 09:51:28,116 - INFO - Executing action action_1 ...
2024-11-01 09:51:28,322 - INFO - Action action_1 executed. Events received: []
2024-11-01 09:51:28,422 - ERROR - Error during intention 9 execution. Intention 9 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-01 09:51:28,422 - INFO - Belief set thread terminated.
2024-11-01 09:51:28,602 - INFO - Plan thread terminated.
2024-11-01 09:51:28,621 - INFO - Intention 9 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 140}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [{'event_type': 'object added', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}], []]
2024-11-01 09:51:28,639 - INFO - Belief set after intention 9 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 140}}, 'parcels': {8: {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 9: {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 10: {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:51:34,257 - INFO - Invalidating intention 9 ...
2024-11-01 09:51:43,387 - INFO - Testing intention 
def function():
    global belief_set
    max_moves = 100
    moves = 0
    while moves < max_moves:
        if belief_set['agent'][1]['coordinates'] == [0, 0]:
            function_5()
            moves += 1
        elif belief_set['agent'][1]['coordinates'][1] > 0:
            function_3()
            moves += 1
        elif belief_set['agent'][1]['coordinates'][0] > 0:
            function_1()
            moves += 1
        elif belief_set['agent'][1]['coordinates'] == [1, 3]:
            function_6()
            moves += 1
        elif belief_set['agent'][1]['coordinates'][1] < 3:
            function_4()
            moves += 1
        elif belief_set['agent'][1]['coordinates'][0] < 1:
            function_2()
            moves += 1
    if moves == max_moves:
        return 'Max moves reached, goal not achieved'
2024-11-01 09:51:43,387 - INFO - The intention is valid.
2024-11-01 09:51:43,400 - INFO - Intention added to desire 2
2024-11-01 09:51:43,400 - INFO - Running intention 10 ...
2024-11-01 09:51:43,600 - INFO - Belief set thread started ...
2024-11-01 09:51:43,631 - INFO - Plan thread started ...
2024-11-01 09:51:43,631 - INFO - Started subprocess...
2024-11-01 09:51:43,631 - INFO - Belief set before intention 10 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 140}}, 'parcels': {8: {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 9: {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 10: {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:51:43,947 - INFO - Executing action action_3 ...
2024-11-01 09:51:44,213 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 140}}]
2024-11-01 09:51:44,547 - INFO - Executing action action_3 ...
2024-11-01 09:51:44,817 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 140}}]
2024-11-01 09:51:45,208 - INFO - Executing action action_3 ...
2024-11-01 09:51:45,487 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 140}}]
2024-11-01 09:51:45,861 - INFO - Executing action action_5 ...
2024-11-01 09:51:46,082 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [8, 9, 10], 'score': 140}}]
2024-11-01 09:51:46,425 - INFO - Executing action action_5 ...
2024-11-01 09:51:46,662 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:46,993 - INFO - Executing action action_5 ...
2024-11-01 09:51:47,221 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:47,537 - INFO - Executing action action_5 ...
2024-11-01 09:51:47,760 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:48,124 - INFO - Executing action action_5 ...
2024-11-01 09:51:48,343 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}]
2024-11-01 09:51:48,703 - INFO - Executing action action_5 ...
2024-11-01 09:51:48,929 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:49,252 - INFO - Executing action action_5 ...
2024-11-01 09:51:49,481 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:49,782 - INFO - Executing action action_5 ...
2024-11-01 09:51:49,988 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:50,389 - INFO - Executing action action_5 ...
2024-11-01 09:51:50,627 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:50,966 - INFO - Executing action action_5 ...
2024-11-01 09:51:51,195 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:51,501 - INFO - Executing action action_5 ...
2024-11-01 09:51:51,738 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:52,026 - INFO - Executing action action_5 ...
2024-11-01 09:51:52,240 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:52,597 - INFO - Executing action action_5 ...
2024-11-01 09:51:52,861 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:53,189 - INFO - Executing action action_5 ...
2024-11-01 09:51:53,457 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:53,780 - INFO - Executing action action_5 ...
2024-11-01 09:51:53,992 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:54,423 - INFO - Executing action action_5 ...
2024-11-01 09:51:54,665 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:54,957 - INFO - Executing action action_5 ...
2024-11-01 09:51:55,164 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:55,477 - INFO - Executing action action_5 ...
2024-11-01 09:51:55,722 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:56,072 - INFO - Executing action action_5 ...
2024-11-01 09:51:56,317 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:56,652 - INFO - Executing action action_5 ...
2024-11-01 09:51:56,920 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:57,225 - INFO - Executing action action_5 ...
2024-11-01 09:51:57,438 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:57,751 - INFO - Executing action action_5 ...
2024-11-01 09:51:58,007 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:58,379 - INFO - Executing action action_5 ...
2024-11-01 09:51:58,591 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:51:58,685 - ERROR - Error during intention 10 execution. Intention 10 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-01 09:51:58,816 - INFO - Belief set thread terminated.
2024-11-01 09:51:58,860 - INFO - Plan thread terminated.
2024-11-01 09:51:58,873 - INFO - Intention 10 execution has finished. Threads and subprocess terminated. Plan: ['action_3', 'action_3', 'action_3', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5', 'action_5']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 140}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 140}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 140}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [8, 9, 10], 'score': 140}}], [], [], [], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-11-01 09:51:58,873 - INFO - Belief set after intention 10 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}, 'parcels': {8: {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 9: {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 10: {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 11: {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}}
2024-11-01 09:52:06,283 - INFO - Invalidating intention 10 ...
2024-11-01 09:52:29,039 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    parcels = belief_set['parcels']
    map_grid = belief_set['map']['grid']
    delivery_cell = [cell for cell in map_grid if cell['cell_type'] == 'delivery_cell'][0]
    while True:
        if not agent['parcels_carried_ids']:
            function_5()
            if agent['parcels_carried_ids']:
                continue
        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
            function_1()
        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
            function_2()
        if agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
            function_3()
        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
            function_4()
        if agent['coordinates'] == delivery_cell['cell_coordinates'] and agent['parcels_carried_ids']:
            function_6()
            break
2024-11-01 09:52:29,046 - INFO - The intention is valid.
2024-11-01 09:52:29,053 - INFO - Intention added to desire 2
2024-11-01 09:52:29,053 - INFO - Running intention 11 ...
2024-11-01 09:52:29,210 - INFO - Belief set thread started ...
2024-11-01 09:52:29,235 - INFO - Plan thread started ...
2024-11-01 09:52:29,235 - INFO - Started subprocess...
2024-11-01 09:52:29,235 - INFO - Belief set before intention 11 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}, 'parcels': {8: {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 9: {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 10: {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 11: {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 12: {'id': 12, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 13: {'id': 13, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:52:29,558 - INFO - Executing action action_2 ...
2024-11-01 09:52:29,775 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}]
2024-11-01 09:52:30,107 - INFO - Executing action action_4 ...
2024-11-01 09:52:30,361 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}]
2024-11-01 09:52:30,687 - INFO - Executing action action_2 ...
2024-11-01 09:52:30,905 - INFO - Action action_2 executed. Events received: []
2024-11-01 09:52:31,237 - INFO - Executing action action_4 ...
2024-11-01 09:52:31,486 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}]
2024-11-01 09:52:31,824 - INFO - Executing action action_2 ...
2024-11-01 09:52:32,049 - INFO - Action action_2 executed. Events received: []
2024-11-01 09:52:32,374 - INFO - Executing action action_4 ...
2024-11-01 09:52:32,588 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-11-01 09:52:32,927 - INFO - Executing action action_2 ...
2024-11-01 09:52:33,140 - INFO - Action action_2 executed. Events received: []
2024-11-01 09:52:33,471 - INFO - Executing action action_4 ...
2024-11-01 09:52:33,676 - INFO - Action action_4 executed. Events received: []
2024-11-01 09:52:34,046 - INFO - Executing action action_2 ...
2024-11-01 09:52:34,327 - INFO - Action action_2 executed. Events received: []
2024-11-01 09:52:34,638 - INFO - Executing action action_4 ...
2024-11-01 09:52:34,855 - INFO - Action action_4 executed. Events received: []
2024-11-01 09:52:35,225 - INFO - Executing action action_2 ...
2024-11-01 09:52:35,434 - INFO - Action action_2 executed. Events received: []
2024-11-01 09:52:35,771 - INFO - Executing action action_4 ...
2024-11-01 09:52:36,081 - INFO - Action action_4 executed. Events received: []
2024-11-01 09:52:36,400 - INFO - Executing action action_2 ...
2024-11-01 09:52:36,649 - INFO - Action action_2 executed. Events received: []
2024-11-01 09:52:36,954 - INFO - Executing action action_4 ...
2024-11-01 09:52:37,178 - INFO - Action action_4 executed. Events received: []
2024-11-01 09:52:37,579 - INFO - Executing action action_2 ...
2024-11-01 09:52:37,829 - INFO - Action action_2 executed. Events received: []
2024-11-01 09:52:38,128 - INFO - Executing action action_4 ...
2024-11-01 09:52:38,360 - INFO - Action action_4 executed. Events received: []
2024-11-01 09:52:38,673 - INFO - Executing action action_2 ...
2024-11-01 09:52:38,878 - INFO - Action action_2 executed. Events received: []
2024-11-01 09:52:39,257 - INFO - Executing action action_4 ...
2024-11-01 09:52:39,462 - INFO - Action action_4 executed. Events received: []
2024-11-01 09:52:39,806 - INFO - Executing action action_2 ...
2024-11-01 09:52:40,024 - INFO - Action action_2 executed. Events received: []
2024-11-01 09:52:40,353 - INFO - Executing action action_4 ...
2024-11-01 09:52:40,564 - INFO - Action action_4 executed. Events received: []
2024-11-01 09:52:40,870 - INFO - Executing action action_2 ...
2024-11-01 09:52:41,082 - INFO - Action action_2 executed. Events received: []
2024-11-01 09:52:41,429 - INFO - Executing action action_4 ...
2024-11-01 09:52:41,679 - INFO - Action action_4 executed. Events received: []
2024-11-01 09:52:42,004 - INFO - Executing action action_2 ...
2024-11-01 09:52:42,266 - INFO - Action action_2 executed. Events received: []
2024-11-01 09:52:42,546 - INFO - Executing action action_4 ...
2024-11-01 09:52:42,795 - INFO - Action action_4 executed. Events received: []
2024-11-01 09:52:43,120 - INFO - Executing action action_2 ...
2024-11-01 09:52:43,426 - INFO - Action action_2 executed. Events received: []
2024-11-01 09:52:43,794 - INFO - Executing action action_4 ...
2024-11-01 09:52:44,036 - INFO - Action action_4 executed. Events received: []
2024-11-01 09:52:44,315 - ERROR - Error during intention 11 execution. Intention 11 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-01 09:52:44,328 - INFO - Plan thread terminated.
2024-11-01 09:52:44,384 - INFO - Belief set thread terminated.
2024-11-01 09:52:44,384 - INFO - Intention 11 execution has finished. Threads and subprocess terminated. Plan: ['action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}], [], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}], [], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-11-01 09:52:44,384 - INFO - Belief set after intention 11 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}, 'parcels': {8: {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 9: {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 10: {'id': 10, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 11: {'id': 11, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 12: {'id': 12, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 13: {'id': 13, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:52:52,167 - INFO - Invalidating intention 11 ...
2024-11-01 09:52:52,167 - INFO - Invalidating intention 1 ...
2024-11-01 09:52:52,167 - INFO - Intention 1 is a base action. It cannot be invalidated.
2024-11-01 09:52:52,167 - INFO - Invalidating intention 2 ...
2024-11-01 09:52:52,167 - INFO - Intention 2 is a base action. It cannot be invalidated.
2024-11-01 09:52:52,180 - INFO - Invalidating intention 3 ...
2024-11-01 09:52:52,180 - INFO - Intention 3 is a base action. It cannot be invalidated.
2024-11-01 09:52:52,180 - INFO - Invalidating intention 4 ...
2024-11-01 09:52:52,180 - INFO - Intention 4 is a base action. It cannot be invalidated.
2024-11-01 09:52:52,180 - INFO - Invalidating intention 5 ...
2024-11-01 09:52:52,180 - INFO - Intention 5 is a base action. It cannot be invalidated.
2024-11-01 09:52:52,211 - INFO - Invalidating intention 6 ...
2024-11-01 09:52:52,212 - INFO - Intention 6 is a base action. It cannot be invalidated.
2024-11-01 09:52:53,188 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long term goal is to explore the map, identify all parcel spawn locations and delivery cells, and plan optimal routes between them for efficient parcel delivery.
    Intention ID: [7]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up the parcel and then move towards the nearest delivery cell to deliver the parcel.
                def function_7():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                    function_6()
                
    Intention ID: [8]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_8():
                    global belief_set
                    agent_position = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_iterations = 1000
                    i = 0
                    while agent_position != parcel_spawn_location and i < max_iterations:
                        i += 1
                        if agent_position[0] < parcel_spawn_location[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > parcel_spawn_location[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < parcel_spawn_location[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > parcel_spawn_location[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_5()
                    i = 0
                    while agent_position != delivery_cell and i < max_iterations:
                        i += 1
                        if agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    spawn_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'parcels_spawn']
    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'delivery_cell']
    walkable_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'walkable']
    agent_position = belief_set['agent'][1]['coordinates']
    parcels_carried = belief_set['agent'][1]['parcels_carried_ids']
    if len(spawn_cells) == 0 or len(delivery_cells) == 0 or len(walkable_cells
        ) == 0:
        return False
    elif agent_position in [cell['cell_coordinates'] for cell in delivery_cells
        ] and len(parcels_carried) > 0:
        return False
    else:
        return True



Desire 2: The agent should aim to maximize its score by efficiently picking up parcels from the spawn location and delivering them to the designated delivery cells, while avoiding non-walkable areas.
    Intention ID: [9]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcels_spawn['cell_coordinates']:
                        if agent['coordinates'][0] > parcels_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn['cell_coordinates'][1]:
                            function_4()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel. This should be achieved in an efficient manner, minimizing the number of moves and avoiding infinite loops.
                def function_10():
                    global belief_set
                    max_moves = 100
                    moves = 0
                    while moves < max_moves:
                        if belief_set['agent'][1]['coordinates'] == [0, 0]:
                            function_5()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][1] > 0:
                            function_3()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][0] > 0:
                            function_1()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'] == [1, 3]:
                            function_6()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][1] < 3:
                            function_4()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][0] < 1:
                            function_2()
                            moves += 1
                    if moves == max_moves:
                        return 'Max moves reached, goal not achieved'
                
    Intention ID: [11]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up a parcel if it isn't carrying any, then move towards the closest delivery cell and drop off the parcel. The agent should stop executing actions when its goal has been achieved.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    map_grid = belief_set['map']['grid']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    while True:
                        if not agent['parcels_carried_ids']:
                            function_5()
                            if agent['parcels_carried_ids']:
                                continue
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        if agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        if agent['coordinates'] == delivery_cell['cell_coordinates'] and agent[
                            'parcels_carried_ids']:
                            function_6()
                            break
                
Executable: False
Trigger function:
None



2024-11-01 09:52:53,188 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-11-01 09:52:53,188 - INFO - No desire has been triggered.
2024-11-01 09:52:53,188 - INFO - No desire triggered.
2024-11-01 09:52:55,306 - INFO - Desire added: 3. Desires:
Desire 1: The agent's long term goal is to explore the map, identify all parcel spawn locations and delivery cells, and plan optimal routes between them for efficient parcel delivery.
    Intention ID: [7]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up the parcel and then move towards the nearest delivery cell to deliver the parcel.
                def function_7():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                    function_6()
                
    Intention ID: [8]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_8():
                    global belief_set
                    agent_position = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_iterations = 1000
                    i = 0
                    while agent_position != parcel_spawn_location and i < max_iterations:
                        i += 1
                        if agent_position[0] < parcel_spawn_location[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > parcel_spawn_location[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < parcel_spawn_location[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > parcel_spawn_location[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_5()
                    i = 0
                    while agent_position != delivery_cell and i < max_iterations:
                        i += 1
                        if agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    spawn_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'parcels_spawn']
    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'delivery_cell']
    walkable_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'walkable']
    agent_position = belief_set['agent'][1]['coordinates']
    parcels_carried = belief_set['agent'][1]['parcels_carried_ids']
    if len(spawn_cells) == 0 or len(delivery_cells) == 0 or len(walkable_cells
        ) == 0:
        return False
    elif agent_position in [cell['cell_coordinates'] for cell in delivery_cells
        ] and len(parcels_carried) > 0:
        return False
    else:
        return True



Desire 2: The agent should aim to maximize its score by efficiently picking up parcels from the spawn location and delivering them to the designated delivery cells, while avoiding non-walkable areas.
    Intention ID: [9]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcels_spawn['cell_coordinates']:
                        if agent['coordinates'][0] > parcels_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn['cell_coordinates'][1]:
                            function_4()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel. This should be achieved in an efficient manner, minimizing the number of moves and avoiding infinite loops.
                def function_10():
                    global belief_set
                    max_moves = 100
                    moves = 0
                    while moves < max_moves:
                        if belief_set['agent'][1]['coordinates'] == [0, 0]:
                            function_5()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][1] > 0:
                            function_3()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][0] > 0:
                            function_1()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'] == [1, 3]:
                            function_6()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][1] < 3:
                            function_4()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][0] < 1:
                            function_2()
                            moves += 1
                    if moves == max_moves:
                        return 'Max moves reached, goal not achieved'
                
    Intention ID: [11]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up a parcel if it isn't carrying any, then move towards the closest delivery cell and drop off the parcel. The agent should stop executing actions when its goal has been achieved.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    map_grid = belief_set['map']['grid']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    while True:
                        if not agent['parcels_carried_ids']:
                            function_5()
                            if agent['parcels_carried_ids']:
                                continue
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        if agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        if agent['coordinates'] == delivery_cell['cell_coordinates'] and agent[
                            'parcels_carried_ids']:
                            function_6()
                            break
                
Executable: False
Trigger function:
None


Desire 3: The agent's long term goal is to optimize its route in order to collect as many parcels as possible and deliver them to the delivery cell in the least amount of time.
Executable: False
Trigger function:
None



2024-11-01 09:53:14,404 - INFO - Testing intention 
def function():
    global belief_set
    
    # Find nearest parcel
    min_distance = float('inf')
    nearest_parcel = None
    for parcel_id, parcel_info in belief_set['parcels'].items():
        if parcel_info['carried_by_id'] is None:
            distance = abs(belief_set['agent'][1]['coordinates'][0] - parcel_info['coordinates'][0]) + abs(belief_set['agent'][1]['coordinates'][1] - parcel_info['coordinates'][1])
            if distance < min_distance:
                min_distance = distance
                nearest_parcel = parcel_info
    
    # Move to parcel and pick it up
    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates']:
        if belief_set['agent'][1]['coordinates'][0] > nearest_parcel['coordinates'][0]:
            function_1()
        elif belief_set['agent'][1]['coordinates'][0] < nearest_parcel['coordinates'][0]:
            function_2()
        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel['coordinates'][1]:
            function_3()
        else:
            function_4()
    function_5()
    
    # Find delivery cell
    for cell in belief_set['map']['grid']:
        if cell['cell_type'] == 'delivery_cell':
            delivery_cell = cell
            break
    
    # Move to delivery cell and drop off the parcel
    while belief_set['agent'][1]['coordinates'] != delivery_cell['cell_coordinates']:
        if belief_set['agent'][1]['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
            function_1()
        elif belief_set['agent'][1]['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
            function_2()
        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
            function_3()
        else:
            function_4()
    function_6()
2024-11-01 09:53:14,417 - INFO - The intention is valid.
2024-11-01 09:53:14,444 - INFO - Intention added to desire 3
2024-11-01 09:53:14,482 - INFO - Running intention 12 ...
2024-11-01 09:53:14,716 - INFO - Belief set thread started ...
2024-11-01 09:53:14,717 - INFO - Plan thread started ...
2024-11-01 09:53:14,740 - INFO - Started subprocess...
2024-11-01 09:53:14,740 - INFO - Belief set before intention 12 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}, 'parcels': {8: {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 9: {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 10: {'id': 10, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 11: {'id': 11, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 12: {'id': 12, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 13: {'id': 13, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 14: {'id': 14, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 15: {'id': 15, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:53:15,030 - INFO - Executing action action_1 ...
2024-11-01 09:53:15,255 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}]
2024-11-01 09:53:15,572 - INFO - Executing action action_3 ...
2024-11-01 09:53:15,796 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}]
2024-11-01 09:53:16,147 - INFO - Executing action action_3 ...
2024-11-01 09:53:16,370 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}]
2024-11-01 09:53:16,712 - INFO - Executing action action_3 ...
2024-11-01 09:53:16,969 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}]
2024-11-01 09:53:17,237 - INFO - Executing action action_5 ...
2024-11-01 09:53:17,473 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 15, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [8, 9, 10, 11, 12, 13, 14, 15], 'score': 140}}]
2024-11-01 09:53:17,785 - INFO - Executing action action_2 ...
2024-11-01 09:53:17,992 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 15, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [8, 9, 10, 11, 12, 13, 14, 15], 'score': 140}}]
2024-11-01 09:53:18,347 - INFO - Executing action action_4 ...
2024-11-01 09:53:18,572 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}]
2024-11-01 09:53:18,860 - INFO - Executing action action_4 ...
2024-11-01 09:53:19,118 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 15, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [8, 9, 10, 11, 12, 13, 14, 15], 'score': 140}}]
2024-11-01 09:53:19,463 - INFO - Executing action action_4 ...
2024-11-01 09:53:19,727 - INFO - Action action_4 executed. Events received: []
2024-11-01 09:53:20,031 - INFO - Executing action action_6 ...
2024-11-01 09:53:20,273 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 300}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-11-01 09:53:20,687 - INFO - Plan thread terminated.
2024-11-01 09:53:20,718 - INFO - Belief set thread terminated.
2024-11-01 09:53:20,761 - INFO - Intention 12 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [8, 9, 10, 11], 'score': 140}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 15, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [8, 9, 10, 11, 12, 13, 14, 15], 'score': 140}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 15, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [8, 9, 10, 11, 12, 13, 14, 15], 'score': 140}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 15, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [8, 9, 10, 11, 12, 13, 14, 15], 'score': 140}}], [], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 300}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-11-01 09:53:20,773 - INFO - Belief set after intention 12 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 300}}, 'parcels': {}}
2024-11-01 09:53:29,283 - INFO - Testing trigger function 
def should_pursue_goal(belief_set):
    # If there are no parcels left, the goal cannot be pursued.
    if not belief_set['parcels']:
        return False
    # If the agent is already at the delivery cell with parcels, the goal should be pursued.
    if belief_set['agent'][1]['coordinates'] == [1, 3] and belief_set['agent'][1]['parcels_carried_ids']:
        return True
    # If there are parcels left and the agent is not at the delivery cell, the goal should be pursued.
    return True
2024-11-01 09:53:29,284 - INFO - The trigger function is valid.
2024-11-01 09:53:29,284 - INFO - Trigger function added to desire 3.
2024-11-01 09:53:30,149 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long term goal is to explore the map, identify all parcel spawn locations and delivery cells, and plan optimal routes between them for efficient parcel delivery.
    Intention ID: [7]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up the parcel and then move towards the nearest delivery cell to deliver the parcel.
                def function_7():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                    function_6()
                
    Intention ID: [8]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_8():
                    global belief_set
                    agent_position = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_iterations = 1000
                    i = 0
                    while agent_position != parcel_spawn_location and i < max_iterations:
                        i += 1
                        if agent_position[0] < parcel_spawn_location[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > parcel_spawn_location[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < parcel_spawn_location[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > parcel_spawn_location[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_5()
                    i = 0
                    while agent_position != delivery_cell and i < max_iterations:
                        i += 1
                        if agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    spawn_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'parcels_spawn']
    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'delivery_cell']
    walkable_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'walkable']
    agent_position = belief_set['agent'][1]['coordinates']
    parcels_carried = belief_set['agent'][1]['parcels_carried_ids']
    if len(spawn_cells) == 0 or len(delivery_cells) == 0 or len(walkable_cells
        ) == 0:
        return False
    elif agent_position in [cell['cell_coordinates'] for cell in delivery_cells
        ] and len(parcels_carried) > 0:
        return False
    else:
        return True



Desire 2: The agent should aim to maximize its score by efficiently picking up parcels from the spawn location and delivering them to the designated delivery cells, while avoiding non-walkable areas.
    Intention ID: [9]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcels_spawn['cell_coordinates']:
                        if agent['coordinates'][0] > parcels_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn['cell_coordinates'][1]:
                            function_4()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel. This should be achieved in an efficient manner, minimizing the number of moves and avoiding infinite loops.
                def function_10():
                    global belief_set
                    max_moves = 100
                    moves = 0
                    while moves < max_moves:
                        if belief_set['agent'][1]['coordinates'] == [0, 0]:
                            function_5()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][1] > 0:
                            function_3()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][0] > 0:
                            function_1()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'] == [1, 3]:
                            function_6()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][1] < 3:
                            function_4()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][0] < 1:
                            function_2()
                            moves += 1
                    if moves == max_moves:
                        return 'Max moves reached, goal not achieved'
                
    Intention ID: [11]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up a parcel if it isn't carrying any, then move towards the closest delivery cell and drop off the parcel. The agent should stop executing actions when its goal has been achieved.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    map_grid = belief_set['map']['grid']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    while True:
                        if not agent['parcels_carried_ids']:
                            function_5()
                            if agent['parcels_carried_ids']:
                                continue
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        if agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        if agent['coordinates'] == delivery_cell['cell_coordinates'] and agent[
                            'parcels_carried_ids']:
                            function_6()
                            break
                
Executable: False
Trigger function:
None


Desire 3: The agent's long term goal is to optimize its route in order to collect as many parcels as possible and deliver them to the delivery cell in the least amount of time.
    Intention ID: [12]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up, then move towards the closest delivery cell and drop off the parcel.
                def function_12():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel_id, parcel_info in belief_set['parcels'].items():
                        if parcel_info['carried_by_id'] is None:
                            distance = abs(belief_set['agent'][1]['coordinates'][0] -
                                parcel_info['coordinates'][0]) + abs(belief_set['agent'][1]
                                ['coordinates'][1] - parcel_info['coordinates'][1])
                            if distance < min_distance:
                                min_distance = distance
                                nearest_parcel = parcel_info
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                        else:
                            function_4()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                            break
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                        else:
                            function_4()
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_2(belief_set):
    if not belief_set['parcels']:
        return False
    if belief_set['agent'][1]['coordinates'] == [1, 3] and belief_set['agent'][
        1]['parcels_carried_ids']:
        return True
    return True




2024-11-01 09:53:30,150 - INFO - Running trigger function for desire 3 ...
2024-11-01 09:53:30,150 - INFO - Trigger function for desire 3 has been executed. Result: False
2024-11-01 09:53:30,150 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-11-01 09:53:30,150 - INFO - No desire has been triggered.
2024-11-01 09:53:30,156 - INFO - No desire triggered.
2024-11-01 09:53:31,945 - INFO - Desire added: 4. Desires:
Desire 1: The agent's long term goal is to explore the map, identify all parcel spawn locations and delivery cells, and plan optimal routes between them for efficient parcel delivery.
    Intention ID: [7]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up the parcel and then move towards the nearest delivery cell to deliver the parcel.
                def function_7():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                    function_6()
                
    Intention ID: [8]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_8():
                    global belief_set
                    agent_position = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_iterations = 1000
                    i = 0
                    while agent_position != parcel_spawn_location and i < max_iterations:
                        i += 1
                        if agent_position[0] < parcel_spawn_location[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > parcel_spawn_location[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < parcel_spawn_location[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > parcel_spawn_location[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_5()
                    i = 0
                    while agent_position != delivery_cell and i < max_iterations:
                        i += 1
                        if agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    spawn_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'parcels_spawn']
    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'delivery_cell']
    walkable_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'walkable']
    agent_position = belief_set['agent'][1]['coordinates']
    parcels_carried = belief_set['agent'][1]['parcels_carried_ids']
    if len(spawn_cells) == 0 or len(delivery_cells) == 0 or len(walkable_cells
        ) == 0:
        return False
    elif agent_position in [cell['cell_coordinates'] for cell in delivery_cells
        ] and len(parcels_carried) > 0:
        return False
    else:
        return True



Desire 2: The agent should aim to maximize its score by efficiently picking up parcels from the spawn location and delivering them to the designated delivery cells, while avoiding non-walkable areas.
    Intention ID: [9]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcels_spawn['cell_coordinates']:
                        if agent['coordinates'][0] > parcels_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn['cell_coordinates'][1]:
                            function_4()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel. This should be achieved in an efficient manner, minimizing the number of moves and avoiding infinite loops.
                def function_10():
                    global belief_set
                    max_moves = 100
                    moves = 0
                    while moves < max_moves:
                        if belief_set['agent'][1]['coordinates'] == [0, 0]:
                            function_5()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][1] > 0:
                            function_3()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][0] > 0:
                            function_1()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'] == [1, 3]:
                            function_6()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][1] < 3:
                            function_4()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][0] < 1:
                            function_2()
                            moves += 1
                    if moves == max_moves:
                        return 'Max moves reached, goal not achieved'
                
    Intention ID: [11]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up a parcel if it isn't carrying any, then move towards the closest delivery cell and drop off the parcel. The agent should stop executing actions when its goal has been achieved.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    map_grid = belief_set['map']['grid']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    while True:
                        if not agent['parcels_carried_ids']:
                            function_5()
                            if agent['parcels_carried_ids']:
                                continue
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        if agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        if agent['coordinates'] == delivery_cell['cell_coordinates'] and agent[
                            'parcels_carried_ids']:
                            function_6()
                            break
                
Executable: False
Trigger function:
None


Desire 3: The agent's long term goal is to optimize its route in order to collect as many parcels as possible and deliver them to the delivery cell in the least amount of time.
    Intention ID: [12]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up, then move towards the closest delivery cell and drop off the parcel.
                def function_12():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel_id, parcel_info in belief_set['parcels'].items():
                        if parcel_info['carried_by_id'] is None:
                            distance = abs(belief_set['agent'][1]['coordinates'][0] -
                                parcel_info['coordinates'][0]) + abs(belief_set['agent'][1]
                                ['coordinates'][1] - parcel_info['coordinates'][1])
                            if distance < min_distance:
                                min_distance = distance
                                nearest_parcel = parcel_info
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                        else:
                            function_4()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                            break
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                        else:
                            function_4()
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_2(belief_set):
    if not belief_set['parcels']:
        return False
    if belief_set['agent'][1]['coordinates'] == [1, 3] and belief_set['agent'][
        1]['parcels_carried_ids']:
        return True
    return True



Desire 4: The agent's long term goal is to continually improve its strategy for avoiding non_walkable cells and efficiently navigate towards the parcels_spawn and delivery_cell areas.
Executable: False
Trigger function:
None



2024-11-01 09:53:50,673 - INFO - Testing intention 
def function():
    global belief_set
    while True:
        if belief_set['agent'][1]['coordinates'] == belief_set['parcels'][16]['coordinates']:
            function_5()
        elif belief_set['agent'][1]['coordinates'] == [belief_set['map']['grid'][7]['cell_coordinates'][0], belief_set['map']['grid'][7]['cell_coordinates'][1]]:
            function_6()
        elif belief_set['agent'][1]['coordinates'][0] > belief_set['parcels'][16]['coordinates'][0] and belief_set['map']['grid'][(belief_set['agent'][1]['coordinates'][0] - 1) * belief_set['map']['width'] + belief_set['agent'][1]['coordinates'][1]]['cell_type'] == 'walkable':
            function_1()
        elif belief_set['agent'][1]['coordinates'][0] < belief_set['parcels'][16]['coordinates'][0] and belief_set['map']['grid'][(belief_set['agent'][1]['coordinates'][0] + 1) * belief_set['map']['width'] + belief_set['agent'][1]['coordinates'][1]]['cell_type'] == 'walkable':
            function_2()
        elif belief_set['agent'][1]['coordinates'][1] > belief_set['parcels'][16]['coordinates'][1] and belief_set['map']['grid'][belief_set['agent'][1]['coordinates'][0] * belief_set['map']['width'] + (belief_set['agent'][1]['coordinates'][1] - 1)]['cell_type'] == 'walkable':
            function_3()
        elif belief_set['agent'][1]['coordinates'][1] < belief_set['parcels'][16]['coordinates'][1] and belief_set['map']['grid'][belief_set['agent'][1]['coordinates'][0] * belief_set['map']['width'] + (belief_set['agent'][1]['coordinates'][1] + 1)]['cell_type'] == 'walkable':
            function_4()
        else:
            break
2024-11-01 09:53:50,724 - INFO - The intention is valid.
2024-11-01 09:53:50,750 - INFO - Intention added to desire 4
2024-11-01 09:53:50,775 - INFO - Running intention 13 ...
2024-11-01 09:53:50,968 - INFO - Belief set thread started ...
2024-11-01 09:53:50,986 - INFO - Plan thread started ...
2024-11-01 09:53:51,018 - INFO - Started subprocess...
2024-11-01 09:53:51,018 - INFO - Belief set before intention 13 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 300}}, 'parcels': {16: {'id': 16, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:53:51,439 - INFO - Executing action action_6 ...
2024-11-01 09:53:51,684 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:53:52,010 - INFO - Executing action action_6 ...
2024-11-01 09:53:52,252 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:53:52,650 - INFO - Executing action action_6 ...
2024-11-01 09:53:52,892 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:53:53,168 - INFO - Executing action action_6 ...
2024-11-01 09:53:53,404 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:53:53,759 - INFO - Executing action action_6 ...
2024-11-01 09:53:54,034 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:53:54,344 - INFO - Executing action action_6 ...
2024-11-01 09:53:54,580 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:53:54,873 - INFO - Executing action action_6 ...
2024-11-01 09:53:55,084 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:53:55,399 - INFO - Executing action action_6 ...
2024-11-01 09:53:55,642 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:53:55,986 - INFO - Executing action action_6 ...
2024-11-01 09:53:56,205 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:53:56,537 - INFO - Executing action action_6 ...
2024-11-01 09:53:56,785 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:53:57,193 - INFO - Executing action action_6 ...
2024-11-01 09:53:57,436 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:53:57,797 - INFO - Executing action action_6 ...
2024-11-01 09:53:58,046 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:53:58,396 - INFO - Executing action action_6 ...
2024-11-01 09:53:58,626 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:53:58,919 - INFO - Executing action action_6 ...
2024-11-01 09:53:59,143 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:53:59,485 - INFO - Executing action action_6 ...
2024-11-01 09:53:59,730 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:54:00,023 - INFO - Executing action action_6 ...
2024-11-01 09:54:00,270 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:54:00,569 - INFO - Executing action action_6 ...
2024-11-01 09:54:00,798 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:54:01,129 - INFO - Executing action action_6 ...
2024-11-01 09:54:01,343 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:54:01,624 - INFO - Executing action action_6 ...
2024-11-01 09:54:01,841 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:54:02,258 - INFO - Executing action action_6 ...
2024-11-01 09:54:02,482 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:54:02,767 - INFO - Executing action action_6 ...
2024-11-01 09:54:02,980 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:54:03,373 - INFO - Executing action action_6 ...
2024-11-01 09:54:03,609 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:54:03,878 - INFO - Executing action action_6 ...
2024-11-01 09:54:04,088 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:54:04,367 - INFO - Executing action action_6 ...
2024-11-01 09:54:04,597 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:54:04,883 - INFO - Executing action action_6 ...
2024-11-01 09:54:05,126 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:54:05,420 - INFO - Executing action action_6 ...
2024-11-01 09:54:05,667 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:54:06,040 - INFO - Executing action action_6 ...
2024-11-01 09:54:06,194 - ERROR - Error during intention 13 execution. Intention 13 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-01 09:54:06,282 - INFO - Belief set thread terminated.
2024-11-01 09:54:06,326 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:54:06,608 - INFO - Plan thread terminated.
2024-11-01 09:54:06,646 - INFO - Intention 13 execution has finished. Threads and subprocess terminated. Plan: ['action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6', 'action_6']. Events: [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-11-01 09:54:06,646 - INFO - Belief set after intention 13 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 300}}, 'parcels': {16: {'id': 16, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 17: {'id': 17, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:54:15,714 - INFO - Invalidating intention 13 ...
2024-11-01 09:54:21,592 - INFO - Testing intention 
def function():
	global belief_set
	max_iterations = 100
	iteration = 0
	while iteration < max_iterations:
		function_8()
		if belief_set['agent'][1]['parcels_carried_ids']:
			function_6()
		iteration += 1
2024-11-01 09:54:21,593 - INFO - The intention is valid.
2024-11-01 09:54:21,599 - INFO - Intention added to desire 4
2024-11-01 09:54:21,618 - INFO - Running intention 14 ...
2024-11-01 09:54:21,744 - INFO - Belief set thread started ...
2024-11-01 09:54:21,750 - INFO - Plan thread started ...
2024-11-01 09:54:21,775 - INFO - Started subprocess...
2024-11-01 09:54:21,775 - INFO - Belief set before intention 14 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 300}}, 'parcels': {16: {'id': 16, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 17: {'id': 17, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 18: {'id': 18, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:54:22,083 - INFO - Executing action action_1 ...
2024-11-01 09:54:22,325 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 300}}]
2024-11-01 09:54:22,645 - INFO - Executing action action_3 ...
2024-11-01 09:54:22,876 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 300}}]
2024-11-01 09:54:23,172 - INFO - Executing action action_3 ...
2024-11-01 09:54:23,396 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 300}}]
2024-11-01 09:54:23,764 - INFO - Executing action action_3 ...
2024-11-01 09:54:24,001 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 300}}]
2024-11-01 09:54:24,287 - INFO - Executing action action_5 ...
2024-11-01 09:54:24,532 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 16, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 17, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 18, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [16, 17, 18], 'score': 300}}]
2024-11-01 09:54:24,824 - INFO - Executing action action_2 ...
2024-11-01 09:54:25,086 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 16, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 17, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 18, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [16, 17, 18], 'score': 300}}]
2024-11-01 09:54:25,379 - INFO - Executing action action_4 ...
2024-11-01 09:54:25,617 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 16, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 17, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 18, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}]
2024-11-01 09:54:25,955 - INFO - Executing action action_4 ...
2024-11-01 09:54:26,204 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 16, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 17, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 18, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [16, 17, 18], 'score': 300}}]
2024-11-01 09:54:26,524 - INFO - Executing action action_4 ...
2024-11-01 09:54:26,829 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 16, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 17, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 18, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [16, 17, 18], 'score': 300}}]
2024-11-01 09:54:27,092 - INFO - Executing action action_6 ...
2024-11-01 09:54:27,309 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 360}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 16, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 17, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 18, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-11-01 09:54:27,663 - INFO - Executing action action_1 ...
2024-11-01 09:54:27,881 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 360}}]
2024-11-01 09:54:28,269 - INFO - Executing action action_3 ...
2024-11-01 09:54:28,488 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 360}}]
2024-11-01 09:54:28,854 - INFO - Executing action action_3 ...
2024-11-01 09:54:29,134 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 360}}]
2024-11-01 09:54:29,435 - INFO - Executing action action_3 ...
2024-11-01 09:54:29,648 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 360}}]
2024-11-01 09:54:29,966 - INFO - Executing action action_5 ...
2024-11-01 09:54:30,189 - INFO - Action action_5 executed. Events received: []
2024-11-01 09:54:30,495 - INFO - Executing action action_2 ...
2024-11-01 09:54:30,714 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'score': 360}}]
2024-11-01 09:54:31,015 - INFO - Executing action action_4 ...
2024-11-01 09:54:31,241 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'score': 360}}]
2024-11-01 09:54:31,571 - INFO - Executing action action_4 ...
2024-11-01 09:54:31,790 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'score': 360}}]
2024-11-01 09:54:32,151 - INFO - Executing action action_4 ...
2024-11-01 09:54:32,413 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 360}}]
2024-11-01 09:54:32,773 - INFO - Executing action action_6 ...
2024-11-01 09:54:33,023 - INFO - Action action_6 executed. Events received: []
2024-11-01 09:54:33,352 - INFO - Executing action action_1 ...
2024-11-01 09:54:33,582 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 360}}]
2024-11-01 09:54:33,906 - INFO - Executing action action_3 ...
2024-11-01 09:54:34,150 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 360}}]
2024-11-01 09:54:34,496 - INFO - Executing action action_3 ...
2024-11-01 09:54:34,733 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 360}}]
2024-11-01 09:54:35,094 - INFO - Executing action action_3 ...
2024-11-01 09:54:35,339 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 360}}]
2024-11-01 09:54:35,708 - INFO - Executing action action_5 ...
2024-11-01 09:54:35,964 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [19], 'score': 360}}]
2024-11-01 09:54:36,251 - INFO - Executing action action_2 ...
2024-11-01 09:54:36,506 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [19], 'score': 360}}]
2024-11-01 09:54:36,804 - INFO - Executing action action_4 ...
2024-11-01 09:54:36,810 - ERROR - Error during intention 14 execution. Intention 14 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-11-01 09:54:36,817 - INFO - Belief set thread terminated.
2024-11-01 09:54:37,016 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [19], 'score': 360}}]
2024-11-01 09:54:37,302 - INFO - Plan thread terminated.
2024-11-01 09:54:37,359 - INFO - Intention 14 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6', 'action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6', 'action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 300}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 300}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 300}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 300}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 16, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 17, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 18, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [16, 17, 18], 'score': 300}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 16, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 17, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 18, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [16, 17, 18], 'score': 300}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 16, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 17, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 18, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 16, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 17, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 18, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [16, 17, 18], 'score': 300}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 16, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 17, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 18, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [16, 17, 18], 'score': 300}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 360}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 16, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 17, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 18, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 360}}], [], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 360}}], [], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [19], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [19], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [19], 'score': 360}}]]
2024-11-01 09:54:37,372 - INFO - Belief set after intention 14 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [19], 'score': 360}}, 'parcels': {19: {'id': 19, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}}
2024-11-01 09:54:44,144 - INFO - Invalidating intention 14 ...
2024-11-01 09:54:56,977 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    parcels = belief_set['parcels']
    map_grid = belief_set['map']['grid']
    delivery_cell = [cell for cell in map_grid if cell['cell_type'] == 'delivery_cell'][0]
    agent_cell = [cell for cell in map_grid if cell['cell_coordinates'] == agent['coordinates']][0]
    if not agent['parcels_carried_ids']:
        parcel_spawn = [cell for cell in map_grid if cell['cell_type'] == 'parcels_spawn'][0]
        if agent_cell['cell_coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
            function_2()
        elif agent_cell['cell_coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
            function_1()
        elif agent_cell['cell_coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
            function_4()
        elif agent_cell['cell_coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
            function_3()
        function_5()
    else:
        if agent_cell['cell_coordinates'][0] < delivery_cell['cell_coordinates'][0]:
            function_2()
        elif agent_cell['cell_coordinates'][0] > delivery_cell['cell_coordinates'][0]:
            function_1()
        elif agent_cell['cell_coordinates'][1] < delivery_cell['cell_coordinates'][1]:
            function_4()
        elif agent_cell['cell_coordinates'][1] > delivery_cell['cell_coordinates'][1]:
            function_3()
        function_6()
2024-11-01 09:54:57,003 - INFO - The intention is valid.
2024-11-01 09:54:57,004 - INFO - Intention added to desire 4
2024-11-01 09:54:57,036 - INFO - Running intention 15 ...
2024-11-01 09:54:57,118 - INFO - Belief set thread started ...
2024-11-01 09:54:57,130 - INFO - Plan thread started ...
2024-11-01 09:54:57,143 - INFO - Started subprocess...
2024-11-01 09:54:57,193 - INFO - Belief set before intention 15 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [19], 'score': 360}}, 'parcels': {19: {'id': 19, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}, 20: {'id': 20, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:54:57,437 - INFO - Executing action action_4 ...
2024-11-01 09:54:57,644 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}]
2024-11-01 09:54:57,957 - INFO - Executing action action_6 ...
2024-11-01 09:54:58,187 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'score': 360}}]
2024-11-01 09:54:58,598 - INFO - Belief set thread terminated.
2024-11-01 09:54:58,673 - INFO - Plan thread terminated.
2024-11-01 09:54:58,698 - INFO - Intention 15 execution has finished. Threads and subprocess terminated. Plan: ['action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'score': 360}}]]
2024-11-01 09:54:58,698 - INFO - Belief set after intention 15 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'score': 360}}, 'parcels': {19: {'id': 19, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': None}, 20: {'id': 20, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:55:03,681 - INFO - Invalidating intention 15 ...
2024-11-01 09:55:03,681 - INFO - Invalidating intention 1 ...
2024-11-01 09:55:03,681 - INFO - Intention 1 is a base action. It cannot be invalidated.
2024-11-01 09:55:03,681 - INFO - Invalidating intention 2 ...
2024-11-01 09:55:03,681 - INFO - Intention 2 is a base action. It cannot be invalidated.
2024-11-01 09:55:03,681 - INFO - Invalidating intention 3 ...
2024-11-01 09:55:03,681 - INFO - Intention 3 is a base action. It cannot be invalidated.
2024-11-01 09:55:03,681 - INFO - Invalidating intention 4 ...
2024-11-01 09:55:03,681 - INFO - Intention 4 is a base action. It cannot be invalidated.
2024-11-01 09:55:03,687 - INFO - Invalidating intention 5 ...
2024-11-01 09:55:03,688 - INFO - Intention 5 is a base action. It cannot be invalidated.
2024-11-01 09:55:03,688 - INFO - Invalidating intention 6 ...
2024-11-01 09:55:03,713 - INFO - Intention 6 is a base action. It cannot be invalidated.
2024-11-01 09:55:10,437 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long term goal is to explore the map, identify all parcel spawn locations and delivery cells, and plan optimal routes between them for efficient parcel delivery.
    Intention ID: [7]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up the parcel and then move towards the nearest delivery cell to deliver the parcel.
                def function_7():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                    function_6()
                
    Intention ID: [8]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_8():
                    global belief_set
                    agent_position = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_iterations = 1000
                    i = 0
                    while agent_position != parcel_spawn_location and i < max_iterations:
                        i += 1
                        if agent_position[0] < parcel_spawn_location[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > parcel_spawn_location[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < parcel_spawn_location[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > parcel_spawn_location[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_5()
                    i = 0
                    while agent_position != delivery_cell and i < max_iterations:
                        i += 1
                        if agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    spawn_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'parcels_spawn']
    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'delivery_cell']
    walkable_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'walkable']
    agent_position = belief_set['agent'][1]['coordinates']
    parcels_carried = belief_set['agent'][1]['parcels_carried_ids']
    if len(spawn_cells) == 0 or len(delivery_cells) == 0 or len(walkable_cells
        ) == 0:
        return False
    elif agent_position in [cell['cell_coordinates'] for cell in delivery_cells
        ] and len(parcels_carried) > 0:
        return False
    else:
        return True



Desire 2: The agent should aim to maximize its score by efficiently picking up parcels from the spawn location and delivering them to the designated delivery cells, while avoiding non-walkable areas.
    Intention ID: [9]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcels_spawn['cell_coordinates']:
                        if agent['coordinates'][0] > parcels_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn['cell_coordinates'][1]:
                            function_4()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel. This should be achieved in an efficient manner, minimizing the number of moves and avoiding infinite loops.
                def function_10():
                    global belief_set
                    max_moves = 100
                    moves = 0
                    while moves < max_moves:
                        if belief_set['agent'][1]['coordinates'] == [0, 0]:
                            function_5()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][1] > 0:
                            function_3()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][0] > 0:
                            function_1()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'] == [1, 3]:
                            function_6()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][1] < 3:
                            function_4()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][0] < 1:
                            function_2()
                            moves += 1
                    if moves == max_moves:
                        return 'Max moves reached, goal not achieved'
                
    Intention ID: [11]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up a parcel if it isn't carrying any, then move towards the closest delivery cell and drop off the parcel. The agent should stop executing actions when its goal has been achieved.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    map_grid = belief_set['map']['grid']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    while True:
                        if not agent['parcels_carried_ids']:
                            function_5()
                            if agent['parcels_carried_ids']:
                                continue
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        if agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        if agent['coordinates'] == delivery_cell['cell_coordinates'] and agent[
                            'parcels_carried_ids']:
                            function_6()
                            break
                
Executable: False
Trigger function:
None


Desire 3: The agent's long term goal is to optimize its route in order to collect as many parcels as possible and deliver them to the delivery cell in the least amount of time.
    Intention ID: [12]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up, then move towards the closest delivery cell and drop off the parcel.
                def function_12():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel_id, parcel_info in belief_set['parcels'].items():
                        if parcel_info['carried_by_id'] is None:
                            distance = abs(belief_set['agent'][1]['coordinates'][0] -
                                parcel_info['coordinates'][0]) + abs(belief_set['agent'][1]
                                ['coordinates'][1] - parcel_info['coordinates'][1])
                            if distance < min_distance:
                                min_distance = distance
                                nearest_parcel = parcel_info
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                        else:
                            function_4()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                            break
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                        else:
                            function_4()
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_2(belief_set):
    if not belief_set['parcels']:
        return False
    if belief_set['agent'][1]['coordinates'] == [1, 3] and belief_set['agent'][
        1]['parcels_carried_ids']:
        return True
    return True



Desire 4: The agent's long term goal is to continually improve its strategy for avoiding non_walkable cells and efficiently navigate towards the parcels_spawn and delivery_cell areas.
    Intention ID: [13]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel, pick it up, and then move towards the nearest delivery cell to drop off the parcel, while avoiding non-walkable cells.
                def function_13():
                    global belief_set
                    while True:
                        if belief_set['agent'][1]['coordinates'] == belief_set['parcels'][16][
                            'coordinates']:
                            function_5()
                        elif belief_set['agent'][1]['coordinates'] == [belief_set['map'][
                            'grid'][7]['cell_coordinates'][0], belief_set['map']['grid'][7]
                            ['cell_coordinates'][1]]:
                            function_6()
                        elif belief_set['agent'][1]['coordinates'][0] > belief_set['parcels'][
                            16]['coordinates'][0] and belief_set['map']['grid'][(belief_set
                            ['agent'][1]['coordinates'][0] - 1) * belief_set['map']['width'
                            ] + belief_set['agent'][1]['coordinates'][1]]['cell_type'
                            ] == 'walkable':
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < belief_set['parcels'][
                            16]['coordinates'][0] and belief_set['map']['grid'][(belief_set
                            ['agent'][1]['coordinates'][0] + 1) * belief_set['map']['width'
                            ] + belief_set['agent'][1]['coordinates'][1]]['cell_type'
                            ] == 'walkable':
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][1] > belief_set['parcels'][
                            16]['coordinates'][1] and belief_set['map']['grid'][belief_set[
                            'agent'][1]['coordinates'][0] * belief_set['map']['width'] + (
                            belief_set['agent'][1]['coordinates'][1] - 1)]['cell_type'
                            ] == 'walkable':
                            function_3()
                        elif belief_set['agent'][1]['coordinates'][1] < belief_set['parcels'][
                            16]['coordinates'][1] and belief_set['map']['grid'][belief_set[
                            'agent'][1]['coordinates'][0] * belief_set['map']['width'] + (
                            belief_set['agent'][1]['coordinates'][1] + 1)]['cell_type'
                            ] == 'walkable':
                            function_4()
                        else:
                            break
                
    Intention ID: [14]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up a parcel if it's available, then move towards the nearest delivery cell and drop off the parcel if it's carrying one, while avoiding non-walkable cells.
                def function_14():
                    global belief_set
                    max_iterations = 100
                    iteration = 0
                    while iteration < max_iterations:
                        function_8()
                        if belief_set['agent'][1]['parcels_carried_ids']:
                            function_6()
                        iteration += 1
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel if it's not carrying any, pick it up, then move towards the nearest delivery cell and drop off the parcel if it's carrying one, while avoiding non-walkable cells.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    map_grid = belief_set['map']['grid']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    agent_cell = [cell for cell in map_grid if cell['cell_coordinates'] ==
                        agent['coordinates']][0]
                    if not agent['parcels_carried_ids']:
                        parcel_spawn = [cell for cell in map_grid if cell['cell_type'] ==
                            'parcels_spawn'][0]
                        if agent_cell['cell_coordinates'][0] < parcel_spawn['cell_coordinates'
                            ][0]:
                            function_2()
                        elif agent_cell['cell_coordinates'][0] > parcel_spawn[
                            'cell_coordinates'][0]:
                            function_1()
                        elif agent_cell['cell_coordinates'][1] < parcel_spawn[
                            'cell_coordinates'][1]:
                            function_4()
                        elif agent_cell['cell_coordinates'][1] > parcel_spawn[
                            'cell_coordinates'][1]:
                            function_3()
                        function_5()
                    else:
                        if agent_cell['cell_coordinates'][0] < delivery_cell['cell_coordinates'
                            ][0]:
                            function_2()
                        elif agent_cell['cell_coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif agent_cell['cell_coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif agent_cell['cell_coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                        function_6()
                
Executable: False
Trigger function:
None



2024-11-01 09:55:10,462 - INFO - Running trigger function for desire 3 ...
2024-11-01 09:55:10,475 - INFO - Trigger function for desire 3 has been executed. Result: True
2024-11-01 09:55:10,475 - INFO - Desire 3 could be triggered. Adding it to the list...
2024-11-01 09:55:10,487 - INFO - Desires triggered: [3]. Now randomly choosing which one to run.
2024-11-01 09:55:10,487 - INFO - Desire 3 was randomly chosen. Desire 3 has been triggered.
2024-11-01 09:55:10,488 - INFO - Desire 3 is about to be executed ...
2024-11-01 09:55:10,488 - INFO - Executing all valid intentions for desire 3 ...
2024-11-01 09:55:10,488 - INFO - Executing intention 12 ...
2024-11-01 09:55:10,488 - INFO - Running intention 12 ...
2024-11-01 09:55:10,688 - INFO - Belief set thread started ...
2024-11-01 09:55:10,694 - INFO - Plan thread started ...
2024-11-01 09:55:10,694 - INFO - Started subprocess...
2024-11-01 09:55:10,745 - INFO - Belief set before intention 12 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'score': 360}}, 'parcels': {19: {'id': 19, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': None}, 20: {'id': 20, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:55:11,083 - INFO - Executing action action_5 ...
2024-11-01 09:55:11,324 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [19], 'score': 360}}]
2024-11-01 09:55:11,636 - INFO - Executing action action_4 ...
2024-11-01 09:55:11,859 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [19], 'score': 360}}]
2024-11-01 09:55:12,242 - INFO - Executing action action_6 ...
2024-11-01 09:55:12,467 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 380}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-11-01 09:55:12,822 - INFO - Belief set thread terminated.
2024-11-01 09:55:12,828 - INFO - Plan thread terminated.
2024-11-01 09:55:12,847 - INFO - Intention 12 execution has finished. Threads and subprocess terminated. Plan: ['action_5', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [19], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [19], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 380}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-11-01 09:55:12,847 - INFO - Belief set after intention 12 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 380}}, 'parcels': {20: {'id': 20, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:55:12,847 - INFO - Intention 12 has been executed with plan ['action_5', 'action_4', 'action_6'] and events [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [19], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [19], 'score': 360}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 380}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 19, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]].
2024-11-01 09:55:19,482 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long term goal is to explore the map, identify all parcel spawn locations and delivery cells, and plan optimal routes between them for efficient parcel delivery.
    Intention ID: [7]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up the parcel and then move towards the nearest delivery cell to deliver the parcel.
                def function_7():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                    function_6()
                
    Intention ID: [8]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_8():
                    global belief_set
                    agent_position = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_iterations = 1000
                    i = 0
                    while agent_position != parcel_spawn_location and i < max_iterations:
                        i += 1
                        if agent_position[0] < parcel_spawn_location[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > parcel_spawn_location[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < parcel_spawn_location[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > parcel_spawn_location[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_5()
                    i = 0
                    while agent_position != delivery_cell and i < max_iterations:
                        i += 1
                        if agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    spawn_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'parcels_spawn']
    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'delivery_cell']
    walkable_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'walkable']
    agent_position = belief_set['agent'][1]['coordinates']
    parcels_carried = belief_set['agent'][1]['parcels_carried_ids']
    if len(spawn_cells) == 0 or len(delivery_cells) == 0 or len(walkable_cells
        ) == 0:
        return False
    elif agent_position in [cell['cell_coordinates'] for cell in delivery_cells
        ] and len(parcels_carried) > 0:
        return False
    else:
        return True



Desire 2: The agent should aim to maximize its score by efficiently picking up parcels from the spawn location and delivering them to the designated delivery cells, while avoiding non-walkable areas.
    Intention ID: [9]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcels_spawn['cell_coordinates']:
                        if agent['coordinates'][0] > parcels_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn['cell_coordinates'][1]:
                            function_4()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel. This should be achieved in an efficient manner, minimizing the number of moves and avoiding infinite loops.
                def function_10():
                    global belief_set
                    max_moves = 100
                    moves = 0
                    while moves < max_moves:
                        if belief_set['agent'][1]['coordinates'] == [0, 0]:
                            function_5()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][1] > 0:
                            function_3()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][0] > 0:
                            function_1()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'] == [1, 3]:
                            function_6()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][1] < 3:
                            function_4()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][0] < 1:
                            function_2()
                            moves += 1
                    if moves == max_moves:
                        return 'Max moves reached, goal not achieved'
                
    Intention ID: [11]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up a parcel if it isn't carrying any, then move towards the closest delivery cell and drop off the parcel. The agent should stop executing actions when its goal has been achieved.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    map_grid = belief_set['map']['grid']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    while True:
                        if not agent['parcels_carried_ids']:
                            function_5()
                            if agent['parcels_carried_ids']:
                                continue
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        if agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        if agent['coordinates'] == delivery_cell['cell_coordinates'] and agent[
                            'parcels_carried_ids']:
                            function_6()
                            break
                
Executable: False
Trigger function:
None


Desire 3: The agent's long term goal is to optimize its route in order to collect as many parcels as possible and deliver them to the delivery cell in the least amount of time.
    Intention ID: [12]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up, then move towards the closest delivery cell and drop off the parcel.
                def function_12():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel_id, parcel_info in belief_set['parcels'].items():
                        if parcel_info['carried_by_id'] is None:
                            distance = abs(belief_set['agent'][1]['coordinates'][0] -
                                parcel_info['coordinates'][0]) + abs(belief_set['agent'][1]
                                ['coordinates'][1] - parcel_info['coordinates'][1])
                            if distance < min_distance:
                                min_distance = distance
                                nearest_parcel = parcel_info
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                        else:
                            function_4()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                            break
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                        else:
                            function_4()
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_2(belief_set):
    if not belief_set['parcels']:
        return False
    if belief_set['agent'][1]['coordinates'] == [1, 3] and belief_set['agent'][
        1]['parcels_carried_ids']:
        return True
    return True



Desire 4: The agent's long term goal is to continually improve its strategy for avoiding non_walkable cells and efficiently navigate towards the parcels_spawn and delivery_cell areas.
    Intention ID: [13]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel, pick it up, and then move towards the nearest delivery cell to drop off the parcel, while avoiding non-walkable cells.
                def function_13():
                    global belief_set
                    while True:
                        if belief_set['agent'][1]['coordinates'] == belief_set['parcels'][16][
                            'coordinates']:
                            function_5()
                        elif belief_set['agent'][1]['coordinates'] == [belief_set['map'][
                            'grid'][7]['cell_coordinates'][0], belief_set['map']['grid'][7]
                            ['cell_coordinates'][1]]:
                            function_6()
                        elif belief_set['agent'][1]['coordinates'][0] > belief_set['parcels'][
                            16]['coordinates'][0] and belief_set['map']['grid'][(belief_set
                            ['agent'][1]['coordinates'][0] - 1) * belief_set['map']['width'
                            ] + belief_set['agent'][1]['coordinates'][1]]['cell_type'
                            ] == 'walkable':
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < belief_set['parcels'][
                            16]['coordinates'][0] and belief_set['map']['grid'][(belief_set
                            ['agent'][1]['coordinates'][0] + 1) * belief_set['map']['width'
                            ] + belief_set['agent'][1]['coordinates'][1]]['cell_type'
                            ] == 'walkable':
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][1] > belief_set['parcels'][
                            16]['coordinates'][1] and belief_set['map']['grid'][belief_set[
                            'agent'][1]['coordinates'][0] * belief_set['map']['width'] + (
                            belief_set['agent'][1]['coordinates'][1] - 1)]['cell_type'
                            ] == 'walkable':
                            function_3()
                        elif belief_set['agent'][1]['coordinates'][1] < belief_set['parcels'][
                            16]['coordinates'][1] and belief_set['map']['grid'][belief_set[
                            'agent'][1]['coordinates'][0] * belief_set['map']['width'] + (
                            belief_set['agent'][1]['coordinates'][1] + 1)]['cell_type'
                            ] == 'walkable':
                            function_4()
                        else:
                            break
                
    Intention ID: [14]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up a parcel if it's available, then move towards the nearest delivery cell and drop off the parcel if it's carrying one, while avoiding non-walkable cells.
                def function_14():
                    global belief_set
                    max_iterations = 100
                    iteration = 0
                    while iteration < max_iterations:
                        function_8()
                        if belief_set['agent'][1]['parcels_carried_ids']:
                            function_6()
                        iteration += 1
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel if it's not carrying any, pick it up, then move towards the nearest delivery cell and drop off the parcel if it's carrying one, while avoiding non-walkable cells.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    map_grid = belief_set['map']['grid']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    agent_cell = [cell for cell in map_grid if cell['cell_coordinates'] ==
                        agent['coordinates']][0]
                    if not agent['parcels_carried_ids']:
                        parcel_spawn = [cell for cell in map_grid if cell['cell_type'] ==
                            'parcels_spawn'][0]
                        if agent_cell['cell_coordinates'][0] < parcel_spawn['cell_coordinates'
                            ][0]:
                            function_2()
                        elif agent_cell['cell_coordinates'][0] > parcel_spawn[
                            'cell_coordinates'][0]:
                            function_1()
                        elif agent_cell['cell_coordinates'][1] < parcel_spawn[
                            'cell_coordinates'][1]:
                            function_4()
                        elif agent_cell['cell_coordinates'][1] > parcel_spawn[
                            'cell_coordinates'][1]:
                            function_3()
                        function_5()
                    else:
                        if agent_cell['cell_coordinates'][0] < delivery_cell['cell_coordinates'
                            ][0]:
                            function_2()
                        elif agent_cell['cell_coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif agent_cell['cell_coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif agent_cell['cell_coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                        function_6()
                
Executable: False
Trigger function:
None



2024-11-01 09:55:19,489 - INFO - Running trigger function for desire 3 ...
2024-11-01 09:55:19,514 - INFO - Trigger function for desire 3 has been executed. Result: True
2024-11-01 09:55:19,514 - INFO - Desire 3 could be triggered. Adding it to the list...
2024-11-01 09:55:19,514 - INFO - Desires triggered: [3]. Now randomly choosing which one to run.
2024-11-01 09:55:19,514 - INFO - Desire 3 was randomly chosen. Desire 3 has been triggered.
2024-11-01 09:55:19,539 - INFO - Desire 3 is about to be executed ...
2024-11-01 09:55:19,539 - INFO - Executing all valid intentions for desire 3 ...
2024-11-01 09:55:19,539 - INFO - Executing intention 12 ...
2024-11-01 09:55:19,546 - INFO - Running intention 12 ...
2024-11-01 09:55:19,676 - INFO - Belief set thread started ...
2024-11-01 09:55:19,732 - INFO - Plan thread started ...
2024-11-01 09:55:19,750 - INFO - Started subprocess...
2024-11-01 09:55:19,751 - INFO - Belief set before intention 12 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 380}}, 'parcels': {20: {'id': 20, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 21: {'id': 21, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-11-01 09:55:20,147 - INFO - Executing action action_1 ...
2024-11-01 09:55:20,367 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 380}}]
2024-11-01 09:55:20,667 - INFO - Executing action action_3 ...
2024-11-01 09:55:20,904 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 380}}]
2024-11-01 09:55:21,215 - INFO - Executing action action_3 ...
2024-11-01 09:55:21,434 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 380}}]
2024-11-01 09:55:21,764 - INFO - Executing action action_3 ...
2024-11-01 09:55:21,981 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 380}}]
2024-11-01 09:55:22,310 - INFO - Executing action action_5 ...
2024-11-01 09:55:22,535 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [20, 21], 'score': 380}}]
2024-11-01 09:55:22,871 - INFO - Executing action action_2 ...
2024-11-01 09:55:23,114 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [20, 21], 'score': 380}}]
2024-11-01 09:55:23,526 - INFO - Executing action action_4 ...
2024-11-01 09:55:23,745 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [20, 21], 'score': 380}}]
2024-11-01 09:55:24,074 - INFO - Executing action action_4 ...
2024-11-01 09:55:24,306 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [20, 21], 'score': 380}}]
2024-11-01 09:55:24,605 - INFO - Executing action action_4 ...
2024-11-01 09:55:24,867 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [20, 21], 'score': 380}}]
2024-11-01 09:55:25,168 - INFO - Executing action action_6 ...
2024-11-01 09:55:25,389 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 420}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-11-01 09:55:25,716 - INFO - Belief set thread terminated.
2024-11-01 09:55:25,716 - INFO - Plan thread terminated.
2024-11-01 09:55:25,784 - INFO - Intention 12 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [20, 21], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [20, 21], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [20, 21], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [20, 21], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [20, 21], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 420}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-11-01 09:55:25,784 - INFO - Belief set after intention 12 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 420}}, 'parcels': {}}
2024-11-01 09:55:25,784 - INFO - Intention 12 has been executed with plan ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6'] and events [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [20, 21], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [20, 21], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [20, 21], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [20, 21], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [20, 21], 'score': 380}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 420}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 20, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 21, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]].
2024-11-01 09:55:27,582 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long term goal is to explore the map, identify all parcel spawn locations and delivery cells, and plan optimal routes between them for efficient parcel delivery.
    Intention ID: [7]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up the parcel and then move towards the nearest delivery cell to deliver the parcel.
                def function_7():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                    function_6()
                
    Intention ID: [8]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_8():
                    global belief_set
                    agent_position = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    max_iterations = 1000
                    i = 0
                    while agent_position != parcel_spawn_location and i < max_iterations:
                        i += 1
                        if agent_position[0] < parcel_spawn_location[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > parcel_spawn_location[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < parcel_spawn_location[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > parcel_spawn_location[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_5()
                    i = 0
                    while agent_position != delivery_cell and i < max_iterations:
                        i += 1
                        if agent_position[0] < delivery_cell[0]:
                            function_2()
                            agent_position[0] += 1
                        elif agent_position[0] > delivery_cell[0]:
                            function_1()
                            agent_position[0] -= 1
                        elif agent_position[1] < delivery_cell[1]:
                            function_4()
                            agent_position[1] += 1
                        elif agent_position[1] > delivery_cell[1]:
                            function_3()
                            agent_position[1] -= 1
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    spawn_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'parcels_spawn']
    delivery_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'delivery_cell']
    walkable_cells = [cell for cell in belief_set['map']['grid'] if cell[
        'cell_type'] == 'walkable']
    agent_position = belief_set['agent'][1]['coordinates']
    parcels_carried = belief_set['agent'][1]['parcels_carried_ids']
    if len(spawn_cells) == 0 or len(delivery_cells) == 0 or len(walkable_cells
        ) == 0:
        return False
    elif agent_position in [cell['cell_coordinates'] for cell in delivery_cells
        ] and len(parcels_carried) > 0:
        return False
    else:
        return True



Desire 2: The agent should aim to maximize its score by efficiently picking up parcels from the spawn location and delivering them to the designated delivery cells, while avoiding non-walkable areas.
    Intention ID: [9]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcels_spawn['cell_coordinates']:
                        if agent['coordinates'][0] > parcels_spawn['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < parcels_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > parcels_spawn['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < parcels_spawn['cell_coordinates'][1]:
                            function_4()
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The short term goal is for the agent to move towards the nearest parcel spawn location, pick up a parcel, then move towards the closest delivery cell and drop off the parcel. This should be achieved in an efficient manner, minimizing the number of moves and avoiding infinite loops.
                def function_10():
                    global belief_set
                    max_moves = 100
                    moves = 0
                    while moves < max_moves:
                        if belief_set['agent'][1]['coordinates'] == [0, 0]:
                            function_5()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][1] > 0:
                            function_3()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][0] > 0:
                            function_1()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'] == [1, 3]:
                            function_6()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][1] < 3:
                            function_4()
                            moves += 1
                        elif belief_set['agent'][1]['coordinates'][0] < 1:
                            function_2()
                            moves += 1
                    if moves == max_moves:
                        return 'Max moves reached, goal not achieved'
                
    Intention ID: [11]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up a parcel if it isn't carrying any, then move towards the closest delivery cell and drop off the parcel. The agent should stop executing actions when its goal has been achieved.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    map_grid = belief_set['map']['grid']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    while True:
                        if not agent['parcels_carried_ids']:
                            function_5()
                            if agent['parcels_carried_ids']:
                                continue
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        if agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        if agent['coordinates'] == delivery_cell['cell_coordinates'] and agent[
                            'parcels_carried_ids']:
                            function_6()
                            break
                
Executable: False
Trigger function:
None


Desire 3: The agent's long term goal is to optimize its route in order to collect as many parcels as possible and deliver them to the delivery cell in the least amount of time.
    Intention ID: [12]
    Executable: True
    Description: The short term goal is for the agent to move towards the nearest parcel, pick it up, then move towards the closest delivery cell and drop off the parcel.
                def function_12():
                    global belief_set
                    min_distance = float('inf')
                    nearest_parcel = None
                    for parcel_id, parcel_info in belief_set['parcels'].items():
                        if parcel_info['carried_by_id'] is None:
                            distance = abs(belief_set['agent'][1]['coordinates'][0] -
                                parcel_info['coordinates'][0]) + abs(belief_set['agent'][1]
                                ['coordinates'][1] - parcel_info['coordinates'][1])
                            if distance < min_distance:
                                min_distance = distance
                                nearest_parcel = parcel_info
                    while belief_set['agent'][1]['coordinates'] != nearest_parcel['coordinates'
                        ]:
                        if belief_set['agent'][1]['coordinates'][0] > nearest_parcel[
                            'coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < nearest_parcel[
                            'coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][1] > nearest_parcel[
                            'coordinates'][1]:
                            function_3()
                        else:
                            function_4()
                    function_5()
                    for cell in belief_set['map']['grid']:
                        if cell['cell_type'] == 'delivery_cell':
                            delivery_cell = cell
                            break
                    while belief_set['agent'][1]['coordinates'] != delivery_cell[
                        'cell_coordinates']:
                        if belief_set['agent'][1]['coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < delivery_cell[
                            'cell_coordinates'][0]:
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                        else:
                            function_4()
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_2(belief_set):
    if not belief_set['parcels']:
        return False
    if belief_set['agent'][1]['coordinates'] == [1, 3] and belief_set['agent'][
        1]['parcels_carried_ids']:
        return True
    return True



Desire 4: The agent's long term goal is to continually improve its strategy for avoiding non_walkable cells and efficiently navigate towards the parcels_spawn and delivery_cell areas.
    Intention ID: [13]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel, pick it up, and then move towards the nearest delivery cell to drop off the parcel, while avoiding non-walkable cells.
                def function_13():
                    global belief_set
                    while True:
                        if belief_set['agent'][1]['coordinates'] == belief_set['parcels'][16][
                            'coordinates']:
                            function_5()
                        elif belief_set['agent'][1]['coordinates'] == [belief_set['map'][
                            'grid'][7]['cell_coordinates'][0], belief_set['map']['grid'][7]
                            ['cell_coordinates'][1]]:
                            function_6()
                        elif belief_set['agent'][1]['coordinates'][0] > belief_set['parcels'][
                            16]['coordinates'][0] and belief_set['map']['grid'][(belief_set
                            ['agent'][1]['coordinates'][0] - 1) * belief_set['map']['width'
                            ] + belief_set['agent'][1]['coordinates'][1]]['cell_type'
                            ] == 'walkable':
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < belief_set['parcels'][
                            16]['coordinates'][0] and belief_set['map']['grid'][(belief_set
                            ['agent'][1]['coordinates'][0] + 1) * belief_set['map']['width'
                            ] + belief_set['agent'][1]['coordinates'][1]]['cell_type'
                            ] == 'walkable':
                            function_2()
                        elif belief_set['agent'][1]['coordinates'][1] > belief_set['parcels'][
                            16]['coordinates'][1] and belief_set['map']['grid'][belief_set[
                            'agent'][1]['coordinates'][0] * belief_set['map']['width'] + (
                            belief_set['agent'][1]['coordinates'][1] - 1)]['cell_type'
                            ] == 'walkable':
                            function_3()
                        elif belief_set['agent'][1]['coordinates'][1] < belief_set['parcels'][
                            16]['coordinates'][1] and belief_set['map']['grid'][belief_set[
                            'agent'][1]['coordinates'][0] * belief_set['map']['width'] + (
                            belief_set['agent'][1]['coordinates'][1] + 1)]['cell_type'
                            ] == 'walkable':
                            function_4()
                        else:
                            break
                
    Intention ID: [14]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel spawn location, pick up a parcel if it's available, then move towards the nearest delivery cell and drop off the parcel if it's carrying one, while avoiding non-walkable cells.
                def function_14():
                    global belief_set
                    max_iterations = 100
                    iteration = 0
                    while iteration < max_iterations:
                        function_8()
                        if belief_set['agent'][1]['parcels_carried_ids']:
                            function_6()
                        iteration += 1
                
    Intention ID: [15]
    Executable: False
    Description: The agent's short term goal is to move towards the nearest parcel if it's not carrying any, pick it up, then move towards the nearest delivery cell and drop off the parcel if it's carrying one, while avoiding non-walkable cells.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    map_grid = belief_set['map']['grid']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    agent_cell = [cell for cell in map_grid if cell['cell_coordinates'] ==
                        agent['coordinates']][0]
                    if not agent['parcels_carried_ids']:
                        parcel_spawn = [cell for cell in map_grid if cell['cell_type'] ==
                            'parcels_spawn'][0]
                        if agent_cell['cell_coordinates'][0] < parcel_spawn['cell_coordinates'
                            ][0]:
                            function_2()
                        elif agent_cell['cell_coordinates'][0] > parcel_spawn[
                            'cell_coordinates'][0]:
                            function_1()
                        elif agent_cell['cell_coordinates'][1] < parcel_spawn[
                            'cell_coordinates'][1]:
                            function_4()
                        elif agent_cell['cell_coordinates'][1] > parcel_spawn[
                            'cell_coordinates'][1]:
                            function_3()
                        function_5()
                    else:
                        if agent_cell['cell_coordinates'][0] < delivery_cell['cell_coordinates'
                            ][0]:
                            function_2()
                        elif agent_cell['cell_coordinates'][0] > delivery_cell[
                            'cell_coordinates'][0]:
                            function_1()
                        elif agent_cell['cell_coordinates'][1] < delivery_cell[
                            'cell_coordinates'][1]:
                            function_4()
                        elif agent_cell['cell_coordinates'][1] > delivery_cell[
                            'cell_coordinates'][1]:
                            function_3()
                        function_6()
                
Executable: False
Trigger function:
None



2024-11-01 09:55:27,595 - INFO - Running trigger function for desire 3 ...
2024-11-01 09:55:27,595 - INFO - Trigger function for desire 3 has been executed. Result: False
2024-11-01 09:55:27,595 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-11-01 09:55:27,601 - INFO - No desire has been triggered.
2024-11-01 09:55:27,619 - INFO - No desire triggered.
