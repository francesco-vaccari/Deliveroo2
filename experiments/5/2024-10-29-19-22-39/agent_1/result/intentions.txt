
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        
[7]
Executable: True
Description: The agent should aim to move towards the parcel spawn location and pick up a parcel.
        def function_7():
            global belief_set
            spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
            while belief_set['agent'][1]['coordinates'] != spawn_location:
                if belief_set['agent'][1]['coordinates'][0] > spawn_location[0]:
                    function_1()
                elif belief_set['agent'][1]['coordinates'][0] < spawn_location[0]:
                    function_2()
                if belief_set['agent'][1]['coordinates'][1] > spawn_location[1]:
                    function_3()
                elif belief_set['agent'][1]['coordinates'][1] < spawn_location[1]:
                    function_4()
            function_5()
        
[8]
Executable: False
Description: The agent should move towards the delivery cell while avoiding the non-walkable cells, and deliver the parcels it is carrying.
        def function_8():
            global belief_set
            delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                ['cell_type'] == 'delivery_cell')
            agent = belief_set['agent'][1]
            while agent['coordinates'] != delivery_cell['cell_coordinates']:
                if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0] and [
                    agent['coordinates'][0] + 1, agent['coordinates'][1]] not in [cell
                    ['cell_coordinates'] for cell in belief_set['map']['grid'] if 
                    cell['cell_type'] == 'non_walkable']:
                    function_2()
                elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0
                    ] and [agent['coordinates'][0] - 1, agent['coordinates'][1]
                    ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                    ]['grid'] if cell['cell_type'] == 'non_walkable']:
                    function_1()
                elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1
                    ] and [agent['coordinates'][0], agent['coordinates'][1] + 1
                    ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                    ]['grid'] if cell['cell_type'] == 'non_walkable']:
                    function_4()
                elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1
                    ] and [agent['coordinates'][0], agent['coordinates'][1] - 1
                    ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                    ]['grid'] if cell['cell_type'] == 'non_walkable']:
                    function_3()
            function_6()
        
[9]
Executable: False
Description: The agent's short term goal is to move towards the delivery cell while avoiding non-walkable cells and deliver the parcels it is carrying. The function achieves this by first checking if the agent is carrying any parcels, and if so, it tries to move towards the delivery cell while avoiding non-walkable cells. Once it reaches the delivery cell, it puts down the parcels. The function also includes a termination condition to prevent infinite loops.
        def function_9():
            global belief_set
            max_attempts = 10
            attempts = 0
            while attempts < max_attempts and belief_set['agent'][1][
                'parcels_carried_ids']:
                coordinates = belief_set['agent'][1]['coordinates']
                if [coordinates[0] + 1, coordinates[1]] in [item['cell_coordinates'
                    ] for item in belief_set['map']['grid'] if item['cell_type'] ==
                    'walkable']:
                    function_2()
                elif [coordinates[0], coordinates[1] + 1] in [item[
                    'cell_coordinates'] for item in belief_set['map']['grid'] if 
                    item['cell_type'] == 'walkable']:
                    function_4()
                elif [coordinates[0] - 1, coordinates[1]] in [item[
                    'cell_coordinates'] for item in belief_set['map']['grid'] if 
                    item['cell_type'] == 'walkable']:
                    function_1()
                elif [coordinates[0], coordinates[1] - 1] in [item[
                    'cell_coordinates'] for item in belief_set['map']['grid'] if 
                    item['cell_type'] == 'walkable']:
                    function_3()
                attempts += 1
            if belief_set['agent'][1]['coordinates'] in [item['cell_coordinates'] for
                item in belief_set['map']['grid'] if item['cell_type'] ==
                'delivery_cell'] and belief_set['agent'][1]['parcels_carried_ids']:
                function_6()
        
[10]
Executable: False
Description: The agent should aim to reach the delivery cell with a parcel by finding a shortest path that does not cross any non-walkable cells, put the parcel down, then return back to the parcel spawn location, while avoiding getting stuck in loops.
        def function_10():
            global belief_set
            agent = belief_set['agent'][1]
            map_grid = belief_set['map']['grid']
            non_walkable_cells = [cell for cell in map_grid if cell['cell_type'] ==
                'non_walkable']
            delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                'delivery_cell'][0]
            parcels_spawn_cell = [cell for cell in map_grid if cell['cell_type'] ==
                'parcels_spawn'][0]
            path_to_delivery = a_star_pathfinding(agent['coordinates'],
                delivery_cell['cell_coordinates'], non_walkable_cells)
            if path_to_delivery is not None:
                for step in path_to_delivery:
                    if step[0] < agent['coordinates'][0]:
                        function_1()
                    elif step[0] > agent['coordinates'][0]:
                        function_2()
                    elif step[1] < agent['coordinates'][1]:
                        function_3()
                    else:
                        function_4()
                function_6()
            path_to_spawn = a_star_pathfinding(agent['coordinates'],
                parcels_spawn_cell['cell_coordinates'], non_walkable_cells)
            if path_to_spawn is not None:
                for step in path_to_spawn:
                    if step[0] < agent['coordinates'][0]:
                        function_1()
                    elif step[0] > agent['coordinates'][0]:
                        function_2()
                    elif step[1] < agent['coordinates'][1]:
                        function_3()
                    else:
                        function_4()
            function_5()
        
[11]
Executable: False
Description: The short term goal is to navigate the agent towards the delivery cell while avoiding non-walkable cells, and then drop the parcels that it is carrying.
        def function_11():
            global belief_set
            agent = belief_set['agent'][1]
            delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                'cell_type'] == 'delivery_cell'][0]
            if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                function_2()
            elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                function_1()
            elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                function_4()
            elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                function_3()
            else:
                function_6()
        
[12]
Executable: True
Description: The agent's short term goal is to move towards the spawn location of the parcels, pick up the parcels and then move towards the delivery cell while avoiding non-walkable cells.
        def function_12():
            global belief_set
            spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
            delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
            agent_location = belief_set['agent'][1]['coordinates']
            while agent_location != spawn_location:
                if agent_location[0] > spawn_location[0]:
                    function_1()
                elif agent_location[0] < spawn_location[0]:
                    function_2()
                if agent_location[1] > spawn_location[1]:
                    function_3()
                elif agent_location[1] < spawn_location[1]:
                    function_4()
                agent_location = belief_set['agent'][1]['coordinates']
            function_5()
            while agent_location != delivery_location:
                if agent_location[0] > delivery_location[0]:
                    function_1()
                elif agent_location[0] < delivery_location[0]:
                    function_2()
                if agent_location[1] > delivery_location[1]:
                    function_3()
                elif agent_location[1] < delivery_location[1]:
                    function_4()
                agent_location = belief_set['agent'][1]['coordinates']
            function_6()
        
[13]
Executable: True
Description: The short term goal is to navigate the agent towards the parcel, pick it up, and then deliver it to the delivery cell while avoiding non-walkable cells.
        def function_13():
            global belief_set
            function_7()
            function_5()
            function_12()
        
[14]
Executable: False
Description: The agent's short term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move towards the delivery cell while avoiding non-walkable cells.
        def function_14():
            global belief_set
            if belief_set['agent'][1]['coordinates'] != [0, 0]:
                function_1()
            function_5()
            while belief_set['agent'][1]['coordinates'] != [1, 3]:
                function_4()
            function_6()
        
[15]
Executable: True
Description: The short term goal is to navigate the agent towards the parcel, pick it up, and then deliver it to the delivery cell while avoiding non-walkable cells.
        def function_15():
            global belief_set
            parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
            delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
            agent_coordinates = belief_set['agent'][1]['coordinates']
            while agent_coordinates != parcel_spawn:
                if agent_coordinates[0] < parcel_spawn[0]:
                    function_2()
                    agent_coordinates[0] += 1
                elif agent_coordinates[0] > parcel_spawn[0]:
                    function_1()
                    agent_coordinates[0] -= 1
                elif agent_coordinates[1] < parcel_spawn[1]:
                    function_4()
                    agent_coordinates[1] += 1
                elif agent_coordinates[1] > parcel_spawn[1]:
                    function_3()
                    agent_coordinates[1] -= 1
            function_5()
            while agent_coordinates != delivery_cell:
                if agent_coordinates[0] < delivery_cell[0]:
                    function_2()
                    agent_coordinates[0] += 1
                elif agent_coordinates[0] > delivery_cell[0]:
                    function_1()
                    agent_coordinates[0] -= 1
                elif agent_coordinates[1] < delivery_cell[1]:
                    function_4()
                    agent_coordinates[1] += 1
                elif agent_coordinates[1] > delivery_cell[1]:
                    function_3()
                    agent_coordinates[1] -= 1
            function_6()
        
