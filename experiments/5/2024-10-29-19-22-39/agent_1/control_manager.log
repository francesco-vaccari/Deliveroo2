2024-10-29 19:22:43,676 - INFO - Loading actions from agent_dir/actions.json ...
2024-10-29 19:22:43,720 - INFO - Actions loaded: 
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        

2024-10-29 19:23:21,145 - INFO - Checking if a desire has been triggered ...
Desires: Empty
2024-10-29 19:23:21,151 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-10-29 19:23:21,170 - INFO - No desire has been triggered.
2024-10-29 19:23:21,170 - INFO - No desire triggered.
2024-10-29 19:23:22,972 - INFO - Desire added: 1. Desires:
Desire 1: The agent should aim to identify optimal paths that avoid non-walkable cells to efficiently collect and deliver as many parcels as possible.
Executable: False
Trigger function:
None



2024-10-29 19:23:30,098 - INFO - Testing intention 
def function():
    global belief_set
    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
    while belief_set['agent'][1]['coordinates'] != spawn_location:
        if belief_set['agent'][1]['coordinates'][0] > spawn_location[0]:
            function_1()
        elif belief_set['agent'][1]['coordinates'][0] < spawn_location[0]:
            function_2()
        if belief_set['agent'][1]['coordinates'][1] > spawn_location[1]:
            function_3()
        elif belief_set['agent'][1]['coordinates'][1] < spawn_location[1]:
            function_4()
    function_5()
2024-10-29 19:23:30,110 - INFO - The intention is valid.
2024-10-29 19:23:30,123 - INFO - Intention added to desire 1
2024-10-29 19:23:30,136 - INFO - Running intention 7 ...
2024-10-29 19:23:30,318 - INFO - Belief set thread started ...
2024-10-29 19:23:30,324 - INFO - Plan thread started ...
2024-10-29 19:23:30,331 - INFO - Started subprocess...
2024-10-29 19:23:30,362 - INFO - Belief set before intention 7 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 2: {'id': 2, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:23:30,724 - INFO - Executing action action_1 ...
2024-10-29 19:23:30,941 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 0}}]
2024-10-29 19:23:31,223 - INFO - Executing action action_3 ...
2024-10-29 19:23:31,509 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 0}}]
2024-10-29 19:23:31,818 - INFO - Executing action action_5 ...
2024-10-29 19:23:32,049 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:23:32,539 - INFO - Plan thread terminated.
2024-10-29 19:23:32,539 - INFO - Belief set thread terminated.
2024-10-29 19:23:32,570 - INFO - Intention 7 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_5']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [1, 2], 'score': 0}}]]
2024-10-29 19:23:32,595 - INFO - Belief set after intention 7 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [1, 2], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}}
2024-10-29 19:23:46,787 - INFO - Testing intention 
def function():
    global belief_set
    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell')
    agent = belief_set['agent'][1]
    while agent['coordinates'] != delivery_cell['cell_coordinates']:
        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0] and [agent['coordinates'][0] + 1, agent['coordinates'][1]] not in [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'non_walkable']:
            function_2()
        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0] and [agent['coordinates'][0] - 1, agent['coordinates'][1]] not in [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'non_walkable']:
            function_1()
        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1] and [agent['coordinates'][0], agent['coordinates'][1] + 1] not in [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'non_walkable']:
            function_4()
        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1] and [agent['coordinates'][0], agent['coordinates'][1] - 1] not in [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'non_walkable']:
            function_3()
    function_6()
2024-10-29 19:23:46,794 - INFO - The intention is valid.
2024-10-29 19:23:46,838 - INFO - Intention added to desire 1
2024-10-29 19:23:46,857 - INFO - Running intention 8 ...
2024-10-29 19:23:46,988 - INFO - Belief set thread started ...
2024-10-29 19:23:46,994 - INFO - Plan thread started ...
2024-10-29 19:23:47,006 - INFO - Started subprocess...
2024-10-29 19:23:47,006 - INFO - Belief set before intention 8 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [1, 2], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 3: {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:23:47,269 - INFO - Executing action action_2 ...
2024-10-29 19:23:47,512 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:23:47,831 - INFO - Executing action action_2 ...
2024-10-29 19:23:48,111 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:48,406 - INFO - Executing action action_2 ...
2024-10-29 19:23:48,630 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:49,042 - INFO - Executing action action_2 ...
2024-10-29 19:23:49,249 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:49,598 - INFO - Executing action action_2 ...
2024-10-29 19:23:49,811 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:50,104 - INFO - Executing action action_2 ...
2024-10-29 19:23:50,366 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:50,665 - INFO - Executing action action_2 ...
2024-10-29 19:23:50,925 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:51,250 - INFO - Executing action action_2 ...
2024-10-29 19:23:51,488 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:51,762 - INFO - Executing action action_2 ...
2024-10-29 19:23:51,986 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:52,316 - INFO - Executing action action_2 ...
2024-10-29 19:23:52,554 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:52,915 - INFO - Executing action action_2 ...
2024-10-29 19:23:53,208 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:53,488 - INFO - Executing action action_2 ...
2024-10-29 19:23:53,712 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:53,994 - INFO - Executing action action_2 ...
2024-10-29 19:23:54,207 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:54,520 - INFO - Executing action action_2 ...
2024-10-29 19:23:54,793 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:55,111 - INFO - Executing action action_2 ...
2024-10-29 19:23:55,323 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:55,647 - INFO - Executing action action_2 ...
2024-10-29 19:23:55,871 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:56,216 - INFO - Executing action action_2 ...
2024-10-29 19:23:56,416 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:56,794 - INFO - Executing action action_2 ...
2024-10-29 19:23:57,062 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:57,399 - INFO - Executing action action_2 ...
2024-10-29 19:23:57,625 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:57,934 - INFO - Executing action action_2 ...
2024-10-29 19:23:58,160 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:58,445 - INFO - Executing action action_2 ...
2024-10-29 19:23:58,705 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:59,103 - INFO - Executing action action_2 ...
2024-10-29 19:23:59,315 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:23:59,675 - INFO - Executing action action_2 ...
2024-10-29 19:23:59,897 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:24:00,255 - INFO - Executing action action_2 ...
2024-10-29 19:24:00,499 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:24:00,834 - INFO - Executing action action_2 ...
2024-10-29 19:24:01,071 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:24:01,398 - INFO - Executing action action_2 ...
2024-10-29 19:24:01,609 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:24:01,961 - INFO - Executing action action_2 ...
2024-10-29 19:24:02,037 - ERROR - Error during intention 8 execution. Intention 8 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-10-29 19:24:02,105 - INFO - Belief set thread terminated.
2024-10-29 19:24:02,173 - INFO - Action action_2 executed. Events received: []
2024-10-29 19:24:02,465 - INFO - Plan thread terminated.
2024-10-29 19:24:02,503 - INFO - Intention 8 execution has finished. Threads and subprocess terminated. Plan: ['action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2', 'action_2']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [1, 2], 'score': 0}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-10-29 19:24:02,516 - INFO - Belief set after intention 8 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [1, 2], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}, 3: {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:24:08,313 - INFO - Invalidating intention 8 ...
2024-10-29 19:24:20,725 - INFO - Testing intention 
def function():
    global belief_set
    max_attempts = 10
    attempts = 0
    while attempts < max_attempts and belief_set['agent'][1]['parcels_carried_ids']:
        coordinates = belief_set['agent'][1]['coordinates']
        if [coordinates[0]+1, coordinates[1]] in [item['cell_coordinates'] for item in belief_set['map']['grid'] if item['cell_type']=='walkable']:
            function_2()
        elif [coordinates[0], coordinates[1]+1] in [item['cell_coordinates'] for item in belief_set['map']['grid'] if item['cell_type']=='walkable']:
            function_4()
        elif [coordinates[0]-1, coordinates[1]] in [item['cell_coordinates'] for item in belief_set['map']['grid'] if item['cell_type']=='walkable']:
            function_1()
        elif [coordinates[0], coordinates[1]-1] in [item['cell_coordinates'] for item in belief_set['map']['grid'] if item['cell_type']=='walkable']:
            function_3()
        attempts += 1
    if belief_set['agent'][1]['coordinates'] in [item['cell_coordinates'] for item in belief_set['map']['grid'] if item['cell_type']=='delivery_cell'] and belief_set['agent'][1]['parcels_carried_ids']:
        function_6()

2024-10-29 19:24:20,776 - INFO - The intention is valid.
2024-10-29 19:24:20,783 - INFO - Intention added to desire 1
2024-10-29 19:24:20,796 - INFO - Running intention 9 ...
2024-10-29 19:24:20,878 - INFO - Belief set thread started ...
2024-10-29 19:24:20,884 - INFO - Plan thread started ...
2024-10-29 19:24:20,884 - INFO - Started subprocess...
2024-10-29 19:24:20,884 - INFO - Belief set before intention 9 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [1, 2], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}, 3: {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 4: {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:24:21,211 - INFO - Executing action action_4 ...
2024-10-29 19:24:21,454 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:24:21,726 - INFO - Executing action action_4 ...
2024-10-29 19:24:21,943 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:24:22,272 - INFO - Executing action action_1 ...
2024-10-29 19:24:22,509 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:24:22,806 - INFO - Executing action action_2 ...
2024-10-29 19:24:23,046 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:24:23,374 - INFO - Executing action action_1 ...
2024-10-29 19:24:23,599 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:24:23,891 - INFO - Executing action action_2 ...
2024-10-29 19:24:24,129 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:24:24,494 - INFO - Executing action action_1 ...
2024-10-29 19:24:24,767 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:24:25,072 - INFO - Executing action action_2 ...
2024-10-29 19:24:25,279 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:24:25,628 - INFO - Executing action action_1 ...
2024-10-29 19:24:25,872 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:24:26,171 - INFO - Executing action action_2 ...
2024-10-29 19:24:26,432 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:24:26,764 - INFO - Plan thread terminated.
2024-10-29 19:24:26,765 - INFO - Belief set thread terminated.
2024-10-29 19:24:26,777 - INFO - Intention 9 execution has finished. Threads and subprocess terminated. Plan: ['action_4', 'action_4', 'action_1', 'action_2', 'action_1', 'action_2', 'action_1', 'action_2', 'action_1', 'action_2']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}]]
2024-10-29 19:24:26,790 - INFO - Belief set after intention 9 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}, 3: {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 4: {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:24:30,623 - INFO - Invalidating intention 9 ...
2024-10-29 19:24:54,731 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    map_grid = belief_set['map']['grid']
    non_walkable_cells = [cell for cell in map_grid if cell['cell_type'] == 'non_walkable']
    delivery_cell = [cell for cell in map_grid if cell['cell_type'] == 'delivery_cell'][0]
    parcels_spawn_cell = [cell for cell in map_grid if cell['cell_type'] == 'parcels_spawn'][0]
    path_to_delivery = a_star_pathfinding(agent['coordinates'], delivery_cell['cell_coordinates'], non_walkable_cells)
    if path_to_delivery is not None:
        for step in path_to_delivery:
            if step[0] < agent['coordinates'][0]:
                function_1()
            elif step[0] > agent['coordinates'][0]:
                function_2()
            elif step[1] < agent['coordinates'][1]:
                function_3()
            else:
                function_4()
        function_6()
    path_to_spawn = a_star_pathfinding(agent['coordinates'], parcels_spawn_cell['cell_coordinates'], non_walkable_cells)
    if path_to_spawn is not None:
        for step in path_to_spawn:
            if step[0] < agent['coordinates'][0]:
                function_1()
            elif step[0] > agent['coordinates'][0]:
                function_2()
            elif step[1] < agent['coordinates'][1]:
                function_3()
            else:
                function_4()
    function_5()

2024-10-29 19:24:54,738 - INFO - The intention is valid.
2024-10-29 19:24:54,757 - INFO - Intention added to desire 1
2024-10-29 19:24:54,782 - INFO - Running intention 10 ...
2024-10-29 19:24:54,926 - INFO - Belief set thread started ...
2024-10-29 19:24:54,939 - INFO - Plan thread started ...
2024-10-29 19:24:54,958 - INFO - Started subprocess...
2024-10-29 19:24:54,958 - INFO - Belief set before intention 10 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}, 3: {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 4: {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:25:09,983 - ERROR - Error during intention 10 execution. Intention 10 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-10-29 19:25:10,052 - INFO - Plan thread terminated.
2024-10-29 19:25:10,059 - INFO - Belief set thread terminated.
2024-10-29 19:25:10,134 - INFO - Intention 10 execution has finished. Threads and subprocess terminated. Plan: []. Events: []
2024-10-29 19:25:10,134 - INFO - Belief set after intention 10 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}, 3: {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 4: {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:25:17,599 - INFO - Invalidating intention 10 ...
2024-10-29 19:25:17,629 - INFO - Invalidating intention 1 ...
2024-10-29 19:25:17,629 - INFO - Intention 1 is a base action. It cannot be invalidated.
2024-10-29 19:25:17,629 - INFO - Invalidating intention 2 ...
2024-10-29 19:25:17,629 - INFO - Intention 2 is a base action. It cannot be invalidated.
2024-10-29 19:25:17,642 - INFO - Invalidating intention 3 ...
2024-10-29 19:25:17,642 - INFO - Intention 3 is a base action. It cannot be invalidated.
2024-10-29 19:25:17,642 - INFO - Invalidating intention 4 ...
2024-10-29 19:25:17,642 - INFO - Intention 4 is a base action. It cannot be invalidated.
2024-10-29 19:25:17,648 - INFO - Invalidating intention 6 ...
2024-10-29 19:25:17,648 - INFO - Intention 6 is a base action. It cannot be invalidated.
2024-10-29 19:25:18,982 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent should aim to identify optimal paths that avoid non-walkable cells to efficiently collect and deliver as many parcels as possible.
    Intention ID: [7]
    Executable: True
    Description: The agent should aim to move towards the parcel spawn location and pick up a parcel.
                def function_7():
                    global belief_set
                    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    while belief_set['agent'][1]['coordinates'] != spawn_location:
                        if belief_set['agent'][1]['coordinates'][0] > spawn_location[0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < spawn_location[0]:
                            function_2()
                        if belief_set['agent'][1]['coordinates'][1] > spawn_location[1]:
                            function_3()
                        elif belief_set['agent'][1]['coordinates'][1] < spawn_location[1]:
                            function_4()
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The agent should move towards the delivery cell while avoiding the non-walkable cells, and deliver the parcels it is carrying.
                def function_8():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0] and [
                            agent['coordinates'][0] + 1, agent['coordinates'][1]] not in [cell
                            ['cell_coordinates'] for cell in belief_set['map']['grid'] if 
                            cell['cell_type'] == 'non_walkable']:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0
                            ] and [agent['coordinates'][0] - 1, agent['coordinates'][1]
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] + 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] - 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The agent's short term goal is to move towards the delivery cell while avoiding non-walkable cells and deliver the parcels it is carrying. The function achieves this by first checking if the agent is carrying any parcels, and if so, it tries to move towards the delivery cell while avoiding non-walkable cells. Once it reaches the delivery cell, it puts down the parcels. The function also includes a termination condition to prevent infinite loops.
                def function_9():
                    global belief_set
                    max_attempts = 10
                    attempts = 0
                    while attempts < max_attempts and belief_set['agent'][1][
                        'parcels_carried_ids']:
                        coordinates = belief_set['agent'][1]['coordinates']
                        if [coordinates[0] + 1, coordinates[1]] in [item['cell_coordinates'
                            ] for item in belief_set['map']['grid'] if item['cell_type'] ==
                            'walkable']:
                            function_2()
                        elif [coordinates[0], coordinates[1] + 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_4()
                        elif [coordinates[0] - 1, coordinates[1]] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_1()
                        elif [coordinates[0], coordinates[1] - 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_3()
                        attempts += 1
                    if belief_set['agent'][1]['coordinates'] in [item['cell_coordinates'] for
                        item in belief_set['map']['grid'] if item['cell_type'] ==
                        'delivery_cell'] and belief_set['agent'][1]['parcels_carried_ids']:
                        function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent should aim to reach the delivery cell with a parcel by finding a shortest path that does not cross any non-walkable cells, put the parcel down, then return back to the parcel spawn location, while avoiding getting stuck in loops.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map_grid = belief_set['map']['grid']
                    non_walkable_cells = [cell for cell in map_grid if cell['cell_type'] ==
                        'non_walkable']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    parcels_spawn_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'parcels_spawn'][0]
                    path_to_delivery = a_star_pathfinding(agent['coordinates'],
                        delivery_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_delivery is not None:
                        for step in path_to_delivery:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                        function_6()
                    path_to_spawn = a_star_pathfinding(agent['coordinates'],
                        parcels_spawn_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_spawn is not None:
                        for step in path_to_spawn:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                    function_5()
                
Executable: False
Trigger function:
None



2024-10-29 19:25:18,983 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-10-29 19:25:18,983 - INFO - No desire has been triggered.
2024-10-29 19:25:18,995 - INFO - No desire triggered.
2024-10-29 19:25:20,987 - INFO - Desire added: 2. Desires:
Desire 1: The agent should aim to identify optimal paths that avoid non-walkable cells to efficiently collect and deliver as many parcels as possible.
    Intention ID: [7]
    Executable: True
    Description: The agent should aim to move towards the parcel spawn location and pick up a parcel.
                def function_7():
                    global belief_set
                    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    while belief_set['agent'][1]['coordinates'] != spawn_location:
                        if belief_set['agent'][1]['coordinates'][0] > spawn_location[0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < spawn_location[0]:
                            function_2()
                        if belief_set['agent'][1]['coordinates'][1] > spawn_location[1]:
                            function_3()
                        elif belief_set['agent'][1]['coordinates'][1] < spawn_location[1]:
                            function_4()
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The agent should move towards the delivery cell while avoiding the non-walkable cells, and deliver the parcels it is carrying.
                def function_8():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0] and [
                            agent['coordinates'][0] + 1, agent['coordinates'][1]] not in [cell
                            ['cell_coordinates'] for cell in belief_set['map']['grid'] if 
                            cell['cell_type'] == 'non_walkable']:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0
                            ] and [agent['coordinates'][0] - 1, agent['coordinates'][1]
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] + 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] - 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The agent's short term goal is to move towards the delivery cell while avoiding non-walkable cells and deliver the parcels it is carrying. The function achieves this by first checking if the agent is carrying any parcels, and if so, it tries to move towards the delivery cell while avoiding non-walkable cells. Once it reaches the delivery cell, it puts down the parcels. The function also includes a termination condition to prevent infinite loops.
                def function_9():
                    global belief_set
                    max_attempts = 10
                    attempts = 0
                    while attempts < max_attempts and belief_set['agent'][1][
                        'parcels_carried_ids']:
                        coordinates = belief_set['agent'][1]['coordinates']
                        if [coordinates[0] + 1, coordinates[1]] in [item['cell_coordinates'
                            ] for item in belief_set['map']['grid'] if item['cell_type'] ==
                            'walkable']:
                            function_2()
                        elif [coordinates[0], coordinates[1] + 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_4()
                        elif [coordinates[0] - 1, coordinates[1]] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_1()
                        elif [coordinates[0], coordinates[1] - 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_3()
                        attempts += 1
                    if belief_set['agent'][1]['coordinates'] in [item['cell_coordinates'] for
                        item in belief_set['map']['grid'] if item['cell_type'] ==
                        'delivery_cell'] and belief_set['agent'][1]['parcels_carried_ids']:
                        function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent should aim to reach the delivery cell with a parcel by finding a shortest path that does not cross any non-walkable cells, put the parcel down, then return back to the parcel spawn location, while avoiding getting stuck in loops.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map_grid = belief_set['map']['grid']
                    non_walkable_cells = [cell for cell in map_grid if cell['cell_type'] ==
                        'non_walkable']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    parcels_spawn_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'parcels_spawn'][0]
                    path_to_delivery = a_star_pathfinding(agent['coordinates'],
                        delivery_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_delivery is not None:
                        for step in path_to_delivery:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                        function_6()
                    path_to_spawn = a_star_pathfinding(agent['coordinates'],
                        parcels_spawn_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_spawn is not None:
                        for step in path_to_spawn:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                    function_5()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to strategically plan a route that minimizes travel time and maximizes the delivery of parcels from the spawning area to the delivery cell, while also avoiding non-walkable cells.
Executable: False
Trigger function:
None



2024-10-29 19:25:27,415 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
    if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
        function_2()
    elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
        function_1()
    elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
        function_4()
    elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
        function_3()
    else:
        function_6()
2024-10-29 19:25:27,422 - INFO - The intention is valid.
2024-10-29 19:25:27,429 - INFO - Intention added to desire 2
2024-10-29 19:25:27,442 - INFO - Running intention 11 ...
2024-10-29 19:25:27,536 - INFO - Belief set thread started ...
2024-10-29 19:25:27,567 - INFO - Plan thread started ...
2024-10-29 19:25:27,579 - INFO - Started subprocess...
2024-10-29 19:25:27,592 - INFO - Belief set before intention 11 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}, 3: {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 4: {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:25:27,894 - INFO - Executing action action_4 ...
2024-10-29 19:25:28,176 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:25:28,563 - INFO - Belief set thread terminated.
2024-10-29 19:25:28,624 - INFO - Plan thread terminated.
2024-10-29 19:25:28,674 - INFO - Intention 11 execution has finished. Threads and subprocess terminated. Plan: ['action_4']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [1, 2], 'score': 0}}]]
2024-10-29 19:25:28,674 - INFO - Belief set after intention 11 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [1, 2], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 3: {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 4: {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:25:33,343 - INFO - Invalidating intention 11 ...
2024-10-29 19:25:44,737 - INFO - Testing intention 
def function():
    global belief_set
    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
    delivery_location = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
    agent_location = belief_set['agent'][1]['coordinates']
    while agent_location != spawn_location:
        if agent_location[0] > spawn_location[0]:
            function_1()
        elif agent_location[0] < spawn_location[0]:
            function_2()
        if agent_location[1] > spawn_location[1]:
            function_3()
        elif agent_location[1] < spawn_location[1]:
            function_4()
        agent_location = belief_set['agent'][1]['coordinates']
    function_5()
    while agent_location != delivery_location:
        if agent_location[0] > delivery_location[0]:
            function_1()
        elif agent_location[0] < delivery_location[0]:
            function_2()
        if agent_location[1] > delivery_location[1]:
            function_3()
        elif agent_location[1] < delivery_location[1]:
            function_4()
        agent_location = belief_set['agent'][1]['coordinates']
    function_6()
2024-10-29 19:25:44,744 - INFO - The intention is valid.
2024-10-29 19:25:44,758 - INFO - Intention added to desire 2
2024-10-29 19:25:44,790 - INFO - Running intention 12 ...
2024-10-29 19:25:44,993 - INFO - Belief set thread started ...
2024-10-29 19:25:45,005 - INFO - Plan thread started ...
2024-10-29 19:25:45,005 - INFO - Started subprocess...
2024-10-29 19:25:45,006 - INFO - Belief set before intention 12 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [1, 2], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 2: {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 3: {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 4: {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 8: {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:25:45,296 - INFO - Executing action action_1 ...
2024-10-29 19:25:45,533 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:25:45,886 - INFO - Executing action action_3 ...
2024-10-29 19:25:46,149 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:25:46,510 - INFO - Executing action action_3 ...
2024-10-29 19:25:46,732 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-29 19:25:47,038 - INFO - Executing action action_3 ...
2024-10-29 19:25:47,307 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}]
2024-10-29 19:25:47,614 - INFO - Executing action action_5 ...
2024-10-29 19:25:47,839 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'score': 0}}]
2024-10-29 19:25:48,132 - INFO - Executing action action_2 ...
2024-10-29 19:25:48,361 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'score': 0}}]
2024-10-29 19:25:48,700 - INFO - Executing action action_4 ...
2024-10-29 19:25:48,938 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}]
2024-10-29 19:25:49,312 - INFO - Executing action action_4 ...
2024-10-29 19:25:49,576 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'score': 0}}]
2024-10-29 19:25:49,955 - INFO - Executing action action_4 ...
2024-10-29 19:25:50,169 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'score': 0}}]
2024-10-29 19:25:50,539 - INFO - Executing action action_6 ...
2024-10-29 19:25:50,798 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 160}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-10-29 19:25:51,115 - INFO - Belief set thread terminated.
2024-10-29 19:25:51,147 - INFO - Plan thread terminated.
2024-10-29 19:25:51,160 - INFO - Intention 12 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [1, 2, 3, 4, 5, 6, 7, 8], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 160}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-10-29 19:25:51,160 - INFO - Belief set after intention 12 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 160}}, 'parcels': {9: {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:25:59,832 - INFO - Testing trigger function 
def should_pursue_goal(belief_set):
    parcels_spawn_exists = any(cell['cell_type'] == 'parcels_spawn' for cell in belief_set['map']['grid'])
    delivery_cell_exists = any(cell['cell_type'] == 'delivery_cell' for cell in belief_set['map']['grid'])
    walkable_path_exists = any(cell['cell_type'] == 'walkable' for cell in belief_set['map']['grid'])
    parcels_exist = any(parcel['carried_by_id'] is None for parcel in belief_set['parcels'].values())
    agent_parcels = belief_set['agent'][1]['parcels_carried_ids']
    if parcels_spawn_exists and delivery_cell_exists and walkable_path_exists and (parcels_exist or agent_parcels):
        return True
    else:
        return False
2024-10-29 19:25:59,852 - INFO - The trigger function is valid.
2024-10-29 19:25:59,859 - INFO - Trigger function added to desire 2.
2024-10-29 19:26:01,673 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent should aim to identify optimal paths that avoid non-walkable cells to efficiently collect and deliver as many parcels as possible.
    Intention ID: [7]
    Executable: True
    Description: The agent should aim to move towards the parcel spawn location and pick up a parcel.
                def function_7():
                    global belief_set
                    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    while belief_set['agent'][1]['coordinates'] != spawn_location:
                        if belief_set['agent'][1]['coordinates'][0] > spawn_location[0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < spawn_location[0]:
                            function_2()
                        if belief_set['agent'][1]['coordinates'][1] > spawn_location[1]:
                            function_3()
                        elif belief_set['agent'][1]['coordinates'][1] < spawn_location[1]:
                            function_4()
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The agent should move towards the delivery cell while avoiding the non-walkable cells, and deliver the parcels it is carrying.
                def function_8():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0] and [
                            agent['coordinates'][0] + 1, agent['coordinates'][1]] not in [cell
                            ['cell_coordinates'] for cell in belief_set['map']['grid'] if 
                            cell['cell_type'] == 'non_walkable']:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0
                            ] and [agent['coordinates'][0] - 1, agent['coordinates'][1]
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] + 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] - 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The agent's short term goal is to move towards the delivery cell while avoiding non-walkable cells and deliver the parcels it is carrying. The function achieves this by first checking if the agent is carrying any parcels, and if so, it tries to move towards the delivery cell while avoiding non-walkable cells. Once it reaches the delivery cell, it puts down the parcels. The function also includes a termination condition to prevent infinite loops.
                def function_9():
                    global belief_set
                    max_attempts = 10
                    attempts = 0
                    while attempts < max_attempts and belief_set['agent'][1][
                        'parcels_carried_ids']:
                        coordinates = belief_set['agent'][1]['coordinates']
                        if [coordinates[0] + 1, coordinates[1]] in [item['cell_coordinates'
                            ] for item in belief_set['map']['grid'] if item['cell_type'] ==
                            'walkable']:
                            function_2()
                        elif [coordinates[0], coordinates[1] + 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_4()
                        elif [coordinates[0] - 1, coordinates[1]] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_1()
                        elif [coordinates[0], coordinates[1] - 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_3()
                        attempts += 1
                    if belief_set['agent'][1]['coordinates'] in [item['cell_coordinates'] for
                        item in belief_set['map']['grid'] if item['cell_type'] ==
                        'delivery_cell'] and belief_set['agent'][1]['parcels_carried_ids']:
                        function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent should aim to reach the delivery cell with a parcel by finding a shortest path that does not cross any non-walkable cells, put the parcel down, then return back to the parcel spawn location, while avoiding getting stuck in loops.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map_grid = belief_set['map']['grid']
                    non_walkable_cells = [cell for cell in map_grid if cell['cell_type'] ==
                        'non_walkable']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    parcels_spawn_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'parcels_spawn'][0]
                    path_to_delivery = a_star_pathfinding(agent['coordinates'],
                        delivery_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_delivery is not None:
                        for step in path_to_delivery:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                        function_6()
                    path_to_spawn = a_star_pathfinding(agent['coordinates'],
                        parcels_spawn_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_spawn is not None:
                        for step in path_to_spawn:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                    function_5()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to strategically plan a route that minimizes travel time and maximizes the delivery of parcels from the spawning area to the delivery cell, while also avoiding non-walkable cells.
    Intention ID: [11]
    Executable: False
    Description: The short term goal is to navigate the agent towards the delivery cell while avoiding non-walkable cells, and then drop the parcels that it is carrying.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                        function_3()
                    else:
                        function_6()
                
    Intention ID: [12]
    Executable: True
    Description: The agent's short term goal is to move towards the spawn location of the parcels, pick up the parcels and then move towards the delivery cell while avoiding non-walkable cells.
                def function_12():
                    global belief_set
                    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != spawn_location:
                        if agent_location[0] > spawn_location[0]:
                            function_1()
                        elif agent_location[0] < spawn_location[0]:
                            function_2()
                        if agent_location[1] > spawn_location[1]:
                            function_3()
                        elif agent_location[1] < spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    parcels_spawn_exists = any(cell['cell_type'] == 'parcels_spawn' for
        cell in belief_set['map']['grid'])
    delivery_cell_exists = any(cell['cell_type'] == 'delivery_cell' for
        cell in belief_set['map']['grid'])
    walkable_path_exists = any(cell['cell_type'] == 'walkable' for cell in
        belief_set['map']['grid'])
    parcels_exist = any(parcel['carried_by_id'] is None for parcel in
        belief_set['parcels'].values())
    agent_parcels = belief_set['agent'][1]['parcels_carried_ids']
    if (parcels_spawn_exists and delivery_cell_exists and
        walkable_path_exists and (parcels_exist or agent_parcels)):
        return True
    else:
        return False




2024-10-29 19:26:01,673 - INFO - Running trigger function for desire 2 ...
2024-10-29 19:26:01,674 - INFO - Trigger function for desire 2 has been executed. Result: True
2024-10-29 19:26:01,674 - INFO - Desire 2 could be triggered. Adding it to the list...
2024-10-29 19:26:01,674 - INFO - Desires triggered: [2]. Now randomly choosing which one to run.
2024-10-29 19:26:01,674 - INFO - Desire 2 was randomly chosen. Desire 2 has been triggered.
2024-10-29 19:26:01,674 - INFO - Desire 2 is about to be executed ...
2024-10-29 19:26:01,674 - INFO - Executing all valid intentions for desire 2 ...
2024-10-29 19:26:01,674 - INFO - Executing intention 12 ...
2024-10-29 19:26:01,680 - INFO - Running intention 12 ...
2024-10-29 19:26:01,924 - INFO - Belief set thread started ...
2024-10-29 19:26:01,930 - INFO - Plan thread started ...
2024-10-29 19:26:01,974 - INFO - Started subprocess...
2024-10-29 19:26:01,974 - INFO - Belief set before intention 12 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 160}}, 'parcels': {9: {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:26:02,264 - INFO - Executing action action_1 ...
2024-10-29 19:26:02,499 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 160}}]
2024-10-29 19:26:02,879 - INFO - Executing action action_3 ...
2024-10-29 19:26:03,110 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 160}}]
2024-10-29 19:26:03,433 - INFO - Executing action action_3 ...
2024-10-29 19:26:03,674 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 160}}]
2024-10-29 19:26:04,061 - INFO - Executing action action_3 ...
2024-10-29 19:26:04,266 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 160}}]
2024-10-29 19:26:04,628 - INFO - Executing action action_5 ...
2024-10-29 19:26:04,853 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [9], 'score': 160}}]
2024-10-29 19:26:05,168 - INFO - Executing action action_2 ...
2024-10-29 19:26:05,382 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [9], 'score': 160}}]
2024-10-29 19:26:05,765 - INFO - Executing action action_4 ...
2024-10-29 19:26:05,975 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [9], 'score': 160}}]
2024-10-29 19:26:06,322 - INFO - Executing action action_4 ...
2024-10-29 19:26:06,540 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [9], 'score': 160}}]
2024-10-29 19:26:06,921 - INFO - Executing action action_4 ...
2024-10-29 19:26:07,158 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [9], 'score': 160}}]
2024-10-29 19:26:07,511 - INFO - Executing action action_6 ...
2024-10-29 19:26:07,771 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 180}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-10-29 19:26:08,093 - INFO - Plan thread terminated.
2024-10-29 19:26:08,105 - INFO - Belief set thread terminated.
2024-10-29 19:26:08,130 - INFO - Intention 12 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [9], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [9], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [9], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [9], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [9], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 180}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-10-29 19:26:08,130 - INFO - Belief set after intention 12 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 180}}, 'parcels': {}}
2024-10-29 19:26:08,130 - INFO - Intention 12 has been executed with plan ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6'] and events [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [9], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [9], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [9], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [9], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [9], 'score': 160}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 180}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]].
2024-10-29 19:26:09,812 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent should aim to identify optimal paths that avoid non-walkable cells to efficiently collect and deliver as many parcels as possible.
    Intention ID: [7]
    Executable: True
    Description: The agent should aim to move towards the parcel spawn location and pick up a parcel.
                def function_7():
                    global belief_set
                    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    while belief_set['agent'][1]['coordinates'] != spawn_location:
                        if belief_set['agent'][1]['coordinates'][0] > spawn_location[0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < spawn_location[0]:
                            function_2()
                        if belief_set['agent'][1]['coordinates'][1] > spawn_location[1]:
                            function_3()
                        elif belief_set['agent'][1]['coordinates'][1] < spawn_location[1]:
                            function_4()
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The agent should move towards the delivery cell while avoiding the non-walkable cells, and deliver the parcels it is carrying.
                def function_8():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0] and [
                            agent['coordinates'][0] + 1, agent['coordinates'][1]] not in [cell
                            ['cell_coordinates'] for cell in belief_set['map']['grid'] if 
                            cell['cell_type'] == 'non_walkable']:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0
                            ] and [agent['coordinates'][0] - 1, agent['coordinates'][1]
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] + 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] - 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The agent's short term goal is to move towards the delivery cell while avoiding non-walkable cells and deliver the parcels it is carrying. The function achieves this by first checking if the agent is carrying any parcels, and if so, it tries to move towards the delivery cell while avoiding non-walkable cells. Once it reaches the delivery cell, it puts down the parcels. The function also includes a termination condition to prevent infinite loops.
                def function_9():
                    global belief_set
                    max_attempts = 10
                    attempts = 0
                    while attempts < max_attempts and belief_set['agent'][1][
                        'parcels_carried_ids']:
                        coordinates = belief_set['agent'][1]['coordinates']
                        if [coordinates[0] + 1, coordinates[1]] in [item['cell_coordinates'
                            ] for item in belief_set['map']['grid'] if item['cell_type'] ==
                            'walkable']:
                            function_2()
                        elif [coordinates[0], coordinates[1] + 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_4()
                        elif [coordinates[0] - 1, coordinates[1]] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_1()
                        elif [coordinates[0], coordinates[1] - 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_3()
                        attempts += 1
                    if belief_set['agent'][1]['coordinates'] in [item['cell_coordinates'] for
                        item in belief_set['map']['grid'] if item['cell_type'] ==
                        'delivery_cell'] and belief_set['agent'][1]['parcels_carried_ids']:
                        function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent should aim to reach the delivery cell with a parcel by finding a shortest path that does not cross any non-walkable cells, put the parcel down, then return back to the parcel spawn location, while avoiding getting stuck in loops.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map_grid = belief_set['map']['grid']
                    non_walkable_cells = [cell for cell in map_grid if cell['cell_type'] ==
                        'non_walkable']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    parcels_spawn_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'parcels_spawn'][0]
                    path_to_delivery = a_star_pathfinding(agent['coordinates'],
                        delivery_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_delivery is not None:
                        for step in path_to_delivery:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                        function_6()
                    path_to_spawn = a_star_pathfinding(agent['coordinates'],
                        parcels_spawn_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_spawn is not None:
                        for step in path_to_spawn:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                    function_5()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to strategically plan a route that minimizes travel time and maximizes the delivery of parcels from the spawning area to the delivery cell, while also avoiding non-walkable cells.
    Intention ID: [11]
    Executable: False
    Description: The short term goal is to navigate the agent towards the delivery cell while avoiding non-walkable cells, and then drop the parcels that it is carrying.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                        function_3()
                    else:
                        function_6()
                
    Intention ID: [12]
    Executable: True
    Description: The agent's short term goal is to move towards the spawn location of the parcels, pick up the parcels and then move towards the delivery cell while avoiding non-walkable cells.
                def function_12():
                    global belief_set
                    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != spawn_location:
                        if agent_location[0] > spawn_location[0]:
                            function_1()
                        elif agent_location[0] < spawn_location[0]:
                            function_2()
                        if agent_location[1] > spawn_location[1]:
                            function_3()
                        elif agent_location[1] < spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    parcels_spawn_exists = any(cell['cell_type'] == 'parcels_spawn' for
        cell in belief_set['map']['grid'])
    delivery_cell_exists = any(cell['cell_type'] == 'delivery_cell' for
        cell in belief_set['map']['grid'])
    walkable_path_exists = any(cell['cell_type'] == 'walkable' for cell in
        belief_set['map']['grid'])
    parcels_exist = any(parcel['carried_by_id'] is None for parcel in
        belief_set['parcels'].values())
    agent_parcels = belief_set['agent'][1]['parcels_carried_ids']
    if (parcels_spawn_exists and delivery_cell_exists and
        walkable_path_exists and (parcels_exist or agent_parcels)):
        return True
    else:
        return False




2024-10-29 19:26:09,812 - INFO - Running trigger function for desire 2 ...
2024-10-29 19:26:09,812 - INFO - Trigger function for desire 2 has been executed. Result: False
2024-10-29 19:26:09,812 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-10-29 19:26:09,812 - INFO - No desire has been triggered.
2024-10-29 19:26:09,812 - INFO - No desire triggered.
2024-10-29 19:26:11,407 - INFO - Desire added: 3. Desires:
Desire 1: The agent should aim to identify optimal paths that avoid non-walkable cells to efficiently collect and deliver as many parcels as possible.
    Intention ID: [7]
    Executable: True
    Description: The agent should aim to move towards the parcel spawn location and pick up a parcel.
                def function_7():
                    global belief_set
                    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    while belief_set['agent'][1]['coordinates'] != spawn_location:
                        if belief_set['agent'][1]['coordinates'][0] > spawn_location[0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < spawn_location[0]:
                            function_2()
                        if belief_set['agent'][1]['coordinates'][1] > spawn_location[1]:
                            function_3()
                        elif belief_set['agent'][1]['coordinates'][1] < spawn_location[1]:
                            function_4()
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The agent should move towards the delivery cell while avoiding the non-walkable cells, and deliver the parcels it is carrying.
                def function_8():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0] and [
                            agent['coordinates'][0] + 1, agent['coordinates'][1]] not in [cell
                            ['cell_coordinates'] for cell in belief_set['map']['grid'] if 
                            cell['cell_type'] == 'non_walkable']:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0
                            ] and [agent['coordinates'][0] - 1, agent['coordinates'][1]
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] + 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] - 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The agent's short term goal is to move towards the delivery cell while avoiding non-walkable cells and deliver the parcels it is carrying. The function achieves this by first checking if the agent is carrying any parcels, and if so, it tries to move towards the delivery cell while avoiding non-walkable cells. Once it reaches the delivery cell, it puts down the parcels. The function also includes a termination condition to prevent infinite loops.
                def function_9():
                    global belief_set
                    max_attempts = 10
                    attempts = 0
                    while attempts < max_attempts and belief_set['agent'][1][
                        'parcels_carried_ids']:
                        coordinates = belief_set['agent'][1]['coordinates']
                        if [coordinates[0] + 1, coordinates[1]] in [item['cell_coordinates'
                            ] for item in belief_set['map']['grid'] if item['cell_type'] ==
                            'walkable']:
                            function_2()
                        elif [coordinates[0], coordinates[1] + 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_4()
                        elif [coordinates[0] - 1, coordinates[1]] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_1()
                        elif [coordinates[0], coordinates[1] - 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_3()
                        attempts += 1
                    if belief_set['agent'][1]['coordinates'] in [item['cell_coordinates'] for
                        item in belief_set['map']['grid'] if item['cell_type'] ==
                        'delivery_cell'] and belief_set['agent'][1]['parcels_carried_ids']:
                        function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent should aim to reach the delivery cell with a parcel by finding a shortest path that does not cross any non-walkable cells, put the parcel down, then return back to the parcel spawn location, while avoiding getting stuck in loops.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map_grid = belief_set['map']['grid']
                    non_walkable_cells = [cell for cell in map_grid if cell['cell_type'] ==
                        'non_walkable']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    parcels_spawn_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'parcels_spawn'][0]
                    path_to_delivery = a_star_pathfinding(agent['coordinates'],
                        delivery_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_delivery is not None:
                        for step in path_to_delivery:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                        function_6()
                    path_to_spawn = a_star_pathfinding(agent['coordinates'],
                        parcels_spawn_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_spawn is not None:
                        for step in path_to_spawn:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                    function_5()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to strategically plan a route that minimizes travel time and maximizes the delivery of parcels from the spawning area to the delivery cell, while also avoiding non-walkable cells.
    Intention ID: [11]
    Executable: False
    Description: The short term goal is to navigate the agent towards the delivery cell while avoiding non-walkable cells, and then drop the parcels that it is carrying.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                        function_3()
                    else:
                        function_6()
                
    Intention ID: [12]
    Executable: True
    Description: The agent's short term goal is to move towards the spawn location of the parcels, pick up the parcels and then move towards the delivery cell while avoiding non-walkable cells.
                def function_12():
                    global belief_set
                    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != spawn_location:
                        if agent_location[0] > spawn_location[0]:
                            function_1()
                        elif agent_location[0] < spawn_location[0]:
                            function_2()
                        if agent_location[1] > spawn_location[1]:
                            function_3()
                        elif agent_location[1] < spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    parcels_spawn_exists = any(cell['cell_type'] == 'parcels_spawn' for
        cell in belief_set['map']['grid'])
    delivery_cell_exists = any(cell['cell_type'] == 'delivery_cell' for
        cell in belief_set['map']['grid'])
    walkable_path_exists = any(cell['cell_type'] == 'walkable' for cell in
        belief_set['map']['grid'])
    parcels_exist = any(parcel['carried_by_id'] is None for parcel in
        belief_set['parcels'].values())
    agent_parcels = belief_set['agent'][1]['parcels_carried_ids']
    if (parcels_spawn_exists and delivery_cell_exists and
        walkable_path_exists and (parcels_exist or agent_parcels)):
        return True
    else:
        return False



Desire 3: The agent's long term goal is to efficiently manage its energy usage by minimizing unnecessary movements and optimizing the path for parcel delivery, ensuring its sustainability and productivity in the long run.
Executable: False
Trigger function:
None



2024-10-29 19:26:15,143 - INFO - Testing intention 
def function():
    global belief_set
    # The agent moves towards the parcel spawn location
    function_7()
    # The agent picks up the parcel
    function_5()
    # The agent delivers the parcel to the delivery cell avoiding non-walkable cells
    function_12()

2024-10-29 19:26:15,162 - INFO - The intention is valid.
2024-10-29 19:26:15,199 - INFO - Intention added to desire 3
2024-10-29 19:26:15,218 - INFO - Running intention 13 ...
2024-10-29 19:26:15,401 - INFO - Belief set thread started ...
2024-10-29 19:26:15,419 - INFO - Plan thread started ...
2024-10-29 19:26:15,426 - INFO - Started subprocess...
2024-10-29 19:26:15,426 - INFO - Belief set before intention 13 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 180}}, 'parcels': {10: {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:26:15,737 - INFO - Executing action action_1 ...
2024-10-29 19:26:15,993 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 180}}]
2024-10-29 19:26:16,367 - INFO - Executing action action_3 ...
2024-10-29 19:26:16,586 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 180}}]
2024-10-29 19:26:16,930 - INFO - Executing action action_3 ...
2024-10-29 19:26:17,161 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 180}}]
2024-10-29 19:26:17,473 - INFO - Executing action action_3 ...
2024-10-29 19:26:17,684 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 180}}]
2024-10-29 19:26:17,988 - INFO - Executing action action_5 ...
2024-10-29 19:26:18,207 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [10], 'score': 180}}]
2024-10-29 19:26:18,538 - INFO - Executing action action_5 ...
2024-10-29 19:26:18,798 - INFO - Action action_5 executed. Events received: []
2024-10-29 19:26:19,077 - INFO - Executing action action_5 ...
2024-10-29 19:26:19,302 - INFO - Action action_5 executed. Events received: []
2024-10-29 19:26:19,625 - INFO - Executing action action_2 ...
2024-10-29 19:26:19,837 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [10], 'score': 180}}]
2024-10-29 19:26:20,167 - INFO - Executing action action_4 ...
2024-10-29 19:26:20,403 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [10], 'score': 180}}]
2024-10-29 19:26:20,725 - INFO - Executing action action_4 ...
2024-10-29 19:26:20,962 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [10], 'score': 180}}]
2024-10-29 19:26:21,339 - INFO - Executing action action_4 ...
2024-10-29 19:26:21,594 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [10], 'score': 180}}]
2024-10-29 19:26:21,945 - INFO - Executing action action_6 ...
2024-10-29 19:26:22,157 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 200}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-10-29 19:26:22,487 - INFO - Belief set thread terminated.
2024-10-29 19:26:22,530 - INFO - Plan thread terminated.
2024-10-29 19:26:22,600 - INFO - Intention 13 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_5', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 180}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 180}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 180}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 180}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [10], 'score': 180}}], [], [], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [10], 'score': 180}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [10], 'score': 180}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [10], 'score': 180}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [10], 'score': 180}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 200}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-10-29 19:26:22,612 - INFO - Belief set after intention 13 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 200}}, 'parcels': {}}
2024-10-29 19:26:27,454 - INFO - Testing trigger function 
def should_pursue_goal(belief_set):
    if 'agent' in belief_set and 1 in belief_set['agent']:
        agent_info = belief_set['agent'][1]
        if 'score' in agent_info and agent_info['score'] > 180:
            return True
    return False
2024-10-29 19:26:27,472 - ERROR - Trigger function does not return the boolean True for the prior belief set.
2024-10-29 19:26:28,726 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent should aim to identify optimal paths that avoid non-walkable cells to efficiently collect and deliver as many parcels as possible.
    Intention ID: [7]
    Executable: True
    Description: The agent should aim to move towards the parcel spawn location and pick up a parcel.
                def function_7():
                    global belief_set
                    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    while belief_set['agent'][1]['coordinates'] != spawn_location:
                        if belief_set['agent'][1]['coordinates'][0] > spawn_location[0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < spawn_location[0]:
                            function_2()
                        if belief_set['agent'][1]['coordinates'][1] > spawn_location[1]:
                            function_3()
                        elif belief_set['agent'][1]['coordinates'][1] < spawn_location[1]:
                            function_4()
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The agent should move towards the delivery cell while avoiding the non-walkable cells, and deliver the parcels it is carrying.
                def function_8():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0] and [
                            agent['coordinates'][0] + 1, agent['coordinates'][1]] not in [cell
                            ['cell_coordinates'] for cell in belief_set['map']['grid'] if 
                            cell['cell_type'] == 'non_walkable']:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0
                            ] and [agent['coordinates'][0] - 1, agent['coordinates'][1]
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] + 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] - 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The agent's short term goal is to move towards the delivery cell while avoiding non-walkable cells and deliver the parcels it is carrying. The function achieves this by first checking if the agent is carrying any parcels, and if so, it tries to move towards the delivery cell while avoiding non-walkable cells. Once it reaches the delivery cell, it puts down the parcels. The function also includes a termination condition to prevent infinite loops.
                def function_9():
                    global belief_set
                    max_attempts = 10
                    attempts = 0
                    while attempts < max_attempts and belief_set['agent'][1][
                        'parcels_carried_ids']:
                        coordinates = belief_set['agent'][1]['coordinates']
                        if [coordinates[0] + 1, coordinates[1]] in [item['cell_coordinates'
                            ] for item in belief_set['map']['grid'] if item['cell_type'] ==
                            'walkable']:
                            function_2()
                        elif [coordinates[0], coordinates[1] + 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_4()
                        elif [coordinates[0] - 1, coordinates[1]] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_1()
                        elif [coordinates[0], coordinates[1] - 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_3()
                        attempts += 1
                    if belief_set['agent'][1]['coordinates'] in [item['cell_coordinates'] for
                        item in belief_set['map']['grid'] if item['cell_type'] ==
                        'delivery_cell'] and belief_set['agent'][1]['parcels_carried_ids']:
                        function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent should aim to reach the delivery cell with a parcel by finding a shortest path that does not cross any non-walkable cells, put the parcel down, then return back to the parcel spawn location, while avoiding getting stuck in loops.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map_grid = belief_set['map']['grid']
                    non_walkable_cells = [cell for cell in map_grid if cell['cell_type'] ==
                        'non_walkable']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    parcels_spawn_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'parcels_spawn'][0]
                    path_to_delivery = a_star_pathfinding(agent['coordinates'],
                        delivery_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_delivery is not None:
                        for step in path_to_delivery:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                        function_6()
                    path_to_spawn = a_star_pathfinding(agent['coordinates'],
                        parcels_spawn_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_spawn is not None:
                        for step in path_to_spawn:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                    function_5()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to strategically plan a route that minimizes travel time and maximizes the delivery of parcels from the spawning area to the delivery cell, while also avoiding non-walkable cells.
    Intention ID: [11]
    Executable: False
    Description: The short term goal is to navigate the agent towards the delivery cell while avoiding non-walkable cells, and then drop the parcels that it is carrying.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                        function_3()
                    else:
                        function_6()
                
    Intention ID: [12]
    Executable: True
    Description: The agent's short term goal is to move towards the spawn location of the parcels, pick up the parcels and then move towards the delivery cell while avoiding non-walkable cells.
                def function_12():
                    global belief_set
                    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != spawn_location:
                        if agent_location[0] > spawn_location[0]:
                            function_1()
                        elif agent_location[0] < spawn_location[0]:
                            function_2()
                        if agent_location[1] > spawn_location[1]:
                            function_3()
                        elif agent_location[1] < spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    parcels_spawn_exists = any(cell['cell_type'] == 'parcels_spawn' for
        cell in belief_set['map']['grid'])
    delivery_cell_exists = any(cell['cell_type'] == 'delivery_cell' for
        cell in belief_set['map']['grid'])
    walkable_path_exists = any(cell['cell_type'] == 'walkable' for cell in
        belief_set['map']['grid'])
    parcels_exist = any(parcel['carried_by_id'] is None for parcel in
        belief_set['parcels'].values())
    agent_parcels = belief_set['agent'][1]['parcels_carried_ids']
    if (parcels_spawn_exists and delivery_cell_exists and
        walkable_path_exists and (parcels_exist or agent_parcels)):
        return True
    else:
        return False



Desire 3: The agent's long term goal is to efficiently manage its energy usage by minimizing unnecessary movements and optimizing the path for parcel delivery, ensuring its sustainability and productivity in the long run.
    Intention ID: [13]
    Executable: True
    Description: The short term goal is to navigate the agent towards the parcel, pick it up, and then deliver it to the delivery cell while avoiding non-walkable cells.
                def function_13():
                    global belief_set
                    function_7()
                    function_5()
                    function_12()
                
Executable: False
Trigger function:
None



2024-10-29 19:26:28,726 - INFO - Running trigger function for desire 2 ...
2024-10-29 19:26:28,726 - INFO - Trigger function for desire 2 has been executed. Result: False
2024-10-29 19:26:28,726 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-10-29 19:26:28,751 - INFO - No desire has been triggered.
2024-10-29 19:26:28,763 - INFO - No desire triggered.
2024-10-29 19:26:30,927 - INFO - Desire added: 4. Desires:
Desire 1: The agent should aim to identify optimal paths that avoid non-walkable cells to efficiently collect and deliver as many parcels as possible.
    Intention ID: [7]
    Executable: True
    Description: The agent should aim to move towards the parcel spawn location and pick up a parcel.
                def function_7():
                    global belief_set
                    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    while belief_set['agent'][1]['coordinates'] != spawn_location:
                        if belief_set['agent'][1]['coordinates'][0] > spawn_location[0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < spawn_location[0]:
                            function_2()
                        if belief_set['agent'][1]['coordinates'][1] > spawn_location[1]:
                            function_3()
                        elif belief_set['agent'][1]['coordinates'][1] < spawn_location[1]:
                            function_4()
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The agent should move towards the delivery cell while avoiding the non-walkable cells, and deliver the parcels it is carrying.
                def function_8():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0] and [
                            agent['coordinates'][0] + 1, agent['coordinates'][1]] not in [cell
                            ['cell_coordinates'] for cell in belief_set['map']['grid'] if 
                            cell['cell_type'] == 'non_walkable']:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0
                            ] and [agent['coordinates'][0] - 1, agent['coordinates'][1]
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] + 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] - 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The agent's short term goal is to move towards the delivery cell while avoiding non-walkable cells and deliver the parcels it is carrying. The function achieves this by first checking if the agent is carrying any parcels, and if so, it tries to move towards the delivery cell while avoiding non-walkable cells. Once it reaches the delivery cell, it puts down the parcels. The function also includes a termination condition to prevent infinite loops.
                def function_9():
                    global belief_set
                    max_attempts = 10
                    attempts = 0
                    while attempts < max_attempts and belief_set['agent'][1][
                        'parcels_carried_ids']:
                        coordinates = belief_set['agent'][1]['coordinates']
                        if [coordinates[0] + 1, coordinates[1]] in [item['cell_coordinates'
                            ] for item in belief_set['map']['grid'] if item['cell_type'] ==
                            'walkable']:
                            function_2()
                        elif [coordinates[0], coordinates[1] + 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_4()
                        elif [coordinates[0] - 1, coordinates[1]] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_1()
                        elif [coordinates[0], coordinates[1] - 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_3()
                        attempts += 1
                    if belief_set['agent'][1]['coordinates'] in [item['cell_coordinates'] for
                        item in belief_set['map']['grid'] if item['cell_type'] ==
                        'delivery_cell'] and belief_set['agent'][1]['parcels_carried_ids']:
                        function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent should aim to reach the delivery cell with a parcel by finding a shortest path that does not cross any non-walkable cells, put the parcel down, then return back to the parcel spawn location, while avoiding getting stuck in loops.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map_grid = belief_set['map']['grid']
                    non_walkable_cells = [cell for cell in map_grid if cell['cell_type'] ==
                        'non_walkable']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    parcels_spawn_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'parcels_spawn'][0]
                    path_to_delivery = a_star_pathfinding(agent['coordinates'],
                        delivery_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_delivery is not None:
                        for step in path_to_delivery:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                        function_6()
                    path_to_spawn = a_star_pathfinding(agent['coordinates'],
                        parcels_spawn_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_spawn is not None:
                        for step in path_to_spawn:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                    function_5()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to strategically plan a route that minimizes travel time and maximizes the delivery of parcels from the spawning area to the delivery cell, while also avoiding non-walkable cells.
    Intention ID: [11]
    Executable: False
    Description: The short term goal is to navigate the agent towards the delivery cell while avoiding non-walkable cells, and then drop the parcels that it is carrying.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                        function_3()
                    else:
                        function_6()
                
    Intention ID: [12]
    Executable: True
    Description: The agent's short term goal is to move towards the spawn location of the parcels, pick up the parcels and then move towards the delivery cell while avoiding non-walkable cells.
                def function_12():
                    global belief_set
                    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != spawn_location:
                        if agent_location[0] > spawn_location[0]:
                            function_1()
                        elif agent_location[0] < spawn_location[0]:
                            function_2()
                        if agent_location[1] > spawn_location[1]:
                            function_3()
                        elif agent_location[1] < spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    parcels_spawn_exists = any(cell['cell_type'] == 'parcels_spawn' for
        cell in belief_set['map']['grid'])
    delivery_cell_exists = any(cell['cell_type'] == 'delivery_cell' for
        cell in belief_set['map']['grid'])
    walkable_path_exists = any(cell['cell_type'] == 'walkable' for cell in
        belief_set['map']['grid'])
    parcels_exist = any(parcel['carried_by_id'] is None for parcel in
        belief_set['parcels'].values())
    agent_parcels = belief_set['agent'][1]['parcels_carried_ids']
    if (parcels_spawn_exists and delivery_cell_exists and
        walkable_path_exists and (parcels_exist or agent_parcels)):
        return True
    else:
        return False



Desire 3: The agent's long term goal is to efficiently manage its energy usage by minimizing unnecessary movements and optimizing the path for parcel delivery, ensuring its sustainability and productivity in the long run.
    Intention ID: [13]
    Executable: True
    Description: The short term goal is to navigate the agent towards the parcel, pick it up, and then deliver it to the delivery cell while avoiding non-walkable cells.
                def function_13():
                    global belief_set
                    function_7()
                    function_5()
                    function_12()
                
Executable: False
Trigger function:
None


Desire 4: The agent's long term goal is to optimize its movement and actions based on the frequency and pattern of parcel spawning, to ensure continuous and efficient parcel pickup, transportation, and delivery while avoiding non-walkable cells.
Executable: False
Trigger function:
None



2024-10-29 19:26:34,908 - INFO - Testing intention 
def function():
    global belief_set
    if belief_set['agent'][1]['coordinates'] != [0, 0]:
        function_1()
    function_5()
    while belief_set['agent'][1]['coordinates'] != [1, 3]:
        function_4()
    function_6()

2024-10-29 19:26:34,939 - INFO - The intention is valid.
2024-10-29 19:26:34,959 - INFO - Intention added to desire 4
2024-10-29 19:26:34,965 - INFO - Running intention 14 ...
2024-10-29 19:26:35,134 - INFO - Belief set thread started ...
2024-10-29 19:26:35,153 - INFO - Plan thread started ...
2024-10-29 19:26:35,159 - INFO - Started subprocess...
2024-10-29 19:26:35,159 - INFO - Belief set before intention 14 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 200}}, 'parcels': {11: {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:26:35,467 - INFO - Executing action action_1 ...
2024-10-29 19:26:35,705 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 200}}]
2024-10-29 19:26:36,017 - INFO - Executing action action_5 ...
2024-10-29 19:26:36,308 - INFO - Action action_5 executed. Events received: []
2024-10-29 19:26:36,667 - INFO - Executing action action_4 ...
2024-10-29 19:26:36,888 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:37,220 - INFO - Executing action action_4 ...
2024-10-29 19:26:37,438 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:37,723 - INFO - Executing action action_4 ...
2024-10-29 19:26:38,016 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:38,333 - INFO - Executing action action_4 ...
2024-10-29 19:26:38,570 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:38,909 - INFO - Executing action action_4 ...
2024-10-29 19:26:39,177 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:39,534 - INFO - Executing action action_4 ...
2024-10-29 19:26:39,749 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:40,066 - INFO - Executing action action_4 ...
2024-10-29 19:26:40,307 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:40,706 - INFO - Executing action action_4 ...
2024-10-29 19:26:41,009 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:41,289 - INFO - Executing action action_4 ...
2024-10-29 19:26:41,543 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:41,872 - INFO - Executing action action_4 ...
2024-10-29 19:26:42,114 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:42,418 - INFO - Executing action action_4 ...
2024-10-29 19:26:42,673 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:42,976 - INFO - Executing action action_4 ...
2024-10-29 19:26:43,227 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:43,614 - INFO - Executing action action_4 ...
2024-10-29 19:26:43,831 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:44,125 - INFO - Executing action action_4 ...
2024-10-29 19:26:44,343 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:44,715 - INFO - Executing action action_4 ...
2024-10-29 19:26:44,954 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:45,289 - INFO - Executing action action_4 ...
2024-10-29 19:26:45,502 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:45,827 - INFO - Executing action action_4 ...
2024-10-29 19:26:46,040 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:46,326 - INFO - Executing action action_4 ...
2024-10-29 19:26:46,593 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:46,954 - INFO - Executing action action_4 ...
2024-10-29 19:26:47,198 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:47,474 - INFO - Executing action action_4 ...
2024-10-29 19:26:47,711 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:48,017 - INFO - Executing action action_4 ...
2024-10-29 19:26:48,271 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:48,689 - INFO - Executing action action_4 ...
2024-10-29 19:26:48,955 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:49,304 - INFO - Executing action action_4 ...
2024-10-29 19:26:49,534 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:49,802 - INFO - Executing action action_4 ...
2024-10-29 19:26:50,059 - INFO - Action action_4 executed. Events received: []
2024-10-29 19:26:50,226 - ERROR - Error during intention 14 execution. Intention 14 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-10-29 19:26:50,345 - INFO - Belief set thread terminated.
2024-10-29 19:26:50,395 - INFO - Plan thread terminated.
2024-10-29 19:26:50,420 - INFO - Intention 14 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_5', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4', 'action_4']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 200}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-10-29 19:26:50,421 - INFO - Belief set after intention 14 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 200}}, 'parcels': {11: {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:26:57,709 - INFO - Invalidating intention 14 ...
2024-10-29 19:27:10,382 - INFO - Testing intention 
def function():
  global belief_set
  parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
  delivery_cell = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]['cell_coordinates']
  agent_coordinates = belief_set['agent'][1]['coordinates']
  while agent_coordinates != parcel_spawn:
    if agent_coordinates[0] < parcel_spawn[0]:
      function_2()
      agent_coordinates[0] += 1
    elif agent_coordinates[0] > parcel_spawn[0]:
      function_1()
      agent_coordinates[0] -= 1
    elif agent_coordinates[1] < parcel_spawn[1]:
      function_4()
      agent_coordinates[1] += 1
    elif agent_coordinates[1] > parcel_spawn[1]:
      function_3()
      agent_coordinates[1] -= 1
  function_5()
  while agent_coordinates != delivery_cell:
    if agent_coordinates[0] < delivery_cell[0]:
      function_2()
      agent_coordinates[0] += 1
    elif agent_coordinates[0] > delivery_cell[0]:
      function_1()
      agent_coordinates[0] -= 1
    elif agent_coordinates[1] < delivery_cell[1]:
      function_4()
      agent_coordinates[1] += 1
    elif agent_coordinates[1] > delivery_cell[1]:
      function_3()
      agent_coordinates[1] -= 1
  function_6()
2024-10-29 19:27:10,427 - INFO - The intention is valid.
2024-10-29 19:27:10,453 - INFO - Intention added to desire 4
2024-10-29 19:27:10,485 - INFO - Running intention 15 ...
2024-10-29 19:27:10,623 - INFO - Belief set thread started ...
2024-10-29 19:27:10,635 - INFO - Plan thread started ...
2024-10-29 19:27:10,641 - INFO - Started subprocess...
2024-10-29 19:27:10,654 - INFO - Belief set before intention 15 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 200}}, 'parcels': {11: {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 12: {'id': 12, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:27:11,023 - INFO - Executing action action_3 ...
2024-10-29 19:27:11,236 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 200}}]
2024-10-29 19:27:11,596 - INFO - Executing action action_3 ...
2024-10-29 19:27:11,826 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 200}}]
2024-10-29 19:27:12,228 - INFO - Executing action action_3 ...
2024-10-29 19:27:12,448 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 200}}]
2024-10-29 19:27:12,737 - INFO - Executing action action_5 ...
2024-10-29 19:27:12,967 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [11, 12, 13], 'score': 200}}]
2024-10-29 19:27:13,317 - INFO - Executing action action_2 ...
2024-10-29 19:27:13,579 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [11, 12, 13], 'score': 200}}]
2024-10-29 19:27:13,923 - INFO - Executing action action_4 ...
2024-10-29 19:27:14,148 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}]
2024-10-29 19:27:14,477 - INFO - Executing action action_4 ...
2024-10-29 19:27:14,744 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [11, 12, 13], 'score': 200}}]
2024-10-29 19:27:15,110 - INFO - Executing action action_4 ...
2024-10-29 19:27:15,347 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [11, 12, 13], 'score': 200}}]
2024-10-29 19:27:15,676 - INFO - Executing action action_6 ...
2024-10-29 19:27:15,974 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 260}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-10-29 19:27:16,323 - INFO - Plan thread terminated.
2024-10-29 19:27:16,324 - INFO - Belief set thread terminated.
2024-10-29 19:27:16,342 - INFO - Intention 15 execution has finished. Threads and subprocess terminated. Plan: ['action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 200}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 200}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 200}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [11, 12, 13], 'score': 200}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [11, 12, 13], 'score': 200}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [11, 12, 13], 'score': 200}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [11, 12, 13], 'score': 200}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 260}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-10-29 19:27:16,349 - INFO - Belief set after intention 15 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 260}}, 'parcels': {}}
2024-10-29 19:27:23,535 - INFO - Testing trigger function 
def should_pursue_goal(belief_set):
    map_grid = belief_set['map']['grid']
    agent_info = belief_set['agent'][1]
    parcels_spawn_exists = any(cell['cell_type'] == 'parcels_spawn' for cell in map_grid)
    delivery_cell_exists = any(cell['cell_type'] == 'delivery_cell' for cell in map_grid)
    walkable_path_exists = any(cell['cell_type'] == 'walkable' for cell in map_grid)
    score_increased = agent_info['score'] > 200
    return parcels_spawn_exists and delivery_cell_exists and walkable_path_exists and score_increased
2024-10-29 19:27:23,554 - ERROR - Trigger function does not return the boolean True for the prior belief set.
2024-10-29 19:27:36,244 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent should aim to identify optimal paths that avoid non-walkable cells to efficiently collect and deliver as many parcels as possible.
    Intention ID: [7]
    Executable: True
    Description: The agent should aim to move towards the parcel spawn location and pick up a parcel.
                def function_7():
                    global belief_set
                    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    while belief_set['agent'][1]['coordinates'] != spawn_location:
                        if belief_set['agent'][1]['coordinates'][0] > spawn_location[0]:
                            function_1()
                        elif belief_set['agent'][1]['coordinates'][0] < spawn_location[0]:
                            function_2()
                        if belief_set['agent'][1]['coordinates'][1] > spawn_location[1]:
                            function_3()
                        elif belief_set['agent'][1]['coordinates'][1] < spawn_location[1]:
                            function_4()
                    function_5()
                
    Intention ID: [8]
    Executable: False
    Description: The agent should move towards the delivery cell while avoiding the non-walkable cells, and deliver the parcels it is carrying.
                def function_8():
                    global belief_set
                    delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                        ['cell_type'] == 'delivery_cell')
                    agent = belief_set['agent'][1]
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0] and [
                            agent['coordinates'][0] + 1, agent['coordinates'][1]] not in [cell
                            ['cell_coordinates'] for cell in belief_set['map']['grid'] if 
                            cell['cell_type'] == 'non_walkable']:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0
                            ] and [agent['coordinates'][0] - 1, agent['coordinates'][1]
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_1()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] + 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1
                            ] and [agent['coordinates'][0], agent['coordinates'][1] - 1
                            ] not in [cell['cell_coordinates'] for cell in belief_set['map'
                            ]['grid'] if cell['cell_type'] == 'non_walkable']:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The agent's short term goal is to move towards the delivery cell while avoiding non-walkable cells and deliver the parcels it is carrying. The function achieves this by first checking if the agent is carrying any parcels, and if so, it tries to move towards the delivery cell while avoiding non-walkable cells. Once it reaches the delivery cell, it puts down the parcels. The function also includes a termination condition to prevent infinite loops.
                def function_9():
                    global belief_set
                    max_attempts = 10
                    attempts = 0
                    while attempts < max_attempts and belief_set['agent'][1][
                        'parcels_carried_ids']:
                        coordinates = belief_set['agent'][1]['coordinates']
                        if [coordinates[0] + 1, coordinates[1]] in [item['cell_coordinates'
                            ] for item in belief_set['map']['grid'] if item['cell_type'] ==
                            'walkable']:
                            function_2()
                        elif [coordinates[0], coordinates[1] + 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_4()
                        elif [coordinates[0] - 1, coordinates[1]] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_1()
                        elif [coordinates[0], coordinates[1] - 1] in [item[
                            'cell_coordinates'] for item in belief_set['map']['grid'] if 
                            item['cell_type'] == 'walkable']:
                            function_3()
                        attempts += 1
                    if belief_set['agent'][1]['coordinates'] in [item['cell_coordinates'] for
                        item in belief_set['map']['grid'] if item['cell_type'] ==
                        'delivery_cell'] and belief_set['agent'][1]['parcels_carried_ids']:
                        function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent should aim to reach the delivery cell with a parcel by finding a shortest path that does not cross any non-walkable cells, put the parcel down, then return back to the parcel spawn location, while avoiding getting stuck in loops.
                def function_10():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map_grid = belief_set['map']['grid']
                    non_walkable_cells = [cell for cell in map_grid if cell['cell_type'] ==
                        'non_walkable']
                    delivery_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'delivery_cell'][0]
                    parcels_spawn_cell = [cell for cell in map_grid if cell['cell_type'] ==
                        'parcels_spawn'][0]
                    path_to_delivery = a_star_pathfinding(agent['coordinates'],
                        delivery_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_delivery is not None:
                        for step in path_to_delivery:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                        function_6()
                    path_to_spawn = a_star_pathfinding(agent['coordinates'],
                        parcels_spawn_cell['cell_coordinates'], non_walkable_cells)
                    if path_to_spawn is not None:
                        for step in path_to_spawn:
                            if step[0] < agent['coordinates'][0]:
                                function_1()
                            elif step[0] > agent['coordinates'][0]:
                                function_2()
                            elif step[1] < agent['coordinates'][1]:
                                function_3()
                            else:
                                function_4()
                    function_5()
                
Executable: False
Trigger function:
None


Desire 2: The agent's long term goal is to strategically plan a route that minimizes travel time and maximizes the delivery of parcels from the spawning area to the delivery cell, while also avoiding non-walkable cells.
    Intention ID: [11]
    Executable: False
    Description: The short term goal is to navigate the agent towards the delivery cell while avoiding non-walkable cells, and then drop the parcels that it is carrying.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                        function_3()
                    else:
                        function_6()
                
    Intention ID: [12]
    Executable: True
    Description: The agent's short term goal is to move towards the spawn location of the parcels, pick up the parcels and then move towards the delivery cell while avoiding non-walkable cells.
                def function_12():
                    global belief_set
                    spawn_location = [cell['cell_coordinates'] for cell in belief_set['map'
                        ]['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != spawn_location:
                        if agent_location[0] > spawn_location[0]:
                            function_1()
                        elif agent_location[0] < spawn_location[0]:
                            function_2()
                        if agent_location[1] > spawn_location[1]:
                            function_3()
                        elif agent_location[1] < spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    parcels_spawn_exists = any(cell['cell_type'] == 'parcels_spawn' for
        cell in belief_set['map']['grid'])
    delivery_cell_exists = any(cell['cell_type'] == 'delivery_cell' for
        cell in belief_set['map']['grid'])
    walkable_path_exists = any(cell['cell_type'] == 'walkable' for cell in
        belief_set['map']['grid'])
    parcels_exist = any(parcel['carried_by_id'] is None for parcel in
        belief_set['parcels'].values())
    agent_parcels = belief_set['agent'][1]['parcels_carried_ids']
    if (parcels_spawn_exists and delivery_cell_exists and
        walkable_path_exists and (parcels_exist or agent_parcels)):
        return True
    else:
        return False



Desire 3: The agent's long term goal is to efficiently manage its energy usage by minimizing unnecessary movements and optimizing the path for parcel delivery, ensuring its sustainability and productivity in the long run.
    Intention ID: [13]
    Executable: True
    Description: The short term goal is to navigate the agent towards the parcel, pick it up, and then deliver it to the delivery cell while avoiding non-walkable cells.
                def function_13():
                    global belief_set
                    function_7()
                    function_5()
                    function_12()
                
Executable: False
Trigger function:
None


Desire 4: The agent's long term goal is to optimize its movement and actions based on the frequency and pattern of parcel spawning, to ensure continuous and efficient parcel pickup, transportation, and delivery while avoiding non-walkable cells.
    Intention ID: [14]
    Executable: False
    Description: The agent's short term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move towards the delivery cell while avoiding non-walkable cells.
                def function_14():
                    global belief_set
                    if belief_set['agent'][1]['coordinates'] != [0, 0]:
                        function_1()
                    function_5()
                    while belief_set['agent'][1]['coordinates'] != [1, 3]:
                        function_4()
                    function_6()
                
    Intention ID: [15]
    Executable: True
    Description: The short term goal is to navigate the agent towards the parcel, pick it up, and then deliver it to the delivery cell while avoiding non-walkable cells.
                def function_15():
                    global belief_set
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != parcel_spawn:
                        if agent_coordinates[0] < parcel_spawn[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > parcel_spawn[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < parcel_spawn[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > parcel_spawn[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_5()
                    while agent_coordinates != delivery_cell:
                        if agent_coordinates[0] < delivery_cell[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[0] > delivery_cell[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[1] < delivery_cell[1]:
                            function_4()
                            agent_coordinates[1] += 1
                        elif agent_coordinates[1] > delivery_cell[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                    function_6()
                
Executable: False
Trigger function:
None



2024-10-29 19:27:36,262 - INFO - Running trigger function for desire 2 ...
2024-10-29 19:27:36,262 - INFO - Trigger function for desire 2 has been executed. Result: True
2024-10-29 19:27:36,262 - INFO - Desire 2 could be triggered. Adding it to the list...
2024-10-29 19:27:36,262 - INFO - Desires triggered: [2]. Now randomly choosing which one to run.
2024-10-29 19:27:36,262 - INFO - Desire 2 was randomly chosen. Desire 2 has been triggered.
2024-10-29 19:27:36,262 - INFO - Desire 2 is about to be executed ...
2024-10-29 19:27:36,262 - INFO - Executing all valid intentions for desire 2 ...
2024-10-29 19:27:36,262 - INFO - Executing intention 12 ...
2024-10-29 19:27:36,275 - INFO - Running intention 12 ...
2024-10-29 19:27:36,459 - INFO - Belief set thread started ...
2024-10-29 19:27:36,471 - INFO - Plan thread started ...
2024-10-29 19:27:36,478 - INFO - Started subprocess...
2024-10-29 19:27:36,478 - INFO - Belief set before intention 15 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 260}}, 'parcels': {14: {'id': 14, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-29 19:27:36,759 - INFO - Executing action action_1 ...
2024-10-29 19:27:36,960 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 260}}]
2024-10-29 19:27:37,268 - INFO - Executing action action_3 ...
2024-10-29 19:27:37,523 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 260}}]
2024-10-29 19:27:37,835 - INFO - Executing action action_3 ...
2024-10-29 19:27:38,042 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 260}}]
2024-10-29 19:27:38,349 - INFO - Executing action action_3 ...
2024-10-29 19:27:38,560 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 260}}]
2024-10-29 19:27:38,911 - INFO - Executing action action_5 ...
2024-10-29 19:27:39,129 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [14], 'score': 260}}]
2024-10-29 19:27:39,444 - INFO - Executing action action_2 ...
2024-10-29 19:27:39,680 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [14], 'score': 260}}]
2024-10-29 19:27:40,028 - INFO - Executing action action_4 ...
2024-10-29 19:27:40,261 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [14], 'score': 260}}]
2024-10-29 19:27:40,610 - INFO - Executing action action_4 ...
2024-10-29 19:27:40,860 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [14], 'score': 260}}]
2024-10-29 19:27:41,172 - INFO - Executing action action_4 ...
2024-10-29 19:27:41,406 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [14], 'score': 260}}]
2024-10-29 19:27:41,748 - INFO - Executing action action_6 ...
2024-10-29 19:27:41,979 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 280}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-10-29 19:27:42,307 - INFO - Belief set thread terminated.
2024-10-29 19:27:42,314 - INFO - Plan thread terminated.
2024-10-29 19:27:42,351 - INFO - Intention 15 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [14], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [14], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [14], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [14], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [14], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 280}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-10-29 19:27:42,351 - INFO - Belief set after intention 15 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 280}}, 'parcels': {}}
2024-10-29 19:27:42,351 - INFO - Intention 12 has been executed with plan ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6'] and events [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [14], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [14], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [14], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [14], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [14], 'score': 260}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 280}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]].
