2024-10-30 18:43:44,328 - INFO - Loading actions from agent_dir/actions.json ...
2024-10-30 18:43:44,390 - INFO - Actions loaded: 
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        

2024-10-30 18:44:20,980 - INFO - Checking if a desire has been triggered ...
Desires: Empty
2024-10-30 18:44:20,980 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-10-30 18:44:20,980 - INFO - No desire has been triggered.
2024-10-30 18:44:21,011 - INFO - No desire triggered.
2024-10-30 18:44:23,101 - INFO - Desire added: 1. Desires:
Desire 1: The agent's long-term goal is to strategically navigate the map, avoid non-walkable cells, pick up parcels from the parcel spawn location and deliver them to the delivery cell to maximize the overall score.
Executable: False
Trigger function:
None



2024-10-30 18:44:36,224 - INFO - Testing intention 
def function():
    global belief_set
    # Agent and parcel spawn location coordinates
    agent_location = belief_set['agent'][1]['coordinates']
    parcel_spawn_location = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
    delivery_location = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
    # Navigating towards the parcel spawn location
    while agent_location != parcel_spawn_location:
        if agent_location[0] > parcel_spawn_location[0]:
            function_1()
        elif agent_location[0] < parcel_spawn_location[0]:
            function_2()
        if agent_location[1] > parcel_spawn_location[1]:
            function_3()
        elif agent_location[1] < parcel_spawn_location[1]:
            function_4()
        agent_location = belief_set['agent'][1]['coordinates']
    # Picking up the parcel
    function_5()
    # Navigating towards the delivery cell
    while agent_location != delivery_location:
        if agent_location[0] > delivery_location[0]:
            function_1()
        elif agent_location[0] < delivery_location[0]:
            function_2()
        if agent_location[1] > delivery_location[1]:
            function_3()
        elif agent_location[1] < delivery_location[1]:
            function_4()
        agent_location = belief_set['agent'][1]['coordinates']
    # Dropping the parcel
    function_6()

2024-10-30 18:44:36,224 - INFO - The intention is valid.
2024-10-30 18:44:36,231 - INFO - Intention added to desire 1
2024-10-30 18:44:36,244 - INFO - Running intention 7 ...
2024-10-30 18:44:36,393 - INFO - Belief set thread started ...
2024-10-30 18:44:36,418 - INFO - Plan thread started ...
2024-10-30 18:44:36,425 - INFO - Started subprocess...
2024-10-30 18:44:36,425 - INFO - Belief set before intention 7 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'score': 0}}, 'parcels': {1: {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 2: {'id': 2, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:44:36,737 - INFO - Executing action action_1 ...
2024-10-30 18:44:36,963 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 0}}]
2024-10-30 18:44:37,231 - INFO - Executing action action_3 ...
2024-10-30 18:44:37,457 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 0}}]
2024-10-30 18:44:37,761 - INFO - Executing action action_5 ...
2024-10-30 18:44:38,010 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-30 18:44:38,360 - INFO - Executing action action_2 ...
2024-10-30 18:44:38,589 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-30 18:44:38,981 - INFO - Executing action action_4 ...
2024-10-30 18:44:39,196 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-30 18:44:39,509 - INFO - Executing action action_4 ...
2024-10-30 18:44:39,745 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-30 18:44:40,069 - INFO - Executing action action_4 ...
2024-10-30 18:44:40,293 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [1, 2], 'score': 0}}]
2024-10-30 18:44:40,674 - INFO - Executing action action_6 ...
2024-10-30 18:44:40,904 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 40}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-10-30 18:44:41,253 - INFO - Belief set thread terminated.
2024-10-30 18:44:41,284 - INFO - Plan thread terminated.
2024-10-30 18:44:41,284 - INFO - Intention 7 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [1, 2], 'score': 0}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 40}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 1, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 2, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-10-30 18:44:41,284 - INFO - Belief set after intention 7 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 40}}, 'parcels': {}}
2024-10-30 18:44:46,398 - INFO - Testing trigger function 
def should_pursue_goal(belief_set):
    if len(belief_set['parcels']) > 0 or len(belief_set['agent'][1]['parcels_carried_ids']) > 0:
        return True
    else:
        return False
2024-10-30 18:44:46,399 - INFO - The trigger function is valid.
2024-10-30 18:44:46,399 - INFO - Trigger function added to desire 1.
2024-10-30 18:44:47,322 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically navigate the map, avoid non-walkable cells, pick up parcels from the parcel spawn location and deliver them to the delivery cell to maximize the overall score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_7():
                    global belief_set
                    agent_location = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    while agent_location != parcel_spawn_location:
                        if agent_location[0] > parcel_spawn_location[0]:
                            function_1()
                        elif agent_location[0] < parcel_spawn_location[0]:
                            function_2()
                        if agent_location[1] > parcel_spawn_location[1]:
                            function_3()
                        elif agent_location[1] < parcel_spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    if len(belief_set['parcels']) > 0 or len(belief_set['agent'][1][
        'parcels_carried_ids']) > 0:
        return True
    else:
        return False




2024-10-30 18:44:47,322 - INFO - Running trigger function for desire 1 ...
2024-10-30 18:44:47,322 - INFO - Trigger function for desire 1 has been executed. Result: True
2024-10-30 18:44:47,322 - INFO - Desire 1 could be triggered. Adding it to the list...
2024-10-30 18:44:47,322 - INFO - Desires triggered: [1]. Now randomly choosing which one to run.
2024-10-30 18:44:47,322 - INFO - Desire 1 was randomly chosen. Desire 1 has been triggered.
2024-10-30 18:44:47,322 - INFO - Desire 1 is about to be executed ...
2024-10-30 18:44:47,322 - INFO - Executing all valid intentions for desire 1 ...
2024-10-30 18:44:47,322 - INFO - Executing intention 7 ...
2024-10-30 18:44:47,328 - INFO - Running intention 7 ...
2024-10-30 18:44:47,422 - INFO - Belief set thread started ...
2024-10-30 18:44:47,441 - INFO - Plan thread started ...
2024-10-30 18:44:47,448 - INFO - Started subprocess...
2024-10-30 18:44:47,448 - INFO - Belief set before intention 7 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 40}}, 'parcels': {3: {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:44:47,739 - INFO - Executing action action_1 ...
2024-10-30 18:44:47,951 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 40}}]
2024-10-30 18:44:48,238 - INFO - Executing action action_3 ...
2024-10-30 18:44:48,462 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 40}}]
2024-10-30 18:44:48,816 - INFO - Executing action action_3 ...
2024-10-30 18:44:49,064 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 40}}]
2024-10-30 18:44:49,409 - INFO - Executing action action_3 ...
2024-10-30 18:44:49,633 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 40}}]
2024-10-30 18:44:49,995 - INFO - Executing action action_5 ...
2024-10-30 18:44:50,220 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [3], 'score': 40}}]
2024-10-30 18:44:50,576 - INFO - Executing action action_2 ...
2024-10-30 18:44:50,777 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [3], 'score': 40}}]
2024-10-30 18:44:51,202 - INFO - Executing action action_4 ...
2024-10-30 18:44:51,457 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [3], 'score': 40}}]
2024-10-30 18:44:51,781 - INFO - Executing action action_4 ...
2024-10-30 18:44:52,032 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [3], 'score': 40}}]
2024-10-30 18:44:52,368 - INFO - Executing action action_4 ...
2024-10-30 18:44:52,579 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [3], 'score': 40}}]
2024-10-30 18:44:52,950 - INFO - Executing action action_6 ...
2024-10-30 18:44:53,193 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 60}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-10-30 18:44:53,535 - INFO - Plan thread terminated.
2024-10-30 18:44:53,547 - INFO - Belief set thread terminated.
2024-10-30 18:44:53,591 - INFO - Intention 7 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [3], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [3], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [3], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [3], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [3], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 60}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-10-30 18:44:53,591 - INFO - Belief set after intention 7 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 60}}, 'parcels': {}}
2024-10-30 18:44:53,591 - INFO - Intention 7 has been executed with plan ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6'] and events [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [3], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [3], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [3], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [3], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [3], 'score': 40}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 60}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 3, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]].
2024-10-30 18:44:55,229 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically navigate the map, avoid non-walkable cells, pick up parcels from the parcel spawn location and deliver them to the delivery cell to maximize the overall score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_7():
                    global belief_set
                    agent_location = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    while agent_location != parcel_spawn_location:
                        if agent_location[0] > parcel_spawn_location[0]:
                            function_1()
                        elif agent_location[0] < parcel_spawn_location[0]:
                            function_2()
                        if agent_location[1] > parcel_spawn_location[1]:
                            function_3()
                        elif agent_location[1] < parcel_spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    if len(belief_set['parcels']) > 0 or len(belief_set['agent'][1][
        'parcels_carried_ids']) > 0:
        return True
    else:
        return False




2024-10-30 18:44:55,229 - INFO - Running trigger function for desire 1 ...
2024-10-30 18:44:55,229 - INFO - Trigger function for desire 1 has been executed. Result: False
2024-10-30 18:44:55,229 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-10-30 18:44:55,229 - INFO - No desire has been triggered.
2024-10-30 18:44:55,235 - INFO - No desire triggered.
2024-10-30 18:44:57,414 - INFO - Desire added: 2. Desires:
Desire 1: The agent's long-term goal is to strategically navigate the map, avoid non-walkable cells, pick up parcels from the parcel spawn location and deliver them to the delivery cell to maximize the overall score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_7():
                    global belief_set
                    agent_location = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    while agent_location != parcel_spawn_location:
                        if agent_location[0] > parcel_spawn_location[0]:
                            function_1()
                        elif agent_location[0] < parcel_spawn_location[0]:
                            function_2()
                        if agent_location[1] > parcel_spawn_location[1]:
                            function_3()
                        elif agent_location[1] < parcel_spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    if len(belief_set['parcels']) > 0 or len(belief_set['agent'][1][
        'parcels_carried_ids']) > 0:
        return True
    else:
        return False



Desire 2: The agent's long-term goal is to efficiently memorize the layout of the map, anticipate the spawning of parcels, and plan the fastest routes from the parcel spawn location to the delivery cell while avoiding non-walkable cells to minimize delivery time and increase the score.
Executable: False
Trigger function:
None



2024-10-30 18:45:07,504 - INFO - Testing intention 
def function():
    global belief_set
    parcel_spawn = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
    agent_coordinates = belief_set['agent'][1]['coordinates']
    while agent_coordinates != parcel_spawn:
        if agent_coordinates[0] < parcel_spawn[0]:
            function_2()
        elif agent_coordinates[0] > parcel_spawn[0]:
            function_1()
        if agent_coordinates[1] < parcel_spawn[1]:
            function_4()
        elif agent_coordinates[1] > parcel_spawn[1]:
            function_3()
    function_5()
    while agent_coordinates != delivery_cell:
        if agent_coordinates[0] < delivery_cell[0]:
            function_2()
        elif agent_coordinates[0] > delivery_cell[0]:
            function_1()
        if agent_coordinates[1] < delivery_cell[1]:
            function_4()
        elif agent_coordinates[1] > delivery_cell[1]:
            function_3()
    function_6()
2024-10-30 18:45:07,505 - INFO - The intention is valid.
2024-10-30 18:45:07,512 - INFO - Intention added to desire 2
2024-10-30 18:45:07,535 - INFO - Running intention 8 ...
2024-10-30 18:45:07,679 - INFO - Belief set thread started ...
2024-10-30 18:45:07,680 - INFO - Plan thread started ...
2024-10-30 18:45:07,680 - INFO - Started subprocess...
2024-10-30 18:45:07,724 - INFO - Belief set before intention 8 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:45:08,045 - INFO - Executing action action_1 ...
2024-10-30 18:45:08,257 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 60}}]
2024-10-30 18:45:08,544 - INFO - Executing action action_3 ...
2024-10-30 18:45:08,751 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 60}}]
2024-10-30 18:45:09,165 - INFO - Executing action action_1 ...
2024-10-30 18:45:09,420 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:45:09,713 - INFO - Executing action action_3 ...
2024-10-30 18:45:09,931 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 60}}]
2024-10-30 18:45:10,229 - INFO - Executing action action_1 ...
2024-10-30 18:45:10,449 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:45:10,767 - INFO - Executing action action_3 ...
2024-10-30 18:45:10,985 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 60}}]
2024-10-30 18:45:11,359 - INFO - Executing action action_1 ...
2024-10-30 18:45:11,596 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:45:11,950 - INFO - Executing action action_3 ...
2024-10-30 18:45:12,182 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:45:12,537 - INFO - Executing action action_1 ...
2024-10-30 18:45:12,780 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:45:13,071 - INFO - Executing action action_3 ...
2024-10-30 18:45:13,282 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:45:13,572 - INFO - Executing action action_1 ...
2024-10-30 18:45:13,787 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:45:14,128 - INFO - Executing action action_3 ...
2024-10-30 18:45:14,346 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:45:14,628 - INFO - Executing action action_1 ...
2024-10-30 18:45:14,854 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:45:15,171 - INFO - Executing action action_3 ...
2024-10-30 18:45:15,401 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:45:15,736 - INFO - Executing action action_1 ...
2024-10-30 18:45:15,942 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:45:16,288 - INFO - Executing action action_3 ...
2024-10-30 18:45:16,512 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:45:16,804 - INFO - Executing action action_1 ...
2024-10-30 18:45:17,046 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:45:17,401 - INFO - Executing action action_3 ...
2024-10-30 18:45:17,623 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:45:17,942 - INFO - Executing action action_1 ...
2024-10-30 18:45:18,202 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:45:18,513 - INFO - Executing action action_3 ...
2024-10-30 18:45:18,750 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:45:19,070 - INFO - Executing action action_1 ...
2024-10-30 18:45:19,306 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:45:19,621 - INFO - Executing action action_3 ...
2024-10-30 18:45:19,833 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:45:20,150 - INFO - Executing action action_1 ...
2024-10-30 18:45:20,410 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:45:20,708 - INFO - Executing action action_3 ...
2024-10-30 18:45:20,932 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:45:21,248 - INFO - Executing action action_1 ...
2024-10-30 18:45:21,459 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:45:21,727 - INFO - Executing action action_3 ...
2024-10-30 18:45:21,949 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:45:22,283 - INFO - Executing action action_1 ...
2024-10-30 18:45:22,496 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:45:22,790 - ERROR - Error during intention 8 execution. Intention 8 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-10-30 18:45:22,814 - INFO - Plan thread terminated.
2024-10-30 18:45:22,882 - INFO - Belief set thread terminated.
2024-10-30 18:45:22,901 - INFO - Intention 8 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_1', 'action_3', 'action_1', 'action_3', 'action_1', 'action_3', 'action_1', 'action_3', 'action_1', 'action_3', 'action_1', 'action_3', 'action_1', 'action_3', 'action_1', 'action_3', 'action_1', 'action_3', 'action_1', 'action_3', 'action_1', 'action_3', 'action_1', 'action_3', 'action_1']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 60}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 60}}], [], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 60}}], [], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 60}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-10-30 18:45:22,901 - INFO - Belief set after intention 8 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:45:27,026 - INFO - Invalidating intention 8 ...
2024-10-30 18:45:43,838 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
            function_2()
        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
            function_1()
        if agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
            function_4()
        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
            function_3()
        agent['coordinates'] = [agent['coordinates'][0] + (parcel_spawn['cell_coordinates'][0] - agent['coordinates'][0]), agent['coordinates'][1] + (parcel_spawn['cell_coordinates'][1] - agent['coordinates'][1])]
    function_5()
    while agent['coordinates'] != delivery_cell['cell_coordinates']:
        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
            function_2()
        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
            function_1()
        if agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
            function_4()
        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
            function_3()
        agent['coordinates'] = [agent['coordinates'][0] + (delivery_cell['cell_coordinates'][0] - agent['coordinates'][0]), agent['coordinates'][1] + (delivery_cell['cell_coordinates'][1] - agent['coordinates'][1])]
    function_6()

2024-10-30 18:45:43,845 - INFO - The intention is valid.
2024-10-30 18:45:43,847 - INFO - Intention added to desire 2
2024-10-30 18:45:43,872 - INFO - Running intention 9 ...
2024-10-30 18:45:44,085 - INFO - Belief set thread started ...
2024-10-30 18:45:44,104 - INFO - Plan thread started ...
2024-10-30 18:45:44,111 - INFO - Started subprocess...
2024-10-30 18:45:44,111 - INFO - Belief set before intention 9 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:45:44,389 - INFO - Executing action action_5 ...
2024-10-30 18:45:44,606 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [4, 5], 'score': 60}}]
2024-10-30 18:45:44,954 - INFO - Executing action action_2 ...
2024-10-30 18:45:45,207 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [4, 5], 'score': 60}}]
2024-10-30 18:45:45,494 - INFO - Executing action action_4 ...
2024-10-30 18:45:45,713 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [4, 5], 'score': 60}}]
2024-10-30 18:45:46,119 - INFO - Executing action action_6 ...
2024-10-30 18:45:46,355 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'score': 60}}]
2024-10-30 18:45:46,698 - INFO - Plan thread terminated.
2024-10-30 18:45:46,729 - INFO - Belief set thread terminated.
2024-10-30 18:45:46,767 - INFO - Intention 9 execution has finished. Threads and subprocess terminated. Plan: ['action_5', 'action_2', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [4, 5], 'score': 60}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [4, 5], 'score': 60}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [4, 5], 'score': 60}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'score': 60}}]]
2024-10-30 18:45:46,767 - INFO - Belief set after intention 9 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:45:51,303 - INFO - Invalidating intention 9 ...
2024-10-30 18:46:25,998 - INFO - Testing intention 
def function():
    global belief_set
    parcel_spawn = [item for item in belief_set['map']['grid'] if item['cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
    delivery_cell = [item for item in belief_set['map']['grid'] if item['cell_type'] == 'delivery_cell'][0]['cell_coordinates']
    agent_location = belief_set['agent'][1]['coordinates']
    while agent_location != parcel_spawn:
        if parcel_spawn[0] < agent_location[0]:
            function_1()
        elif parcel_spawn[0] > agent_location[0]:
            function_2()
        elif parcel_spawn[1] < agent_location[1]:
            function_3()
        elif parcel_spawn[1] > agent_location[1]:
            function_4()
    function_5()
    while agent_location != delivery_cell:
        if delivery_cell[0] < agent_location[0]:
            function_1()
        elif delivery_cell[0] > agent_location[0]:
            function_2()
        elif delivery_cell[1] < agent_location[1]:
            function_3()
        elif delivery_cell[1] > agent_location[1]:
            function_4()
    function_6()
2024-10-30 18:46:25,998 - INFO - The intention is valid.
2024-10-30 18:46:25,999 - INFO - Intention added to desire 2
2024-10-30 18:46:26,024 - INFO - Running intention 10 ...
2024-10-30 18:46:26,193 - INFO - Belief set thread started ...
2024-10-30 18:46:26,225 - INFO - Plan thread started ...
2024-10-30 18:46:26,279 - INFO - Started subprocess...
2024-10-30 18:46:26,279 - INFO - Belief set before intention 10 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:46:26,587 - INFO - Executing action action_1 ...
2024-10-30 18:46:26,805 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 60}}]
2024-10-30 18:46:27,140 - INFO - Executing action action_1 ...
2024-10-30 18:46:27,376 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:27,727 - INFO - Executing action action_1 ...
2024-10-30 18:46:27,956 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:28,354 - INFO - Executing action action_1 ...
2024-10-30 18:46:28,585 - INFO - Action action_1 executed. Events received: [{'event_type': 'object added', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}]
2024-10-30 18:46:28,885 - INFO - Executing action action_1 ...
2024-10-30 18:46:29,147 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:29,495 - INFO - Executing action action_1 ...
2024-10-30 18:46:29,740 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:30,061 - INFO - Executing action action_1 ...
2024-10-30 18:46:30,290 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:30,590 - INFO - Executing action action_1 ...
2024-10-30 18:46:30,830 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:31,112 - INFO - Executing action action_1 ...
2024-10-30 18:46:31,325 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:31,648 - INFO - Executing action action_1 ...
2024-10-30 18:46:31,903 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:32,245 - INFO - Executing action action_1 ...
2024-10-30 18:46:32,456 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:32,773 - INFO - Executing action action_1 ...
2024-10-30 18:46:32,992 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:33,341 - INFO - Executing action action_1 ...
2024-10-30 18:46:33,567 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:33,982 - INFO - Executing action action_1 ...
2024-10-30 18:46:34,199 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:34,536 - INFO - Executing action action_1 ...
2024-10-30 18:46:34,761 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:35,036 - INFO - Executing action action_1 ...
2024-10-30 18:46:35,281 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:35,593 - INFO - Executing action action_1 ...
2024-10-30 18:46:35,804 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:36,145 - INFO - Executing action action_1 ...
2024-10-30 18:46:36,357 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:36,692 - INFO - Executing action action_1 ...
2024-10-30 18:46:36,906 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:37,200 - INFO - Executing action action_1 ...
2024-10-30 18:46:37,428 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:37,743 - INFO - Executing action action_1 ...
2024-10-30 18:46:38,032 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:38,409 - INFO - Executing action action_1 ...
2024-10-30 18:46:38,645 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:39,013 - INFO - Executing action action_1 ...
2024-10-30 18:46:39,232 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:39,548 - INFO - Executing action action_1 ...
2024-10-30 18:46:39,773 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:40,099 - INFO - Executing action action_1 ...
2024-10-30 18:46:40,336 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:40,760 - INFO - Executing action action_1 ...
2024-10-30 18:46:40,996 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:41,297 - INFO - Executing action action_1 ...
2024-10-30 18:46:41,303 - ERROR - Error during intention 10 execution. Intention 10 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-10-30 18:46:41,360 - INFO - Belief set thread terminated.
2024-10-30 18:46:41,527 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:46:41,770 - INFO - Plan thread terminated.
2024-10-30 18:46:41,789 - INFO - Intention 10 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1', 'action_1']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 60}}], [], [], [{'event_type': 'object added', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-10-30 18:46:41,789 - INFO - Belief set after intention 10 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 8: {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:46:49,338 - INFO - Invalidating intention 10 ...
2024-10-30 18:46:49,350 - INFO - Invalidating intention 1 ...
2024-10-30 18:46:49,350 - INFO - Intention 1 is a base action. It cannot be invalidated.
2024-10-30 18:46:49,350 - INFO - Invalidating intention 2 ...
2024-10-30 18:46:49,363 - INFO - Intention 2 is a base action. It cannot be invalidated.
2024-10-30 18:46:49,363 - INFO - Invalidating intention 3 ...
2024-10-30 18:46:49,388 - INFO - Intention 3 is a base action. It cannot be invalidated.
2024-10-30 18:46:49,388 - INFO - Invalidating intention 4 ...
2024-10-30 18:46:49,388 - INFO - Intention 4 is a base action. It cannot be invalidated.
2024-10-30 18:46:49,388 - INFO - Invalidating intention 5 ...
2024-10-30 18:46:49,388 - INFO - Intention 5 is a base action. It cannot be invalidated.
2024-10-30 18:46:49,388 - INFO - Invalidating intention 6 ...
2024-10-30 18:46:49,388 - INFO - Intention 6 is a base action. It cannot be invalidated.
2024-10-30 18:46:50,119 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically navigate the map, avoid non-walkable cells, pick up parcels from the parcel spawn location and deliver them to the delivery cell to maximize the overall score.
    Intention ID: [7]
    Executable: True
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_7():
                    global belief_set
                    agent_location = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    while agent_location != parcel_spawn_location:
                        if agent_location[0] > parcel_spawn_location[0]:
                            function_1()
                        elif agent_location[0] < parcel_spawn_location[0]:
                            function_2()
                        if agent_location[1] > parcel_spawn_location[1]:
                            function_3()
                        elif agent_location[1] < parcel_spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_1(belief_set):
    if len(belief_set['parcels']) > 0 or len(belief_set['agent'][1][
        'parcels_carried_ids']) > 0:
        return True
    else:
        return False



Desire 2: The agent's long-term goal is to efficiently memorize the layout of the map, anticipate the spawning of parcels, and plan the fastest routes from the parcel spawn location to the delivery cell while avoiding non-walkable cells to minimize delivery time and increase the score.
    Intention ID: [8]
    Executable: False
    Description: The agent's short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_8():
                    global belief_set
                    parcel_spawn = [cell['cell_coordinates'] for cell in belief_set['map'][
                        'grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != parcel_spawn:
                        if agent_coordinates[0] < parcel_spawn[0]:
                            function_2()
                        elif agent_coordinates[0] > parcel_spawn[0]:
                            function_1()
                        if agent_coordinates[1] < parcel_spawn[1]:
                            function_4()
                        elif agent_coordinates[1] > parcel_spawn[1]:
                            function_3()
                    function_5()
                    while agent_coordinates != delivery_cell:
                        if agent_coordinates[0] < delivery_cell[0]:
                            function_2()
                        elif agent_coordinates[0] > delivery_cell[0]:
                            function_1()
                        if agent_coordinates[1] < delivery_cell[1]:
                            function_4()
                        elif agent_coordinates[1] > delivery_cell[1]:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel while ensuring that the agent's coordinates are updated after each move to avoid entering an infinite loop.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (parcel_spawn[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (parcel_spawn['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (delivery_cell[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (delivery_cell['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent's short-term goal is to navigate through the map, pick up the parcels at the spawn location, and then move to the delivery cell to drop the parcels, distinguishing between walkable and delivery cells.
                def function_10():
                    global belief_set
                    parcel_spawn = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_cell = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != parcel_spawn:
                        if parcel_spawn[0] < agent_location[0]:
                            function_1()
                        elif parcel_spawn[0] > agent_location[0]:
                            function_2()
                        elif parcel_spawn[1] < agent_location[1]:
                            function_3()
                        elif parcel_spawn[1] > agent_location[1]:
                            function_4()
                    function_5()
                    while agent_location != delivery_cell:
                        if delivery_cell[0] < agent_location[0]:
                            function_1()
                        elif delivery_cell[0] > agent_location[0]:
                            function_2()
                        elif delivery_cell[1] < agent_location[1]:
                            function_3()
                        elif delivery_cell[1] > agent_location[1]:
                            function_4()
                    function_6()
                
Executable: False
Trigger function:
None



2024-10-30 18:46:50,119 - INFO - Running trigger function for desire 1 ...
2024-10-30 18:46:50,119 - INFO - Trigger function for desire 1 has been executed. Result: True
2024-10-30 18:46:50,119 - INFO - Desire 1 could be triggered. Adding it to the list...
2024-10-30 18:46:50,119 - INFO - Desires triggered: [1]. Now randomly choosing which one to run.
2024-10-30 18:46:50,138 - INFO - Desire 1 was randomly chosen. Desire 1 has been triggered.
2024-10-30 18:46:50,150 - INFO - Desire 1 is about to be executed ...
2024-10-30 18:46:50,150 - INFO - Executing all valid intentions for desire 1 ...
2024-10-30 18:46:50,150 - INFO - Executing intention 7 ...
2024-10-30 18:46:50,150 - INFO - Running intention 7 ...
2024-10-30 18:46:50,314 - INFO - Belief set thread started ...
2024-10-30 18:46:50,320 - INFO - Plan thread started ...
2024-10-30 18:46:50,320 - INFO - Started subprocess...
2024-10-30 18:46:50,338 - INFO - Belief set before intention 10 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 8: {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 9: {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:46:50,634 - INFO - Executing action action_3 ...
2024-10-30 18:46:50,852 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 60}}]
2024-10-30 18:46:51,157 - INFO - Executing action action_3 ...
2024-10-30 18:46:51,382 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:51,676 - INFO - Executing action action_3 ...
2024-10-30 18:46:51,919 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:52,219 - INFO - Executing action action_3 ...
2024-10-30 18:46:52,455 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:52,800 - INFO - Executing action action_3 ...
2024-10-30 18:46:53,030 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:53,403 - INFO - Executing action action_3 ...
2024-10-30 18:46:53,669 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:54,048 - INFO - Executing action action_3 ...
2024-10-30 18:46:54,286 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:54,642 - INFO - Executing action action_3 ...
2024-10-30 18:46:54,871 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:55,188 - INFO - Executing action action_3 ...
2024-10-30 18:46:55,408 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:55,748 - INFO - Executing action action_3 ...
2024-10-30 18:46:55,979 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:56,265 - INFO - Executing action action_3 ...
2024-10-30 18:46:56,490 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:56,763 - INFO - Executing action action_3 ...
2024-10-30 18:46:57,014 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:57,295 - INFO - Executing action action_3 ...
2024-10-30 18:46:57,520 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:57,846 - INFO - Executing action action_3 ...
2024-10-30 18:46:58,094 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:58,420 - INFO - Executing action action_3 ...
2024-10-30 18:46:58,662 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:59,044 - INFO - Executing action action_3 ...
2024-10-30 18:46:59,268 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:46:59,573 - INFO - Executing action action_3 ...
2024-10-30 18:46:59,833 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:47:00,131 - INFO - Executing action action_3 ...
2024-10-30 18:47:00,362 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:47:00,630 - INFO - Executing action action_3 ...
2024-10-30 18:47:00,843 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:47:01,106 - INFO - Executing action action_3 ...
2024-10-30 18:47:01,332 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:47:01,602 - INFO - Executing action action_3 ...
2024-10-30 18:47:01,814 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:47:02,109 - INFO - Executing action action_3 ...
2024-10-30 18:47:02,340 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:47:02,690 - INFO - Executing action action_3 ...
2024-10-30 18:47:02,937 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:47:03,268 - INFO - Executing action action_3 ...
2024-10-30 18:47:03,504 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:47:03,846 - INFO - Executing action action_3 ...
2024-10-30 18:47:04,062 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:47:04,387 - INFO - Executing action action_3 ...
2024-10-30 18:47:04,612 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:47:04,942 - INFO - Executing action action_3 ...
2024-10-30 18:47:05,179 - INFO - Action action_3 executed. Events received: []
2024-10-30 18:47:05,360 - ERROR - Error during intention 10 execution. Intention 10 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-10-30 18:47:05,464 - INFO - Belief set thread terminated.
2024-10-30 18:47:05,464 - INFO - Plan thread terminated.
2024-10-30 18:47:05,531 - INFO - Intention 10 execution has finished. Threads and subprocess terminated. Plan: ['action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3', 'action_3']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 60}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-10-30 18:47:05,542 - INFO - Belief set after intention 10 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 8: {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 9: {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:47:05,542 - INFO - Invalidating intention 7 ...
2024-10-30 18:47:05,542 - ERROR - Error during intention 7 execution. Desire 1 is now invalid and intention 7 has been invalidated.
2024-10-30 18:47:06,681 - INFO - Invalidating desire 1 ...
2024-10-30 18:47:07,950 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically navigate the map, avoid non-walkable cells, pick up parcels from the parcel spawn location and deliver them to the delivery cell to maximize the overall score.
    Intention ID: [7]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_7():
                    global belief_set
                    agent_location = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    while agent_location != parcel_spawn_location:
                        if agent_location[0] > parcel_spawn_location[0]:
                            function_1()
                        elif agent_location[0] < parcel_spawn_location[0]:
                            function_2()
                        if agent_location[1] > parcel_spawn_location[1]:
                            function_3()
                        elif agent_location[1] < parcel_spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    if len(belief_set['parcels']) > 0 or len(belief_set['agent'][1][
        'parcels_carried_ids']) > 0:
        return True
    else:
        return False



Desire 2: The agent's long-term goal is to efficiently memorize the layout of the map, anticipate the spawning of parcels, and plan the fastest routes from the parcel spawn location to the delivery cell while avoiding non-walkable cells to minimize delivery time and increase the score.
    Intention ID: [8]
    Executable: False
    Description: The agent's short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_8():
                    global belief_set
                    parcel_spawn = [cell['cell_coordinates'] for cell in belief_set['map'][
                        'grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != parcel_spawn:
                        if agent_coordinates[0] < parcel_spawn[0]:
                            function_2()
                        elif agent_coordinates[0] > parcel_spawn[0]:
                            function_1()
                        if agent_coordinates[1] < parcel_spawn[1]:
                            function_4()
                        elif agent_coordinates[1] > parcel_spawn[1]:
                            function_3()
                    function_5()
                    while agent_coordinates != delivery_cell:
                        if agent_coordinates[0] < delivery_cell[0]:
                            function_2()
                        elif agent_coordinates[0] > delivery_cell[0]:
                            function_1()
                        if agent_coordinates[1] < delivery_cell[1]:
                            function_4()
                        elif agent_coordinates[1] > delivery_cell[1]:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel while ensuring that the agent's coordinates are updated after each move to avoid entering an infinite loop.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (parcel_spawn[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (parcel_spawn['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (delivery_cell[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (delivery_cell['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent's short-term goal is to navigate through the map, pick up the parcels at the spawn location, and then move to the delivery cell to drop the parcels, distinguishing between walkable and delivery cells.
                def function_10():
                    global belief_set
                    parcel_spawn = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_cell = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != parcel_spawn:
                        if parcel_spawn[0] < agent_location[0]:
                            function_1()
                        elif parcel_spawn[0] > agent_location[0]:
                            function_2()
                        elif parcel_spawn[1] < agent_location[1]:
                            function_3()
                        elif parcel_spawn[1] > agent_location[1]:
                            function_4()
                    function_5()
                    while agent_location != delivery_cell:
                        if delivery_cell[0] < agent_location[0]:
                            function_1()
                        elif delivery_cell[0] > agent_location[0]:
                            function_2()
                        elif delivery_cell[1] < agent_location[1]:
                            function_3()
                        elif delivery_cell[1] > agent_location[1]:
                            function_4()
                    function_6()
                
Executable: False
Trigger function:
None



2024-10-30 18:47:07,950 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-10-30 18:47:07,950 - INFO - No desire has been triggered.
2024-10-30 18:47:07,950 - INFO - No desire triggered.
2024-10-30 18:47:09,629 - INFO - Desire added: 3. Desires:
Desire 1: The agent's long-term goal is to strategically navigate the map, avoid non-walkable cells, pick up parcels from the parcel spawn location and deliver them to the delivery cell to maximize the overall score.
    Intention ID: [7]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_7():
                    global belief_set
                    agent_location = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    while agent_location != parcel_spawn_location:
                        if agent_location[0] > parcel_spawn_location[0]:
                            function_1()
                        elif agent_location[0] < parcel_spawn_location[0]:
                            function_2()
                        if agent_location[1] > parcel_spawn_location[1]:
                            function_3()
                        elif agent_location[1] < parcel_spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    if len(belief_set['parcels']) > 0 or len(belief_set['agent'][1][
        'parcels_carried_ids']) > 0:
        return True
    else:
        return False



Desire 2: The agent's long-term goal is to efficiently memorize the layout of the map, anticipate the spawning of parcels, and plan the fastest routes from the parcel spawn location to the delivery cell while avoiding non-walkable cells to minimize delivery time and increase the score.
    Intention ID: [8]
    Executable: False
    Description: The agent's short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_8():
                    global belief_set
                    parcel_spawn = [cell['cell_coordinates'] for cell in belief_set['map'][
                        'grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != parcel_spawn:
                        if agent_coordinates[0] < parcel_spawn[0]:
                            function_2()
                        elif agent_coordinates[0] > parcel_spawn[0]:
                            function_1()
                        if agent_coordinates[1] < parcel_spawn[1]:
                            function_4()
                        elif agent_coordinates[1] > parcel_spawn[1]:
                            function_3()
                    function_5()
                    while agent_coordinates != delivery_cell:
                        if agent_coordinates[0] < delivery_cell[0]:
                            function_2()
                        elif agent_coordinates[0] > delivery_cell[0]:
                            function_1()
                        if agent_coordinates[1] < delivery_cell[1]:
                            function_4()
                        elif agent_coordinates[1] > delivery_cell[1]:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel while ensuring that the agent's coordinates are updated after each move to avoid entering an infinite loop.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (parcel_spawn[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (parcel_spawn['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (delivery_cell[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (delivery_cell['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent's short-term goal is to navigate through the map, pick up the parcels at the spawn location, and then move to the delivery cell to drop the parcels, distinguishing between walkable and delivery cells.
                def function_10():
                    global belief_set
                    parcel_spawn = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_cell = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != parcel_spawn:
                        if parcel_spawn[0] < agent_location[0]:
                            function_1()
                        elif parcel_spawn[0] > agent_location[0]:
                            function_2()
                        elif parcel_spawn[1] < agent_location[1]:
                            function_3()
                        elif parcel_spawn[1] > agent_location[1]:
                            function_4()
                    function_5()
                    while agent_location != delivery_cell:
                        if delivery_cell[0] < agent_location[0]:
                            function_1()
                        elif delivery_cell[0] > agent_location[0]:
                            function_2()
                        elif delivery_cell[1] < agent_location[1]:
                            function_3()
                        elif delivery_cell[1] > agent_location[1]:
                            function_4()
                    function_6()
                
Executable: False
Trigger function:
None


Desire 3: The agent's long term goal is to efficiently navigate the map, pick up parcels from the spawn point, and deliver them to the delivery cell while avoiding non-walkable areas.
Executable: False
Trigger function:
None



2024-10-30 18:47:20,887 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    parcels = belief_set['parcels']
    # Move towards parcel
    for parcel_id, parcel_info in parcels.items():
        if parcel_info['carried_by_id'] is None:
            if parcel_info['coordinates'][0] < agent['coordinates'][0]:
                function_1()
                break
            elif parcel_info['coordinates'][0] > agent['coordinates'][0]:
                function_2()
                break
            elif parcel_info['coordinates'][1] < agent['coordinates'][1]:
                function_3()
                break
            elif parcel_info['coordinates'][1] > agent['coordinates'][1]:
                function_4()
                break
    # Pick up parcel
    function_5()
    # Move towards delivery cell
    for cell_info in belief_set['map']['grid']:
        if cell_info['cell_type'] == 'delivery_cell':
            if cell_info['cell_coordinates'][0] < agent['coordinates'][0]:
                function_1()
                break
            elif cell_info['cell_coordinates'][0] > agent['coordinates'][0]:
                function_2()
                break
            elif cell_info['cell_coordinates'][1] < agent['coordinates'][1]:
                function_3()
                break
            elif cell_info['cell_coordinates'][1] > agent['coordinates'][1]:
                function_4()
                break
2024-10-30 18:47:20,887 - INFO - The intention is valid.
2024-10-30 18:47:20,901 - INFO - Intention added to desire 3
2024-10-30 18:47:20,920 - INFO - Running intention 11 ...
2024-10-30 18:47:21,013 - INFO - Belief set thread started ...
2024-10-30 18:47:21,026 - INFO - Plan thread started ...
2024-10-30 18:47:21,051 - INFO - Started subprocess...
2024-10-30 18:47:21,058 - INFO - Belief set before intention 11 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 8: {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 9: {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 10: {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:47:21,337 - INFO - Executing action action_2 ...
2024-10-30 18:47:21,548 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'score': 60}}]
2024-10-30 18:47:21,911 - INFO - Executing action action_5 ...
2024-10-30 18:47:22,173 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:47:22,471 - INFO - Executing action action_2 ...
2024-10-30 18:47:22,727 - INFO - Action action_2 executed. Events received: []
2024-10-30 18:47:23,082 - INFO - Plan thread terminated.
2024-10-30 18:47:23,106 - INFO - Belief set thread terminated.
2024-10-30 18:47:23,136 - INFO - Intention 11 execution has finished. Threads and subprocess terminated. Plan: ['action_2', 'action_5', 'action_2']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'score': 60}}], [], []]
2024-10-30 18:47:23,136 - INFO - Belief set after intention 11 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 8: {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 9: {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 10: {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:47:28,362 - INFO - Invalidating intention 11 ...
2024-10-30 18:47:34,398 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    spawn_point = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
    if agent['coordinates'] != spawn_point:
        if agent['coordinates'][0] > spawn_point[0]:
            function_1()
        elif agent['coordinates'][0] < spawn_point[0]:
            function_2()
        elif agent['coordinates'][1] > spawn_point[1]:
            function_3()
        else:
            function_4()
    function_5()

2024-10-30 18:47:34,410 - INFO - The intention is valid.
2024-10-30 18:47:34,424 - INFO - Intention added to desire 3
2024-10-30 18:47:34,436 - INFO - Running intention 12 ...
2024-10-30 18:47:34,662 - INFO - Belief set thread started ...
2024-10-30 18:47:34,681 - INFO - Plan thread started ...
2024-10-30 18:47:34,694 - INFO - Started subprocess...
2024-10-30 18:47:34,694 - INFO - Belief set before intention 12 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 8: {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 9: {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 10: {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 11: {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:47:34,934 - INFO - Executing action action_1 ...
2024-10-30 18:47:35,144 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 60}}]
2024-10-30 18:47:35,510 - INFO - Executing action action_5 ...
2024-10-30 18:47:35,798 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11], 'score': 60}}]
2024-10-30 18:47:36,067 - INFO - Plan thread terminated.
2024-10-30 18:47:36,154 - INFO - Belief set thread terminated.
2024-10-30 18:47:36,191 - INFO - Intention 12 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_5']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 60}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11], 'score': 60}}]]
2024-10-30 18:47:36,192 - INFO - Belief set after intention 12 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 8: {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 9: {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 10: {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 11: {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}}
2024-10-30 18:47:44,744 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    map_grid = belief_set['map']['grid']
    delivery_cell_coordinates = next(cell['cell_coordinates'] for cell in map_grid if cell['cell_type'] == 'delivery_cell')
    while agent['coordinates'] != delivery_cell_coordinates:
        if agent['coordinates'][0] < delivery_cell_coordinates[0]:
            function_2()
        elif agent['coordinates'][0] > delivery_cell_coordinates[0]:
            function_1()
        if agent['coordinates'][1] < delivery_cell_coordinates[1]:
            function_4()
        elif agent['coordinates'][1] > delivery_cell_coordinates[1]:
            function_3()
    function_6()

2024-10-30 18:47:44,744 - INFO - The intention is valid.
2024-10-30 18:47:44,777 - INFO - Intention added to desire 3
2024-10-30 18:47:44,825 - INFO - Running intention 13 ...
2024-10-30 18:47:45,036 - INFO - Belief set thread started ...
2024-10-30 18:47:45,042 - INFO - Plan thread started ...
2024-10-30 18:47:45,042 - INFO - Started subprocess...
2024-10-30 18:47:45,085 - INFO - Belief set before intention 13 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 7: {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 8: {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 9: {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 10: {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}, 11: {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}}
2024-10-30 18:47:45,365 - INFO - Executing action action_2 ...
2024-10-30 18:47:45,624 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11], 'score': 60}}]
2024-10-30 18:47:45,968 - INFO - Executing action action_4 ...
2024-10-30 18:47:46,255 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11], 'score': 60}}]
2024-10-30 18:47:46,557 - INFO - Executing action action_2 ...
2024-10-30 18:47:46,769 - INFO - Action action_2 executed. Events received: []
2024-10-30 18:47:47,145 - INFO - Executing action action_4 ...
2024-10-30 18:47:47,388 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}]
2024-10-30 18:47:47,743 - INFO - Executing action action_2 ...
2024-10-30 18:47:47,992 - INFO - Action action_2 executed. Events received: []
2024-10-30 18:47:48,340 - INFO - Executing action action_4 ...
2024-10-30 18:47:48,582 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-10-30 18:47:48,913 - INFO - Executing action action_2 ...
2024-10-30 18:47:49,133 - INFO - Action action_2 executed. Events received: []
2024-10-30 18:47:49,470 - INFO - Executing action action_4 ...
2024-10-30 18:47:49,694 - INFO - Action action_4 executed. Events received: []
2024-10-30 18:47:50,008 - INFO - Executing action action_2 ...
2024-10-30 18:47:50,218 - INFO - Action action_2 executed. Events received: []
2024-10-30 18:47:50,578 - INFO - Executing action action_4 ...
2024-10-30 18:47:50,819 - INFO - Action action_4 executed. Events received: []
2024-10-30 18:47:51,230 - INFO - Executing action action_2 ...
2024-10-30 18:47:51,541 - INFO - Action action_2 executed. Events received: []
2024-10-30 18:47:51,930 - INFO - Executing action action_4 ...
2024-10-30 18:47:52,149 - INFO - Action action_4 executed. Events received: []
2024-10-30 18:47:52,549 - INFO - Executing action action_2 ...
2024-10-30 18:47:52,768 - INFO - Action action_2 executed. Events received: []
2024-10-30 18:47:53,051 - INFO - Executing action action_4 ...
2024-10-30 18:47:53,281 - INFO - Action action_4 executed. Events received: []
2024-10-30 18:47:53,606 - INFO - Executing action action_2 ...
2024-10-30 18:47:53,836 - INFO - Action action_2 executed. Events received: []
2024-10-30 18:47:54,181 - INFO - Executing action action_4 ...
2024-10-30 18:47:54,393 - INFO - Action action_4 executed. Events received: []
2024-10-30 18:47:54,766 - INFO - Executing action action_2 ...
2024-10-30 18:47:55,040 - INFO - Action action_2 executed. Events received: []
2024-10-30 18:47:55,309 - INFO - Executing action action_4 ...
2024-10-30 18:47:55,564 - INFO - Action action_4 executed. Events received: []
2024-10-30 18:47:55,889 - INFO - Executing action action_2 ...
2024-10-30 18:47:56,156 - INFO - Action action_2 executed. Events received: []
2024-10-30 18:47:56,418 - INFO - Executing action action_4 ...
2024-10-30 18:47:56,668 - INFO - Action action_4 executed. Events received: []
2024-10-30 18:47:56,984 - INFO - Executing action action_2 ...
2024-10-30 18:47:57,227 - INFO - Action action_2 executed. Events received: []
2024-10-30 18:47:57,698 - INFO - Executing action action_4 ...
2024-10-30 18:47:57,921 - INFO - Action action_4 executed. Events received: []
2024-10-30 18:47:58,217 - INFO - Executing action action_2 ...
2024-10-30 18:47:58,426 - INFO - Action action_2 executed. Events received: []
2024-10-30 18:47:58,788 - INFO - Executing action action_4 ...
2024-10-30 18:47:59,012 - INFO - Action action_4 executed. Events received: []
2024-10-30 18:47:59,338 - INFO - Executing action action_2 ...
2024-10-30 18:47:59,598 - INFO - Action action_2 executed. Events received: []
2024-10-30 18:47:59,910 - INFO - Executing action action_4 ...
2024-10-30 18:48:00,130 - INFO - Action action_4 executed. Events received: []
2024-10-30 18:48:00,130 - ERROR - Error during intention 13 execution. Intention 13 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-10-30 18:48:00,224 - INFO - Belief set thread terminated.
2024-10-30 18:48:00,412 - INFO - Plan thread terminated.
2024-10-30 18:48:00,449 - INFO - Intention 13 execution has finished. Threads and subprocess terminated. Plan: ['action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4', 'action_2', 'action_4']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11], 'score': 60}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11], 'score': 60}}], [], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}], [], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-10-30 18:48:00,462 - INFO - Belief set after intention 13 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 7: {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 8: {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 9: {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 10: {'id': 10, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 11: {'id': 11, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 12: {'id': 12, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:48:06,330 - INFO - Invalidating intention 13 ...
2024-10-30 18:48:18,007 - INFO - Testing intention 
def function():
    global belief_set
    spawn_point = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
    delivery_point = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]['cell_coordinates']
    agent_location = belief_set['agent'][1]['coordinates']

    # Navigate to spawn point and pick up parcels
    while agent_location != spawn_point:
        if agent_location[0] < spawn_point[0]:
            function_2()
        elif agent_location[0] > spawn_point[0]:
            function_1()
        elif agent_location[1] < spawn_point[1]:
            function_4()
        else:
            function_3()
        agent_location = belief_set['agent'][1]['coordinates']

    function_5() # Pick up parcels

    # Navigate to delivery point
    while agent_location != delivery_point:
        if agent_location[0] < delivery_point[0]:
            function_2()
        elif agent_location[0] > delivery_point[0]:
            function_1()
        elif agent_location[1] < delivery_point[1]:
            function_4()
        else:
            function_3()
        agent_location = belief_set['agent'][1]['coordinates']

    function_6()  # Deliver parcels
2024-10-30 18:48:18,007 - INFO - The intention is valid.
2024-10-30 18:48:18,008 - INFO - Intention added to desire 3
2024-10-30 18:48:18,009 - INFO - Running intention 14 ...
2024-10-30 18:48:18,209 - INFO - Belief set thread started ...
2024-10-30 18:48:18,272 - INFO - Plan thread started ...
2024-10-30 18:48:18,316 - INFO - Started subprocess...
2024-10-30 18:48:18,316 - INFO - Belief set before intention 14 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11], 'score': 60}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 6: {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 7: {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 8: {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 9: {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 10: {'id': 10, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 11: {'id': 11, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}, 12: {'id': 12, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 13: {'id': 13, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:48:18,736 - INFO - Executing action action_1 ...
2024-10-30 18:48:18,956 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}]
2024-10-30 18:48:19,269 - INFO - Executing action action_3 ...
2024-10-30 18:48:19,491 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11], 'score': 60}}]
2024-10-30 18:48:19,854 - INFO - Executing action action_3 ...
2024-10-30 18:48:20,084 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}]
2024-10-30 18:48:20,414 - INFO - Executing action action_3 ...
2024-10-30 18:48:20,652 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11], 'score': 60}}]
2024-10-30 18:48:20,972 - INFO - Executing action action_5 ...
2024-10-30 18:48:21,197 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11, 12, 13], 'score': 60}}]
2024-10-30 18:48:21,541 - INFO - Executing action action_2 ...
2024-10-30 18:48:21,792 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11, 12, 13], 'score': 60}}]
2024-10-30 18:48:22,280 - INFO - Executing action action_4 ...
2024-10-30 18:48:22,558 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11, 12, 13], 'score': 60}}]
2024-10-30 18:48:22,921 - INFO - Executing action action_4 ...
2024-10-30 18:48:23,170 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}]
2024-10-30 18:48:23,495 - INFO - Executing action action_4 ...
2024-10-30 18:48:23,716 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11, 12, 13], 'score': 60}}]
2024-10-30 18:48:24,041 - INFO - Executing action action_6 ...
2024-10-30 18:48:24,277 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 220}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-10-30 18:48:24,659 - INFO - Plan thread terminated.
2024-10-30 18:48:24,671 - INFO - Belief set thread terminated.
2024-10-30 18:48:24,690 - INFO - Intention 14 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 3], 'score': 20, 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11], 'score': 60}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 1], 'score': 20, 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11], 'score': 60}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11, 12, 13], 'score': 60}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11, 12, 13], 'score': 60}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11, 12, 13], 'score': 60}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 13, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [6, 7, 8, 9, 10, 11, 12, 13], 'score': 60}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 220}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 6, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 7, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 8, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 9, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 10, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 11, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 12, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-10-30 18:48:24,690 - INFO - Belief set after intention 14 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 220}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:48:31,529 - INFO - Testing trigger function 
def should_pursue_goal(belief_set):
    # Check if there are parcels left to collect
    if len(belief_set['parcels']) == 0:
        return False
    # Check if agent is blocked by non-walkable cells
    agent_coords = belief_set['agent'][1]['coordinates']
    for cell in belief_set['map']['grid']:
        if cell['cell_type'] == 'non_walkable' and cell['cell_coordinates'] == agent_coords:
            return False
    return True
2024-10-30 18:48:31,529 - INFO - The trigger function is valid.
2024-10-30 18:48:31,530 - INFO - Trigger function added to desire 3.
2024-10-30 18:48:32,763 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically navigate the map, avoid non-walkable cells, pick up parcels from the parcel spawn location and deliver them to the delivery cell to maximize the overall score.
    Intention ID: [7]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_7():
                    global belief_set
                    agent_location = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    while agent_location != parcel_spawn_location:
                        if agent_location[0] > parcel_spawn_location[0]:
                            function_1()
                        elif agent_location[0] < parcel_spawn_location[0]:
                            function_2()
                        if agent_location[1] > parcel_spawn_location[1]:
                            function_3()
                        elif agent_location[1] < parcel_spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    if len(belief_set['parcels']) > 0 or len(belief_set['agent'][1][
        'parcels_carried_ids']) > 0:
        return True
    else:
        return False



Desire 2: The agent's long-term goal is to efficiently memorize the layout of the map, anticipate the spawning of parcels, and plan the fastest routes from the parcel spawn location to the delivery cell while avoiding non-walkable cells to minimize delivery time and increase the score.
    Intention ID: [8]
    Executable: False
    Description: The agent's short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_8():
                    global belief_set
                    parcel_spawn = [cell['cell_coordinates'] for cell in belief_set['map'][
                        'grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != parcel_spawn:
                        if agent_coordinates[0] < parcel_spawn[0]:
                            function_2()
                        elif agent_coordinates[0] > parcel_spawn[0]:
                            function_1()
                        if agent_coordinates[1] < parcel_spawn[1]:
                            function_4()
                        elif agent_coordinates[1] > parcel_spawn[1]:
                            function_3()
                    function_5()
                    while agent_coordinates != delivery_cell:
                        if agent_coordinates[0] < delivery_cell[0]:
                            function_2()
                        elif agent_coordinates[0] > delivery_cell[0]:
                            function_1()
                        if agent_coordinates[1] < delivery_cell[1]:
                            function_4()
                        elif agent_coordinates[1] > delivery_cell[1]:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel while ensuring that the agent's coordinates are updated after each move to avoid entering an infinite loop.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (parcel_spawn[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (parcel_spawn['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (delivery_cell[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (delivery_cell['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent's short-term goal is to navigate through the map, pick up the parcels at the spawn location, and then move to the delivery cell to drop the parcels, distinguishing between walkable and delivery cells.
                def function_10():
                    global belief_set
                    parcel_spawn = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_cell = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != parcel_spawn:
                        if parcel_spawn[0] < agent_location[0]:
                            function_1()
                        elif parcel_spawn[0] > agent_location[0]:
                            function_2()
                        elif parcel_spawn[1] < agent_location[1]:
                            function_3()
                        elif parcel_spawn[1] > agent_location[1]:
                            function_4()
                    function_5()
                    while agent_location != delivery_cell:
                        if delivery_cell[0] < agent_location[0]:
                            function_1()
                        elif delivery_cell[0] > agent_location[0]:
                            function_2()
                        elif delivery_cell[1] < agent_location[1]:
                            function_3()
                        elif delivery_cell[1] > agent_location[1]:
                            function_4()
                    function_6()
                
Executable: False
Trigger function:
None


Desire 3: The agent's long term goal is to efficiently navigate the map, pick up parcels from the spawn point, and deliver them to the delivery cell while avoiding non-walkable areas.
    Intention ID: [11]
    Executable: False
    Description: The agent should move to a nearby parcel, pick it up, and move towards the delivery cell.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    for parcel_id, parcel_info in parcels.items():
                        if parcel_info['carried_by_id'] is None:
                            if parcel_info['coordinates'][0] < agent['coordinates'][0]:
                                function_1()
                                break
                            elif parcel_info['coordinates'][0] > agent['coordinates'][0]:
                                function_2()
                                break
                            elif parcel_info['coordinates'][1] < agent['coordinates'][1]:
                                function_3()
                                break
                            elif parcel_info['coordinates'][1] > agent['coordinates'][1]:
                                function_4()
                                break
                    function_5()
                    for cell_info in belief_set['map']['grid']:
                        if cell_info['cell_type'] == 'delivery_cell':
                            if cell_info['cell_coordinates'][0] < agent['coordinates'][0]:
                                function_1()
                                break
                            elif cell_info['cell_coordinates'][0] > agent['coordinates'][0]:
                                function_2()
                                break
                            elif cell_info['cell_coordinates'][1] < agent['coordinates'][1]:
                                function_3()
                                break
                            elif cell_info['cell_coordinates'][1] > agent['coordinates'][1]:
                                function_4()
                                break
                
    Intention ID: [12]
    Executable: True
    Description: The short term goal is to move the agent towards the parcel spawn point if it's not already there, and pick up the parcels present on the spawn point.
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    spawn_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    if agent['coordinates'] != spawn_point:
                        if agent['coordinates'][0] > spawn_point[0]:
                            function_1()
                        elif agent['coordinates'][0] < spawn_point[0]:
                            function_2()
                        elif agent['coordinates'][1] > spawn_point[1]:
                            function_3()
                        else:
                            function_4()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to have the agent move towards the delivery cell and deliver the parcels it's carrying.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map_grid = belief_set['map']['grid']
                    delivery_cell_coordinates = next(cell['cell_coordinates'] for cell in
                        map_grid if cell['cell_type'] == 'delivery_cell')
                    while agent['coordinates'] != delivery_cell_coordinates:
                        if agent['coordinates'][0] < delivery_cell_coordinates[0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell_coordinates[0]:
                            function_1()
                        if agent['coordinates'][1] < delivery_cell_coordinates[1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell_coordinates[1]:
                            function_3()
                    function_6()
                
    Intention ID: [14]
    Executable: True
    Description: The agent's short term goal is to safely navigate towards the parcel spawn point, pick up all parcels at the spawn point, and then navigate towards the delivery cell avoiding any non-walkable areas.
                def function_14():
                    global belief_set
                    spawn_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != spawn_point:
                        if agent_location[0] < spawn_point[0]:
                            function_2()
                        elif agent_location[0] > spawn_point[0]:
                            function_1()
                        elif agent_location[1] < spawn_point[1]:
                            function_4()
                        else:
                            function_3()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_point:
                        if agent_location[0] < delivery_point[0]:
                            function_2()
                        elif agent_location[0] > delivery_point[0]:
                            function_1()
                        elif agent_location[1] < delivery_point[1]:
                            function_4()
                        else:
                            function_3()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: True
Trigger function:
def function_dtf_2(belief_set):
    if len(belief_set['parcels']) == 0:
        return False
    agent_coords = belief_set['agent'][1]['coordinates']
    for cell in belief_set['map']['grid']:
        if cell['cell_type'] == 'non_walkable' and cell['cell_coordinates'
            ] == agent_coords:
            return False
    return True




2024-10-30 18:48:32,763 - INFO - Running trigger function for desire 3 ...
2024-10-30 18:48:32,763 - INFO - Trigger function for desire 3 has been executed. Result: True
2024-10-30 18:48:32,763 - INFO - Desire 3 could be triggered. Adding it to the list...
2024-10-30 18:48:32,763 - INFO - Desires triggered: [3]. Now randomly choosing which one to run.
2024-10-30 18:48:32,770 - INFO - Desire 3 was randomly chosen. Desire 3 has been triggered.
2024-10-30 18:48:32,782 - INFO - Desire 3 is about to be executed ...
2024-10-30 18:48:32,782 - INFO - Executing all valid intentions for desire 3 ...
2024-10-30 18:48:32,782 - INFO - Executing intention 12 ...
2024-10-30 18:48:32,795 - INFO - Running intention 12 ...
2024-10-30 18:48:33,052 - INFO - Belief set thread started ...
2024-10-30 18:48:33,083 - INFO - Plan thread started ...
2024-10-30 18:48:33,108 - INFO - Started subprocess...
2024-10-30 18:48:33,121 - INFO - Belief set before intention 14 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 220}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 14: {'id': 14, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:48:33,454 - INFO - Executing action action_1 ...
2024-10-30 18:48:33,689 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 220}}]
2024-10-30 18:48:34,093 - INFO - Executing action action_3 ...
2024-10-30 18:48:34,336 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 220}}]
2024-10-30 18:48:34,660 - INFO - Executing action action_3 ...
2024-10-30 18:48:34,898 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 220}}]
2024-10-30 18:48:35,215 - INFO - Executing action action_3 ...
2024-10-30 18:48:35,429 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 220}}]
2024-10-30 18:48:35,817 - INFO - Executing action action_5 ...
2024-10-30 18:48:36,074 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [14], 'score': 220}}]
2024-10-30 18:48:36,417 - INFO - Executing action action_2 ...
2024-10-30 18:48:36,683 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [14], 'score': 220}}]
2024-10-30 18:48:37,083 - INFO - Executing action action_4 ...
2024-10-30 18:48:37,341 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [14], 'score': 220}}]
2024-10-30 18:48:37,645 - INFO - Executing action action_4 ...
2024-10-30 18:48:37,881 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [14], 'score': 220}}]
2024-10-30 18:48:38,248 - INFO - Executing action action_4 ...
2024-10-30 18:48:38,459 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [14], 'score': 220}}]
2024-10-30 18:48:38,801 - INFO - Executing action action_6 ...
2024-10-30 18:48:39,107 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 240}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-10-30 18:48:39,469 - INFO - Belief set thread terminated.
2024-10-30 18:48:39,487 - INFO - Plan thread terminated.
2024-10-30 18:48:39,500 - INFO - Intention 14 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [14], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [14], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [14], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [14], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [14], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 240}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-10-30 18:48:39,500 - INFO - Belief set after intention 14 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 240}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:48:39,500 - INFO - Intention 12 has been executed with plan ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6'] and events [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [14], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 0], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [14], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [14], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [14], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [14], 'score': 220}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 240}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 14, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]].
2024-10-30 18:48:39,500 - INFO - Executing intention 14 ...
2024-10-30 18:48:39,500 - INFO - Running intention 14 ...
2024-10-30 18:48:39,662 - INFO - Belief set thread started ...
2024-10-30 18:48:39,674 - INFO - Plan thread started ...
2024-10-30 18:48:39,687 - INFO - Started subprocess...
2024-10-30 18:48:39,687 - INFO - Belief set before intention 14 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 240}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:48:39,951 - INFO - Executing action action_1 ...
2024-10-30 18:48:40,171 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 240}}]
2024-10-30 18:48:40,516 - INFO - Executing action action_3 ...
2024-10-30 18:48:40,741 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 240}}]
2024-10-30 18:48:41,125 - INFO - Executing action action_3 ...
2024-10-30 18:48:41,373 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 240}}]
2024-10-30 18:48:41,783 - INFO - Executing action action_3 ...
2024-10-30 18:48:42,012 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 240}}]
2024-10-30 18:48:42,347 - INFO - Executing action action_5 ...
2024-10-30 18:48:42,559 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:48:42,864 - INFO - Executing action action_2 ...
2024-10-30 18:48:43,078 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'score': 240}}]
2024-10-30 18:48:43,477 - INFO - Executing action action_4 ...
2024-10-30 18:48:43,716 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'score': 240}}]
2024-10-30 18:48:44,065 - INFO - Executing action action_4 ...
2024-10-30 18:48:44,283 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'score': 240}}]
2024-10-30 18:48:44,599 - INFO - Executing action action_4 ...
2024-10-30 18:48:44,825 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 240}}]
2024-10-30 18:48:45,214 - INFO - Executing action action_6 ...
2024-10-30 18:48:45,474 - INFO - Action action_6 executed. Events received: []
2024-10-30 18:48:45,768 - INFO - Plan thread terminated.
2024-10-30 18:48:45,786 - INFO - Belief set thread terminated.
2024-10-30 18:48:45,786 - INFO - Intention 14 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 240}}], [], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 240}}], []]
2024-10-30 18:48:45,786 - INFO - Belief set after intention 14 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 240}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:48:45,786 - INFO - Intention 14 has been executed with plan ['action_1', 'action_3', 'action_3', 'action_3', 'action_5', 'action_2', 'action_4', 'action_4', 'action_4', 'action_6'] and events [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 2], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 1], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 0], 'parcels_carried_ids': [], 'score': 240}}], [], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 0], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 240}}], []].
2024-10-30 18:48:46,885 - INFO - Invalidating desire 3 ...
2024-10-30 18:48:48,108 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically navigate the map, avoid non-walkable cells, pick up parcels from the parcel spawn location and deliver them to the delivery cell to maximize the overall score.
    Intention ID: [7]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_7():
                    global belief_set
                    agent_location = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    while agent_location != parcel_spawn_location:
                        if agent_location[0] > parcel_spawn_location[0]:
                            function_1()
                        elif agent_location[0] < parcel_spawn_location[0]:
                            function_2()
                        if agent_location[1] > parcel_spawn_location[1]:
                            function_3()
                        elif agent_location[1] < parcel_spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    if len(belief_set['parcels']) > 0 or len(belief_set['agent'][1][
        'parcels_carried_ids']) > 0:
        return True
    else:
        return False



Desire 2: The agent's long-term goal is to efficiently memorize the layout of the map, anticipate the spawning of parcels, and plan the fastest routes from the parcel spawn location to the delivery cell while avoiding non-walkable cells to minimize delivery time and increase the score.
    Intention ID: [8]
    Executable: False
    Description: The agent's short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_8():
                    global belief_set
                    parcel_spawn = [cell['cell_coordinates'] for cell in belief_set['map'][
                        'grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != parcel_spawn:
                        if agent_coordinates[0] < parcel_spawn[0]:
                            function_2()
                        elif agent_coordinates[0] > parcel_spawn[0]:
                            function_1()
                        if agent_coordinates[1] < parcel_spawn[1]:
                            function_4()
                        elif agent_coordinates[1] > parcel_spawn[1]:
                            function_3()
                    function_5()
                    while agent_coordinates != delivery_cell:
                        if agent_coordinates[0] < delivery_cell[0]:
                            function_2()
                        elif agent_coordinates[0] > delivery_cell[0]:
                            function_1()
                        if agent_coordinates[1] < delivery_cell[1]:
                            function_4()
                        elif agent_coordinates[1] > delivery_cell[1]:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel while ensuring that the agent's coordinates are updated after each move to avoid entering an infinite loop.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (parcel_spawn[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (parcel_spawn['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (delivery_cell[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (delivery_cell['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent's short-term goal is to navigate through the map, pick up the parcels at the spawn location, and then move to the delivery cell to drop the parcels, distinguishing between walkable and delivery cells.
                def function_10():
                    global belief_set
                    parcel_spawn = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_cell = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != parcel_spawn:
                        if parcel_spawn[0] < agent_location[0]:
                            function_1()
                        elif parcel_spawn[0] > agent_location[0]:
                            function_2()
                        elif parcel_spawn[1] < agent_location[1]:
                            function_3()
                        elif parcel_spawn[1] > agent_location[1]:
                            function_4()
                    function_5()
                    while agent_location != delivery_cell:
                        if delivery_cell[0] < agent_location[0]:
                            function_1()
                        elif delivery_cell[0] > agent_location[0]:
                            function_2()
                        elif delivery_cell[1] < agent_location[1]:
                            function_3()
                        elif delivery_cell[1] > agent_location[1]:
                            function_4()
                    function_6()
                
Executable: False
Trigger function:
None


Desire 3: The agent's long term goal is to efficiently navigate the map, pick up parcels from the spawn point, and deliver them to the delivery cell while avoiding non-walkable areas.
    Intention ID: [11]
    Executable: False
    Description: The agent should move to a nearby parcel, pick it up, and move towards the delivery cell.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    for parcel_id, parcel_info in parcels.items():
                        if parcel_info['carried_by_id'] is None:
                            if parcel_info['coordinates'][0] < agent['coordinates'][0]:
                                function_1()
                                break
                            elif parcel_info['coordinates'][0] > agent['coordinates'][0]:
                                function_2()
                                break
                            elif parcel_info['coordinates'][1] < agent['coordinates'][1]:
                                function_3()
                                break
                            elif parcel_info['coordinates'][1] > agent['coordinates'][1]:
                                function_4()
                                break
                    function_5()
                    for cell_info in belief_set['map']['grid']:
                        if cell_info['cell_type'] == 'delivery_cell':
                            if cell_info['cell_coordinates'][0] < agent['coordinates'][0]:
                                function_1()
                                break
                            elif cell_info['cell_coordinates'][0] > agent['coordinates'][0]:
                                function_2()
                                break
                            elif cell_info['cell_coordinates'][1] < agent['coordinates'][1]:
                                function_3()
                                break
                            elif cell_info['cell_coordinates'][1] > agent['coordinates'][1]:
                                function_4()
                                break
                
    Intention ID: [12]
    Executable: True
    Description: The short term goal is to move the agent towards the parcel spawn point if it's not already there, and pick up the parcels present on the spawn point.
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    spawn_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    if agent['coordinates'] != spawn_point:
                        if agent['coordinates'][0] > spawn_point[0]:
                            function_1()
                        elif agent['coordinates'][0] < spawn_point[0]:
                            function_2()
                        elif agent['coordinates'][1] > spawn_point[1]:
                            function_3()
                        else:
                            function_4()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to have the agent move towards the delivery cell and deliver the parcels it's carrying.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map_grid = belief_set['map']['grid']
                    delivery_cell_coordinates = next(cell['cell_coordinates'] for cell in
                        map_grid if cell['cell_type'] == 'delivery_cell')
                    while agent['coordinates'] != delivery_cell_coordinates:
                        if agent['coordinates'][0] < delivery_cell_coordinates[0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell_coordinates[0]:
                            function_1()
                        if agent['coordinates'][1] < delivery_cell_coordinates[1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell_coordinates[1]:
                            function_3()
                    function_6()
                
    Intention ID: [14]
    Executable: True
    Description: The agent's short term goal is to safely navigate towards the parcel spawn point, pick up all parcels at the spawn point, and then navigate towards the delivery cell avoiding any non-walkable areas.
                def function_14():
                    global belief_set
                    spawn_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != spawn_point:
                        if agent_location[0] < spawn_point[0]:
                            function_2()
                        elif agent_location[0] > spawn_point[0]:
                            function_1()
                        elif agent_location[1] < spawn_point[1]:
                            function_4()
                        else:
                            function_3()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_point:
                        if agent_location[0] < delivery_point[0]:
                            function_2()
                        elif agent_location[0] > delivery_point[0]:
                            function_1()
                        elif agent_location[1] < delivery_point[1]:
                            function_4()
                        else:
                            function_3()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if len(belief_set['parcels']) == 0:
        return False
    agent_coords = belief_set['agent'][1]['coordinates']
    for cell in belief_set['map']['grid']:
        if cell['cell_type'] == 'non_walkable' and cell['cell_coordinates'
            ] == agent_coords:
            return False
    return True




2024-10-30 18:48:48,108 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-10-30 18:48:48,108 - INFO - No desire has been triggered.
2024-10-30 18:48:48,109 - INFO - No desire triggered.
2024-10-30 18:48:49,561 - INFO - Desire added: 4. Desires:
Desire 1: The agent's long-term goal is to strategically navigate the map, avoid non-walkable cells, pick up parcels from the parcel spawn location and deliver them to the delivery cell to maximize the overall score.
    Intention ID: [7]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_7():
                    global belief_set
                    agent_location = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    while agent_location != parcel_spawn_location:
                        if agent_location[0] > parcel_spawn_location[0]:
                            function_1()
                        elif agent_location[0] < parcel_spawn_location[0]:
                            function_2()
                        if agent_location[1] > parcel_spawn_location[1]:
                            function_3()
                        elif agent_location[1] < parcel_spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    if len(belief_set['parcels']) > 0 or len(belief_set['agent'][1][
        'parcels_carried_ids']) > 0:
        return True
    else:
        return False



Desire 2: The agent's long-term goal is to efficiently memorize the layout of the map, anticipate the spawning of parcels, and plan the fastest routes from the parcel spawn location to the delivery cell while avoiding non-walkable cells to minimize delivery time and increase the score.
    Intention ID: [8]
    Executable: False
    Description: The agent's short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_8():
                    global belief_set
                    parcel_spawn = [cell['cell_coordinates'] for cell in belief_set['map'][
                        'grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != parcel_spawn:
                        if agent_coordinates[0] < parcel_spawn[0]:
                            function_2()
                        elif agent_coordinates[0] > parcel_spawn[0]:
                            function_1()
                        if agent_coordinates[1] < parcel_spawn[1]:
                            function_4()
                        elif agent_coordinates[1] > parcel_spawn[1]:
                            function_3()
                    function_5()
                    while agent_coordinates != delivery_cell:
                        if agent_coordinates[0] < delivery_cell[0]:
                            function_2()
                        elif agent_coordinates[0] > delivery_cell[0]:
                            function_1()
                        if agent_coordinates[1] < delivery_cell[1]:
                            function_4()
                        elif agent_coordinates[1] > delivery_cell[1]:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel while ensuring that the agent's coordinates are updated after each move to avoid entering an infinite loop.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (parcel_spawn[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (parcel_spawn['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (delivery_cell[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (delivery_cell['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent's short-term goal is to navigate through the map, pick up the parcels at the spawn location, and then move to the delivery cell to drop the parcels, distinguishing between walkable and delivery cells.
                def function_10():
                    global belief_set
                    parcel_spawn = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_cell = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != parcel_spawn:
                        if parcel_spawn[0] < agent_location[0]:
                            function_1()
                        elif parcel_spawn[0] > agent_location[0]:
                            function_2()
                        elif parcel_spawn[1] < agent_location[1]:
                            function_3()
                        elif parcel_spawn[1] > agent_location[1]:
                            function_4()
                    function_5()
                    while agent_location != delivery_cell:
                        if delivery_cell[0] < agent_location[0]:
                            function_1()
                        elif delivery_cell[0] > agent_location[0]:
                            function_2()
                        elif delivery_cell[1] < agent_location[1]:
                            function_3()
                        elif delivery_cell[1] > agent_location[1]:
                            function_4()
                    function_6()
                
Executable: False
Trigger function:
None


Desire 3: The agent's long term goal is to efficiently navigate the map, pick up parcels from the spawn point, and deliver them to the delivery cell while avoiding non-walkable areas.
    Intention ID: [11]
    Executable: False
    Description: The agent should move to a nearby parcel, pick it up, and move towards the delivery cell.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    for parcel_id, parcel_info in parcels.items():
                        if parcel_info['carried_by_id'] is None:
                            if parcel_info['coordinates'][0] < agent['coordinates'][0]:
                                function_1()
                                break
                            elif parcel_info['coordinates'][0] > agent['coordinates'][0]:
                                function_2()
                                break
                            elif parcel_info['coordinates'][1] < agent['coordinates'][1]:
                                function_3()
                                break
                            elif parcel_info['coordinates'][1] > agent['coordinates'][1]:
                                function_4()
                                break
                    function_5()
                    for cell_info in belief_set['map']['grid']:
                        if cell_info['cell_type'] == 'delivery_cell':
                            if cell_info['cell_coordinates'][0] < agent['coordinates'][0]:
                                function_1()
                                break
                            elif cell_info['cell_coordinates'][0] > agent['coordinates'][0]:
                                function_2()
                                break
                            elif cell_info['cell_coordinates'][1] < agent['coordinates'][1]:
                                function_3()
                                break
                            elif cell_info['cell_coordinates'][1] > agent['coordinates'][1]:
                                function_4()
                                break
                
    Intention ID: [12]
    Executable: True
    Description: The short term goal is to move the agent towards the parcel spawn point if it's not already there, and pick up the parcels present on the spawn point.
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    spawn_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    if agent['coordinates'] != spawn_point:
                        if agent['coordinates'][0] > spawn_point[0]:
                            function_1()
                        elif agent['coordinates'][0] < spawn_point[0]:
                            function_2()
                        elif agent['coordinates'][1] > spawn_point[1]:
                            function_3()
                        else:
                            function_4()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to have the agent move towards the delivery cell and deliver the parcels it's carrying.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map_grid = belief_set['map']['grid']
                    delivery_cell_coordinates = next(cell['cell_coordinates'] for cell in
                        map_grid if cell['cell_type'] == 'delivery_cell')
                    while agent['coordinates'] != delivery_cell_coordinates:
                        if agent['coordinates'][0] < delivery_cell_coordinates[0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell_coordinates[0]:
                            function_1()
                        if agent['coordinates'][1] < delivery_cell_coordinates[1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell_coordinates[1]:
                            function_3()
                    function_6()
                
    Intention ID: [14]
    Executable: True
    Description: The agent's short term goal is to safely navigate towards the parcel spawn point, pick up all parcels at the spawn point, and then navigate towards the delivery cell avoiding any non-walkable areas.
                def function_14():
                    global belief_set
                    spawn_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != spawn_point:
                        if agent_location[0] < spawn_point[0]:
                            function_2()
                        elif agent_location[0] > spawn_point[0]:
                            function_1()
                        elif agent_location[1] < spawn_point[1]:
                            function_4()
                        else:
                            function_3()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_point:
                        if agent_location[0] < delivery_point[0]:
                            function_2()
                        elif agent_location[0] > delivery_point[0]:
                            function_1()
                        elif agent_location[1] < delivery_point[1]:
                            function_4()
                        else:
                            function_3()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if len(belief_set['parcels']) == 0:
        return False
    agent_coords = belief_set['agent'][1]['coordinates']
    for cell in belief_set['map']['grid']:
        if cell['cell_type'] == 'non_walkable' and cell['cell_coordinates'
            ] == agent_coords:
            return False
    return True



Desire 4: The agent's long term goal is to develop an optimal path planning strategy that minimizes total travel distance while maximizing the number of parcels delivered.
Executable: False
Trigger function:
None



2024-10-30 18:49:00,365 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]['cell_coordinates']
    if not agent['parcels_carried_ids']:
        if agent['coordinates'][0] < parcel_spawn[0]:
            function_2()
        elif agent['coordinates'][0] > parcel_spawn[0]:
            function_1()
        elif agent['coordinates'][1] < parcel_spawn[1]:
            function_4()
        elif agent['coordinates'][1] > parcel_spawn[1]:
            function_3()
        else:
            function_5()
    else:
        if agent['coordinates'][0] < delivery_cell[0]:
            function_2()
        elif agent['coordinates'][0] > delivery_cell[0]:
            function_1()
        elif agent['coordinates'][1] < delivery_cell[1]:
            function_4()
        elif agent['coordinates'][1] > delivery_cell[1]:
            function_3()
        else:
            function_6()
2024-10-30 18:49:00,378 - INFO - The intention is valid.
2024-10-30 18:49:00,404 - INFO - Intention added to desire 4
2024-10-30 18:49:00,411 - INFO - Running intention 15 ...
2024-10-30 18:49:00,567 - INFO - Belief set thread started ...
2024-10-30 18:49:00,574 - INFO - Plan thread started ...
2024-10-30 18:49:00,580 - INFO - Started subprocess...
2024-10-30 18:49:00,580 - INFO - Belief set before intention 15 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 240}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 15: {'id': 15, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:49:00,893 - INFO - Executing action action_1 ...
2024-10-30 18:49:01,141 - INFO - Action action_1 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 240}}]
2024-10-30 18:49:01,493 - INFO - Belief set thread terminated.
2024-10-30 18:49:01,499 - INFO - Plan thread terminated.
2024-10-30 18:49:01,543 - INFO - Intention 15 execution has finished. Threads and subprocess terminated. Plan: ['action_1']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 240}}]]
2024-10-30 18:49:01,562 - INFO - Belief set after intention 15 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 240}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 15: {'id': 15, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:49:06,306 - INFO - Invalidating intention 15 ...
2024-10-30 18:49:20,509 - INFO - Testing intention 
def function():
    global belief_set
    
    agent_coordinates = belief_set['agent'][1]['coordinates']
    parcels_coordinates = [p['coordinates'] for p in belief_set['parcels'].values() if p['carried_by_id'] == None]

    parcel_coordinates = min(parcels_coordinates, key=lambda c: abs(c[0] - agent_coordinates[0]) + abs(c[1] - agent_coordinates[1]))

    while agent_coordinates != parcel_coordinates:
        if agent_coordinates[0] > parcel_coordinates[0]:
            function_1()
            agent_coordinates[0] -= 1
        elif agent_coordinates[0] < parcel_coordinates[0]:
            function_2()
            agent_coordinates[0] += 1
        elif agent_coordinates[1] > parcel_coordinates[1]:
            function_3()
            agent_coordinates[1] -= 1
        elif agent_coordinates[1] < parcel_coordinates[1]:
            function_4()
            agent_coordinates[1] += 1

    function_5()

    delivery_coordinates = [cell['cell_coordinates'] for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]

    while agent_coordinates != delivery_coordinates:
        if agent_coordinates[0] > delivery_coordinates[0]:
            function_1()
            agent_coordinates[0] -= 1
        elif agent_coordinates[0] < delivery_coordinates[0]:
            function_2()
            agent_coordinates[0] += 1
        elif agent_coordinates[1] > delivery_coordinates[1]:
            function_3()
            agent_coordinates[1] -= 1
        elif agent_coordinates[1] < delivery_coordinates[1]:
            function_4()
            agent_coordinates[1] += 1

    function_6()

2024-10-30 18:49:20,528 - INFO - The intention is valid.
2024-10-30 18:49:20,529 - INFO - Intention added to desire 4
2024-10-30 18:49:20,535 - INFO - Running intention 16 ...
2024-10-30 18:49:20,673 - INFO - Belief set thread started ...
2024-10-30 18:49:20,697 - INFO - Plan thread started ...
2024-10-30 18:49:20,710 - INFO - Started subprocess...
2024-10-30 18:49:20,729 - INFO - Belief set before intention 16 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [0, 3], 'parcels_carried_ids': [], 'score': 240}}, 'parcels': {4: {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 5: {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': None}, 15: {'id': 15, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 16: {'id': 16, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:49:21,063 - INFO - Executing action action_2 ...
2024-10-30 18:49:21,281 - INFO - Action action_2 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 240}}]
2024-10-30 18:49:21,637 - INFO - Executing action action_3 ...
2024-10-30 18:49:21,867 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'score': 240}}]
2024-10-30 18:49:22,248 - INFO - Executing action action_3 ...
2024-10-30 18:49:22,499 - INFO - Action action_3 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'score': 240}}]
2024-10-30 18:49:22,818 - INFO - Executing action action_5 ...
2024-10-30 18:49:23,072 - INFO - Action action_5 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [4, 5], 'score': 240}}]
2024-10-30 18:49:23,376 - INFO - Executing action action_4 ...
2024-10-30 18:49:23,644 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [4, 5], 'score': 240}}]
2024-10-30 18:49:24,019 - INFO - Executing action action_4 ...
2024-10-30 18:49:24,255 - INFO - Action action_4 executed. Events received: [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [4, 5], 'score': 240}}]
2024-10-30 18:49:24,543 - INFO - Executing action action_6 ...
2024-10-30 18:49:24,755 - INFO - Action action_6 executed. Events received: [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 280}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]
2024-10-30 18:49:25,085 - INFO - Belief set thread terminated.
2024-10-30 18:49:25,098 - INFO - Plan thread terminated.
2024-10-30 18:49:25,123 - INFO - Intention 16 execution has finished. Threads and subprocess terminated. Plan: ['action_2', 'action_3', 'action_3', 'action_5', 'action_4', 'action_4', 'action_6']. Events: [[{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 1], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 1], 'parcels_carried_ids': [4, 5], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 2], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 2], 'parcels_carried_ids': [4, 5], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'parcel', 'object': {'id': 5, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}, {'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [4, 5], 'score': 240}}], [{'event_type': 'object changed', 'object_type': 'agent', 'object': {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 280}}, {'event_type': 'object removed', 'object_type': 'parcel', 'object': {'id': 4, 'coordinates': [1, 3], 'score': 20, 'carried_by_id': 1}}]]
2024-10-30 18:49:25,123 - INFO - Belief set after intention 16 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 280}}, 'parcels': {15: {'id': 15, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 16: {'id': 16, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:49:29,229 - INFO - Invalidating intention 16 ...
2024-10-30 18:49:36,163 - INFO - Testing intention 
def function():
    global belief_set
    agent = belief_set['agent'][1]
    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
    if agent['parcels_carried_ids']:
        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
            function_1()
        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
            function_2()
        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
            function_3()
        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
            function_4()
        if agent['coordinates'] == delivery_cell['cell_coordinates']:
            function_6()
2024-10-30 18:49:36,163 - INFO - The intention is valid.
2024-10-30 18:49:36,177 - INFO - Intention added to desire 4
2024-10-30 18:49:36,177 - INFO - Running intention 17 ...
2024-10-30 18:49:36,358 - INFO - Belief set thread started ...
2024-10-30 18:49:36,377 - INFO - Plan thread started ...
2024-10-30 18:49:36,377 - INFO - Started subprocess...
2024-10-30 18:49:36,421 - INFO - Belief set before intention 17 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 280}}, 'parcels': {15: {'id': 15, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 16: {'id': 16, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 17: {'id': 17, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:49:36,731 - INFO - Belief set thread terminated.
2024-10-30 18:49:36,792 - INFO - Plan thread terminated.
2024-10-30 18:49:36,824 - INFO - Intention 17 execution has finished. Threads and subprocess terminated. Plan: []. Events: []
2024-10-30 18:49:36,824 - INFO - Belief set after intention 17 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 280}}, 'parcels': {15: {'id': 15, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 16: {'id': 16, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 17: {'id': 17, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:49:41,089 - INFO - Invalidating intention 17 ...
2024-10-30 18:49:41,121 - INFO - Invalidating intention 1 ...
2024-10-30 18:49:41,121 - INFO - Intention 1 is a base action. It cannot be invalidated.
2024-10-30 18:49:41,121 - INFO - Invalidating intention 2 ...
2024-10-30 18:49:41,121 - INFO - Intention 2 is a base action. It cannot be invalidated.
2024-10-30 18:49:41,121 - INFO - Invalidating intention 3 ...
2024-10-30 18:49:41,121 - INFO - Intention 3 is a base action. It cannot be invalidated.
2024-10-30 18:49:41,140 - INFO - Invalidating intention 4 ...
2024-10-30 18:49:41,140 - INFO - Intention 4 is a base action. It cannot be invalidated.
2024-10-30 18:49:41,140 - INFO - Invalidating intention 6 ...
2024-10-30 18:49:41,140 - INFO - Intention 6 is a base action. It cannot be invalidated.
2024-10-30 18:49:50,572 - INFO - Checking if a desire has been triggered ...
Desires: 
Desire 1: The agent's long-term goal is to strategically navigate the map, avoid non-walkable cells, pick up parcels from the parcel spawn location and deliver them to the delivery cell to maximize the overall score.
    Intention ID: [7]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_7():
                    global belief_set
                    agent_location = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    while agent_location != parcel_spawn_location:
                        if agent_location[0] > parcel_spawn_location[0]:
                            function_1()
                        elif agent_location[0] < parcel_spawn_location[0]:
                            function_2()
                        if agent_location[1] > parcel_spawn_location[1]:
                            function_3()
                        elif agent_location[1] < parcel_spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    if len(belief_set['parcels']) > 0 or len(belief_set['agent'][1][
        'parcels_carried_ids']) > 0:
        return True
    else:
        return False



Desire 2: The agent's long-term goal is to efficiently memorize the layout of the map, anticipate the spawning of parcels, and plan the fastest routes from the parcel spawn location to the delivery cell while avoiding non-walkable cells to minimize delivery time and increase the score.
    Intention ID: [8]
    Executable: False
    Description: The agent's short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_8():
                    global belief_set
                    parcel_spawn = [cell['cell_coordinates'] for cell in belief_set['map'][
                        'grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != parcel_spawn:
                        if agent_coordinates[0] < parcel_spawn[0]:
                            function_2()
                        elif agent_coordinates[0] > parcel_spawn[0]:
                            function_1()
                        if agent_coordinates[1] < parcel_spawn[1]:
                            function_4()
                        elif agent_coordinates[1] > parcel_spawn[1]:
                            function_3()
                    function_5()
                    while agent_coordinates != delivery_cell:
                        if agent_coordinates[0] < delivery_cell[0]:
                            function_2()
                        elif agent_coordinates[0] > delivery_cell[0]:
                            function_1()
                        if agent_coordinates[1] < delivery_cell[1]:
                            function_4()
                        elif agent_coordinates[1] > delivery_cell[1]:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel while ensuring that the agent's coordinates are updated after each move to avoid entering an infinite loop.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (parcel_spawn[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (parcel_spawn['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (delivery_cell[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (delivery_cell['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent's short-term goal is to navigate through the map, pick up the parcels at the spawn location, and then move to the delivery cell to drop the parcels, distinguishing between walkable and delivery cells.
                def function_10():
                    global belief_set
                    parcel_spawn = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_cell = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != parcel_spawn:
                        if parcel_spawn[0] < agent_location[0]:
                            function_1()
                        elif parcel_spawn[0] > agent_location[0]:
                            function_2()
                        elif parcel_spawn[1] < agent_location[1]:
                            function_3()
                        elif parcel_spawn[1] > agent_location[1]:
                            function_4()
                    function_5()
                    while agent_location != delivery_cell:
                        if delivery_cell[0] < agent_location[0]:
                            function_1()
                        elif delivery_cell[0] > agent_location[0]:
                            function_2()
                        elif delivery_cell[1] < agent_location[1]:
                            function_3()
                        elif delivery_cell[1] > agent_location[1]:
                            function_4()
                    function_6()
                
Executable: False
Trigger function:
None


Desire 3: The agent's long term goal is to efficiently navigate the map, pick up parcels from the spawn point, and deliver them to the delivery cell while avoiding non-walkable areas.
    Intention ID: [11]
    Executable: False
    Description: The agent should move to a nearby parcel, pick it up, and move towards the delivery cell.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    for parcel_id, parcel_info in parcels.items():
                        if parcel_info['carried_by_id'] is None:
                            if parcel_info['coordinates'][0] < agent['coordinates'][0]:
                                function_1()
                                break
                            elif parcel_info['coordinates'][0] > agent['coordinates'][0]:
                                function_2()
                                break
                            elif parcel_info['coordinates'][1] < agent['coordinates'][1]:
                                function_3()
                                break
                            elif parcel_info['coordinates'][1] > agent['coordinates'][1]:
                                function_4()
                                break
                    function_5()
                    for cell_info in belief_set['map']['grid']:
                        if cell_info['cell_type'] == 'delivery_cell':
                            if cell_info['cell_coordinates'][0] < agent['coordinates'][0]:
                                function_1()
                                break
                            elif cell_info['cell_coordinates'][0] > agent['coordinates'][0]:
                                function_2()
                                break
                            elif cell_info['cell_coordinates'][1] < agent['coordinates'][1]:
                                function_3()
                                break
                            elif cell_info['cell_coordinates'][1] > agent['coordinates'][1]:
                                function_4()
                                break
                
    Intention ID: [12]
    Executable: True
    Description: The short term goal is to move the agent towards the parcel spawn point if it's not already there, and pick up the parcels present on the spawn point.
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    spawn_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    if agent['coordinates'] != spawn_point:
                        if agent['coordinates'][0] > spawn_point[0]:
                            function_1()
                        elif agent['coordinates'][0] < spawn_point[0]:
                            function_2()
                        elif agent['coordinates'][1] > spawn_point[1]:
                            function_3()
                        else:
                            function_4()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to have the agent move towards the delivery cell and deliver the parcels it's carrying.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map_grid = belief_set['map']['grid']
                    delivery_cell_coordinates = next(cell['cell_coordinates'] for cell in
                        map_grid if cell['cell_type'] == 'delivery_cell')
                    while agent['coordinates'] != delivery_cell_coordinates:
                        if agent['coordinates'][0] < delivery_cell_coordinates[0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell_coordinates[0]:
                            function_1()
                        if agent['coordinates'][1] < delivery_cell_coordinates[1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell_coordinates[1]:
                            function_3()
                    function_6()
                
    Intention ID: [14]
    Executable: True
    Description: The agent's short term goal is to safely navigate towards the parcel spawn point, pick up all parcels at the spawn point, and then navigate towards the delivery cell avoiding any non-walkable areas.
                def function_14():
                    global belief_set
                    spawn_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != spawn_point:
                        if agent_location[0] < spawn_point[0]:
                            function_2()
                        elif agent_location[0] > spawn_point[0]:
                            function_1()
                        elif agent_location[1] < spawn_point[1]:
                            function_4()
                        else:
                            function_3()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_point:
                        if agent_location[0] < delivery_point[0]:
                            function_2()
                        elif agent_location[0] > delivery_point[0]:
                            function_1()
                        elif agent_location[1] < delivery_point[1]:
                            function_4()
                        else:
                            function_3()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if len(belief_set['parcels']) == 0:
        return False
    agent_coords = belief_set['agent'][1]['coordinates']
    for cell in belief_set['map']['grid']:
        if cell['cell_type'] == 'non_walkable' and cell['cell_coordinates'
            ] == agent_coords:
            return False
    return True



Desire 4: The agent's long term goal is to develop an optimal path planning strategy that minimizes total travel distance while maximizing the number of parcels delivered.
    Intention ID: [15]
    Executable: False
    Description: The short term goal is to have the agent move to the nearest parcel if it's not carrying any parcel, pick it up and then move to the delivery cell to deliver the parcel.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    if not agent['parcels_carried_ids']:
                        if agent['coordinates'][0] < parcel_spawn[0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn[0]:
                            function_1()
                        elif agent['coordinates'][1] < parcel_spawn[1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn[1]:
                            function_3()
                        else:
                            function_5()
                    elif agent['coordinates'][0] < delivery_cell[0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell[0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell[1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell[1]:
                        function_3()
                    else:
                        function_6()
                
    Intention ID: [16]
    Executable: False
    Description: The short term goal is to have the agent move towards the nearest parcel, pick it up, and then move towards the delivery cell to drop off the parcel.
                def function_16():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcels_coordinates = [p['coordinates'] for p in belief_set['parcels'].
                        values() if p['carried_by_id'] == None]
                    parcel_coordinates = min(parcels_coordinates, key=lambda c: abs(c[0] -
                        agent_coordinates[0]) + abs(c[1] - agent_coordinates[1]))
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                    function_5()
                    delivery_coordinates = [cell['cell_coordinates'] for cell in belief_set
                        ['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    while agent_coordinates != delivery_coordinates:
                        if agent_coordinates[0] > delivery_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[0] < delivery_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[1] > delivery_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                        elif agent_coordinates[1] < delivery_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                    function_6()
                
    Intention ID: [17]
    Executable: False
    Description: The short term goal is to have the agent navigate towards the delivery cell if it is carrying parcels, and drop them off when it reaches the delivery cell.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    if agent['parcels_carried_ids']:
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        if agent['coordinates'] == delivery_cell['cell_coordinates']:
                            function_6()
                
Executable: False
Trigger function:
None



2024-10-30 18:49:50,572 - INFO - Desires triggered: []. Now randomly choosing which one to run.
2024-10-30 18:49:50,572 - INFO - No desire has been triggered.
2024-10-30 18:49:50,572 - INFO - No desire triggered.
2024-10-30 18:49:52,414 - INFO - Desire added: 5. Desires:
Desire 1: The agent's long-term goal is to strategically navigate the map, avoid non-walkable cells, pick up parcels from the parcel spawn location and deliver them to the delivery cell to maximize the overall score.
    Intention ID: [7]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_7():
                    global belief_set
                    agent_location = belief_set['agent'][1]['coordinates']
                    parcel_spawn_location = [cell['cell_coordinates'] for cell in
                        belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_location = [cell['cell_coordinates'] for cell in belief_set[
                        'map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    while agent_location != parcel_spawn_location:
                        if agent_location[0] > parcel_spawn_location[0]:
                            function_1()
                        elif agent_location[0] < parcel_spawn_location[0]:
                            function_2()
                        if agent_location[1] > parcel_spawn_location[1]:
                            function_3()
                        elif agent_location[1] < parcel_spawn_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_location:
                        if agent_location[0] > delivery_location[0]:
                            function_1()
                        elif agent_location[0] < delivery_location[0]:
                            function_2()
                        if agent_location[1] > delivery_location[1]:
                            function_3()
                        elif agent_location[1] < delivery_location[1]:
                            function_4()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_1(belief_set):
    if len(belief_set['parcels']) > 0 or len(belief_set['agent'][1][
        'parcels_carried_ids']) > 0:
        return True
    else:
        return False



Desire 2: The agent's long-term goal is to efficiently memorize the layout of the map, anticipate the spawning of parcels, and plan the fastest routes from the parcel spawn location to the delivery cell while avoiding non-walkable cells to minimize delivery time and increase the score.
    Intention ID: [8]
    Executable: False
    Description: The agent's short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel.
                def function_8():
                    global belief_set
                    parcel_spawn = [cell['cell_coordinates'] for cell in belief_set['map'][
                        'grid'] if cell['cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                        ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    while agent_coordinates != parcel_spawn:
                        if agent_coordinates[0] < parcel_spawn[0]:
                            function_2()
                        elif agent_coordinates[0] > parcel_spawn[0]:
                            function_1()
                        if agent_coordinates[1] < parcel_spawn[1]:
                            function_4()
                        elif agent_coordinates[1] > parcel_spawn[1]:
                            function_3()
                    function_5()
                    while agent_coordinates != delivery_cell:
                        if agent_coordinates[0] < delivery_cell[0]:
                            function_2()
                        elif agent_coordinates[0] > delivery_cell[0]:
                            function_1()
                        if agent_coordinates[1] < delivery_cell[1]:
                            function_4()
                        elif agent_coordinates[1] > delivery_cell[1]:
                            function_3()
                    function_6()
                
    Intention ID: [9]
    Executable: False
    Description: The short-term goal is to navigate towards the parcel spawn location, pick up the parcel, and then move to the delivery cell to drop the parcel while ensuring that the agent's coordinates are updated after each move to avoid entering an infinite loop.
                def function_9():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    while agent['coordinates'] != parcel_spawn['cell_coordinates']:
                        if agent['coordinates'][0] < parcel_spawn['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < parcel_spawn['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (parcel_spawn[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (parcel_spawn['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_5()
                    while agent['coordinates'] != delivery_cell['cell_coordinates']:
                        if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        if agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        agent['coordinates'] = [agent['coordinates'][0] + (delivery_cell[
                            'cell_coordinates'][0] - agent['coordinates'][0]), agent[
                            'coordinates'][1] + (delivery_cell['cell_coordinates'][1] -
                            agent['coordinates'][1])]
                    function_6()
                
    Intention ID: [10]
    Executable: False
    Description: The agent's short-term goal is to navigate through the map, pick up the parcels at the spawn location, and then move to the delivery cell to drop the parcels, distinguishing between walkable and delivery cells.
                def function_10():
                    global belief_set
                    parcel_spawn = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_cell = [item for item in belief_set['map']['grid'] if item[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != parcel_spawn:
                        if parcel_spawn[0] < agent_location[0]:
                            function_1()
                        elif parcel_spawn[0] > agent_location[0]:
                            function_2()
                        elif parcel_spawn[1] < agent_location[1]:
                            function_3()
                        elif parcel_spawn[1] > agent_location[1]:
                            function_4()
                    function_5()
                    while agent_location != delivery_cell:
                        if delivery_cell[0] < agent_location[0]:
                            function_1()
                        elif delivery_cell[0] > agent_location[0]:
                            function_2()
                        elif delivery_cell[1] < agent_location[1]:
                            function_3()
                        elif delivery_cell[1] > agent_location[1]:
                            function_4()
                    function_6()
                
Executable: False
Trigger function:
None


Desire 3: The agent's long term goal is to efficiently navigate the map, pick up parcels from the spawn point, and deliver them to the delivery cell while avoiding non-walkable areas.
    Intention ID: [11]
    Executable: False
    Description: The agent should move to a nearby parcel, pick it up, and move towards the delivery cell.
                def function_11():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcels = belief_set['parcels']
                    for parcel_id, parcel_info in parcels.items():
                        if parcel_info['carried_by_id'] is None:
                            if parcel_info['coordinates'][0] < agent['coordinates'][0]:
                                function_1()
                                break
                            elif parcel_info['coordinates'][0] > agent['coordinates'][0]:
                                function_2()
                                break
                            elif parcel_info['coordinates'][1] < agent['coordinates'][1]:
                                function_3()
                                break
                            elif parcel_info['coordinates'][1] > agent['coordinates'][1]:
                                function_4()
                                break
                    function_5()
                    for cell_info in belief_set['map']['grid']:
                        if cell_info['cell_type'] == 'delivery_cell':
                            if cell_info['cell_coordinates'][0] < agent['coordinates'][0]:
                                function_1()
                                break
                            elif cell_info['cell_coordinates'][0] > agent['coordinates'][0]:
                                function_2()
                                break
                            elif cell_info['cell_coordinates'][1] < agent['coordinates'][1]:
                                function_3()
                                break
                            elif cell_info['cell_coordinates'][1] > agent['coordinates'][1]:
                                function_4()
                                break
                
    Intention ID: [12]
    Executable: True
    Description: The short term goal is to move the agent towards the parcel spawn point if it's not already there, and pick up the parcels present on the spawn point.
                def function_12():
                    global belief_set
                    agent = belief_set['agent'][1]
                    spawn_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    if agent['coordinates'] != spawn_point:
                        if agent['coordinates'][0] > spawn_point[0]:
                            function_1()
                        elif agent['coordinates'][0] < spawn_point[0]:
                            function_2()
                        elif agent['coordinates'][1] > spawn_point[1]:
                            function_3()
                        else:
                            function_4()
                    function_5()
                
    Intention ID: [13]
    Executable: False
    Description: The short term goal is to have the agent move towards the delivery cell and deliver the parcels it's carrying.
                def function_13():
                    global belief_set
                    agent = belief_set['agent'][1]
                    map_grid = belief_set['map']['grid']
                    delivery_cell_coordinates = next(cell['cell_coordinates'] for cell in
                        map_grid if cell['cell_type'] == 'delivery_cell')
                    while agent['coordinates'] != delivery_cell_coordinates:
                        if agent['coordinates'][0] < delivery_cell_coordinates[0]:
                            function_2()
                        elif agent['coordinates'][0] > delivery_cell_coordinates[0]:
                            function_1()
                        if agent['coordinates'][1] < delivery_cell_coordinates[1]:
                            function_4()
                        elif agent['coordinates'][1] > delivery_cell_coordinates[1]:
                            function_3()
                    function_6()
                
    Intention ID: [14]
    Executable: True
    Description: The agent's short term goal is to safely navigate towards the parcel spawn point, pick up all parcels at the spawn point, and then navigate towards the delivery cell avoiding any non-walkable areas.
                def function_14():
                    global belief_set
                    spawn_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_point = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    agent_location = belief_set['agent'][1]['coordinates']
                    while agent_location != spawn_point:
                        if agent_location[0] < spawn_point[0]:
                            function_2()
                        elif agent_location[0] > spawn_point[0]:
                            function_1()
                        elif agent_location[1] < spawn_point[1]:
                            function_4()
                        else:
                            function_3()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_5()
                    while agent_location != delivery_point:
                        if agent_location[0] < delivery_point[0]:
                            function_2()
                        elif agent_location[0] > delivery_point[0]:
                            function_1()
                        elif agent_location[1] < delivery_point[1]:
                            function_4()
                        else:
                            function_3()
                        agent_location = belief_set['agent'][1]['coordinates']
                    function_6()
                
Executable: False
Trigger function:
def function_dtf_2(belief_set):
    if len(belief_set['parcels']) == 0:
        return False
    agent_coords = belief_set['agent'][1]['coordinates']
    for cell in belief_set['map']['grid']:
        if cell['cell_type'] == 'non_walkable' and cell['cell_coordinates'
            ] == agent_coords:
            return False
    return True



Desire 4: The agent's long term goal is to develop an optimal path planning strategy that minimizes total travel distance while maximizing the number of parcels delivered.
    Intention ID: [15]
    Executable: False
    Description: The short term goal is to have the agent move to the nearest parcel if it's not carrying any parcel, pick it up and then move to the delivery cell to deliver the parcel.
                def function_15():
                    global belief_set
                    agent = belief_set['agent'][1]
                    parcel_spawn = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'parcels_spawn'][0]['cell_coordinates']
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
                    if not agent['parcels_carried_ids']:
                        if agent['coordinates'][0] < parcel_spawn[0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_spawn[0]:
                            function_1()
                        elif agent['coordinates'][1] < parcel_spawn[1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_spawn[1]:
                            function_3()
                        else:
                            function_5()
                    elif agent['coordinates'][0] < delivery_cell[0]:
                        function_2()
                    elif agent['coordinates'][0] > delivery_cell[0]:
                        function_1()
                    elif agent['coordinates'][1] < delivery_cell[1]:
                        function_4()
                    elif agent['coordinates'][1] > delivery_cell[1]:
                        function_3()
                    else:
                        function_6()
                
    Intention ID: [16]
    Executable: False
    Description: The short term goal is to have the agent move towards the nearest parcel, pick it up, and then move towards the delivery cell to drop off the parcel.
                def function_16():
                    global belief_set
                    agent_coordinates = belief_set['agent'][1]['coordinates']
                    parcels_coordinates = [p['coordinates'] for p in belief_set['parcels'].
                        values() if p['carried_by_id'] == None]
                    parcel_coordinates = min(parcels_coordinates, key=lambda c: abs(c[0] -
                        agent_coordinates[0]) + abs(c[1] - agent_coordinates[1]))
                    while agent_coordinates != parcel_coordinates:
                        if agent_coordinates[0] > parcel_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[0] < parcel_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[1] > parcel_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                        elif agent_coordinates[1] < parcel_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                    function_5()
                    delivery_coordinates = [cell['cell_coordinates'] for cell in belief_set
                        ['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
                    while agent_coordinates != delivery_coordinates:
                        if agent_coordinates[0] > delivery_coordinates[0]:
                            function_1()
                            agent_coordinates[0] -= 1
                        elif agent_coordinates[0] < delivery_coordinates[0]:
                            function_2()
                            agent_coordinates[0] += 1
                        elif agent_coordinates[1] > delivery_coordinates[1]:
                            function_3()
                            agent_coordinates[1] -= 1
                        elif agent_coordinates[1] < delivery_coordinates[1]:
                            function_4()
                            agent_coordinates[1] += 1
                    function_6()
                
    Intention ID: [17]
    Executable: False
    Description: The short term goal is to have the agent navigate towards the delivery cell if it is carrying parcels, and drop them off when it reaches the delivery cell.
                def function_17():
                    global belief_set
                    agent = belief_set['agent'][1]
                    delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                        'cell_type'] == 'delivery_cell'][0]
                    if agent['parcels_carried_ids']:
                        if agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                            function_1()
                        elif agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                            function_2()
                        elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                            function_3()
                        elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                            function_4()
                        if agent['coordinates'] == delivery_cell['cell_coordinates']:
                            function_6()
                
Executable: False
Trigger function:
None


Desire 5: The agent's long-term goal is to optimize its path across the grid to pick up as many parcels as possible and deliver them to the delivery cell in the least amount of time.
Executable: False
Trigger function:
None



2024-10-30 18:49:56,747 - INFO - Testing intention 
def function():
    global belief_set
    function_12()
    # Check if the agent is carrying any parcels
    if belief_set['agent'][1]['parcels_carried_ids']:
        function_14()
        function_6()
    else:
        # If not carrying any parcels, repeat the process
        function()
2024-10-30 18:49:56,747 - INFO - The intention is valid.
2024-10-30 18:49:56,747 - INFO - Intention added to desire 5
2024-10-30 18:49:56,753 - INFO - Running intention 18 ...
2024-10-30 18:49:56,948 - INFO - Belief set thread started ...
2024-10-30 18:49:56,960 - INFO - Plan thread started ...
2024-10-30 18:49:56,967 - INFO - Started subprocess...
2024-10-30 18:49:56,979 - INFO - Belief set before intention 18 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 280}}, 'parcels': {15: {'id': 15, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 16: {'id': 16, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 17: {'id': 17, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 18: {'id': 18, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:49:57,332 - INFO - Executing action action_1 ...
2024-10-30 18:49:57,541 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:49:57,877 - INFO - Executing action action_5 ...
2024-10-30 18:49:58,129 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:49:58,561 - INFO - Executing action action_1 ...
2024-10-30 18:49:58,803 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:49:59,117 - INFO - Executing action action_5 ...
2024-10-30 18:49:59,391 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:49:59,639 - INFO - Executing action action_1 ...
2024-10-30 18:49:59,842 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:50:00,094 - INFO - Executing action action_5 ...
2024-10-30 18:50:00,300 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:50:00,557 - INFO - Executing action action_1 ...
2024-10-30 18:50:00,761 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:50:01,041 - INFO - Executing action action_5 ...
2024-10-30 18:50:01,246 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:50:01,502 - INFO - Executing action action_1 ...
2024-10-30 18:50:01,705 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:50:01,961 - INFO - Executing action action_5 ...
2024-10-30 18:50:02,164 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:50:02,395 - INFO - Executing action action_1 ...
2024-10-30 18:50:02,598 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:50:02,847 - INFO - Executing action action_5 ...
2024-10-30 18:50:03,053 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:50:03,302 - INFO - Executing action action_1 ...
2024-10-30 18:50:03,505 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:50:03,755 - INFO - Executing action action_5 ...
2024-10-30 18:50:03,960 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:50:04,215 - INFO - Executing action action_1 ...
2024-10-30 18:50:04,415 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:50:04,672 - INFO - Executing action action_5 ...
2024-10-30 18:50:04,875 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:50:05,131 - INFO - Executing action action_1 ...
2024-10-30 18:50:05,337 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:50:05,594 - INFO - Executing action action_5 ...
2024-10-30 18:50:05,797 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:50:06,028 - INFO - Executing action action_1 ...
2024-10-30 18:50:06,233 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:50:06,486 - INFO - Executing action action_5 ...
2024-10-30 18:50:06,692 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:50:06,922 - INFO - Executing action action_1 ...
2024-10-30 18:50:07,128 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:50:07,381 - INFO - Executing action action_5 ...
2024-10-30 18:50:07,586 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:50:07,840 - INFO - Executing action action_1 ...
2024-10-30 18:50:08,046 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:50:08,322 - INFO - Executing action action_5 ...
2024-10-30 18:50:08,527 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:50:08,778 - INFO - Executing action action_1 ...
2024-10-30 18:50:08,983 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:50:09,238 - INFO - Executing action action_5 ...
2024-10-30 18:50:09,443 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:50:09,698 - INFO - Executing action action_1 ...
2024-10-30 18:50:09,903 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:50:10,179 - INFO - Executing action action_5 ...
2024-10-30 18:50:10,385 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:50:10,639 - INFO - Executing action action_1 ...
2024-10-30 18:50:10,845 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:50:11,100 - INFO - Executing action action_5 ...
2024-10-30 18:50:11,306 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:50:11,561 - INFO - Executing action action_1 ...
2024-10-30 18:50:11,764 - INFO - Action action_1 executed. Events received: []
2024-10-30 18:50:12,015 - INFO - Executing action action_5 ...
2024-10-30 18:50:12,034 - ERROR - Error during intention 18 execution. Intention 18 will be invalidated. Error: Command '['python3', 'agent_dir/functions/agent_1/functions.py']' timed out after 15 seconds
2024-10-30 18:50:12,047 - INFO - Belief set thread terminated.
2024-10-30 18:50:12,220 - INFO - Action action_5 executed. Events received: []
2024-10-30 18:50:12,448 - INFO - Plan thread terminated.
2024-10-30 18:50:12,448 - INFO - Intention 18 execution has finished. Threads and subprocess terminated. Plan: ['action_1', 'action_5', 'action_1', 'action_5', 'action_1', 'action_5', 'action_1', 'action_5', 'action_1', 'action_5', 'action_1', 'action_5', 'action_1', 'action_5', 'action_1', 'action_5', 'action_1', 'action_5', 'action_1', 'action_5', 'action_1', 'action_5', 'action_1', 'action_5', 'action_1', 'action_5', 'action_1', 'action_5', 'action_1', 'action_5', 'action_1', 'action_5']. Events: [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]
2024-10-30 18:50:12,449 - INFO - Belief set after intention 18 execution:
{'map': {'width': 4, 'height': 4, 'grid': [{'cell_coordinates': [0, 0], 'cell_type': 'parcels_spawn'}, {'cell_coordinates': [0, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [0, 3], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 0], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 1], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 2], 'cell_type': 'walkable'}, {'cell_coordinates': [1, 3], 'cell_type': 'delivery_cell'}, {'cell_coordinates': [2, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [2, 3], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 0], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 1], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 2], 'cell_type': 'non_walkable'}, {'cell_coordinates': [3, 3], 'cell_type': 'non_walkable'}]}, 'agent': {1: {'id': 1, 'coordinates': [1, 3], 'parcels_carried_ids': [], 'score': 280}}, 'parcels': {15: {'id': 15, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 16: {'id': 16, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 17: {'id': 17, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}, 18: {'id': 18, 'coordinates': [0, 0], 'score': 20, 'carried_by_id': None}}}
2024-10-30 18:50:12,452 - INFO - Invalidating intention 18 ...
