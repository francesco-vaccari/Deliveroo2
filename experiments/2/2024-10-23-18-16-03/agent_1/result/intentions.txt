
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        
[7]
Executable: False
Description: The short term goal is to move the agent to the nearest key if it doesn't have a key, pick up the key, and then move towards the nearest door to open it.
        def function_7():
            global belief_set
            agent = belief_set['agent']
            keys = belief_set['keys']
            doors = belief_set['doors']
            if not agent['has_key']:
                nearest_key = min(keys.values(), key=lambda k: abs(k['coordinates']
                    [0] - agent['coordinates'][0]) + abs(k['coordinates'][1] -
                    agent['coordinates'][1]))
                if agent['coordinates'][0] > nearest_key['coordinates'][0]:
                    function_1()
                elif agent['coordinates'][0] < nearest_key['coordinates'][0]:
                    function_2()
                elif agent['coordinates'][1] > nearest_key['coordinates'][1]:
                    function_3()
                elif agent['coordinates'][1] < nearest_key['coordinates'][1]:
                    function_4()
                function_5()
            nearest_door = min(doors.values(), key=lambda d: abs(d['coordinates'][0
                ] - agent['coordinates'][0]) + abs(d['coordinates'][1] - agent[
                'coordinates'][1]))
            if agent['coordinates'][0] > nearest_door['coordinates'][0]:
                function_1()
            elif agent['coordinates'][0] < nearest_door['coordinates'][0]:
                function_2()
            elif agent['coordinates'][1] > nearest_door['coordinates'][1]:
                function_3()
            elif agent['coordinates'][1] < nearest_door['coordinates'][1]:
                function_4()
        
[8]
Executable: False
Description: The agent's short term goal is to move towards and pick up the parcel in its vicinity.
        def function_8():
            global belief_set
            parcel_coordinates = belief_set['parcels'][1]['coordinates']
            agent_coordinates = belief_set['agent']['coordinates']
            while parcel_coordinates != agent_coordinates:
                if parcel_coordinates[0] < agent_coordinates[0]:
                    function_1()
                elif parcel_coordinates[0] > agent_coordinates[0]:
                    function_2()
                if parcel_coordinates[1] < agent_coordinates[1]:
                    function_3()
                elif parcel_coordinates[1] > agent_coordinates[1]:
                    function_4()
            function_5()
        
[9]
Executable: False
Description: The agent's short term goal is to move towards and pick up the nearest parcel, whilst avoiding non-walkable cells.
        def function_9():
            global belief_set
            agent_coordinates = belief_set['agent']['coordinates']
            parcels = belief_set['parcels']
            closest_parcel_id = min(parcels, key=lambda x: abs(parcels[x][
                'coordinates'][0] - agent_coordinates[0]) + abs(parcels[x][
                'coordinates'][1] - agent_coordinates[1]))
            closest_parcel = parcels[closest_parcel_id]
            while agent_coordinates != closest_parcel['coordinates']:
                if agent_coordinates[0] < closest_parcel['coordinates'][0]:
                    function_2()
                    agent_coordinates[0] += 1
                elif agent_coordinates[0] > closest_parcel['coordinates'][0]:
                    function_1()
                    agent_coordinates[0] -= 1
                if agent_coordinates[1] < closest_parcel['coordinates'][1]:
                    function_4()
                    agent_coordinates[1] += 1
                elif agent_coordinates[1] > closest_parcel['coordinates'][1]:
                    function_3()
                    agent_coordinates[1] -= 1
            function_5()
        
[10]
Executable: False
Description: The agent's short term goal is to move towards the delivery cell while carrying parcels and to drop them there.
        def function_10():
            global belief_set
            delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
            agent_coordinates = belief_set['agent']['coordinates']
            if agent_coordinates[0] > delivery_cell[0]:
                function_1()
            elif agent_coordinates[0] < delivery_cell[0]:
                function_2()
            elif agent_coordinates[1] > delivery_cell[1]:
                function_3()
            elif agent_coordinates[1] < delivery_cell[1]:
                function_4()
            else:
                function_6()
        
[11]
Executable: False
Description: The agent's short term goal is to move towards the delivery cell while carrying the parcel.
        def function_11():
            global belief_set
            delivery_cell = next(cell for cell in belief_set['map']['grid'] if cell
                ['cell_type'] == 'delivery_cell')
            agent = belief_set['agent']
            if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                function_2()
            elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                function_1()
            elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                function_4()
            else:
                function_3()
        
[12]
Executable: True
Description: The agent's short term goal is to deliver the parcel it is carrying to the delivery cell.
        def function_12():
            global belief_set
            delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
            while belief_set['agent']['coordinates'] != delivery_cell:
                if belief_set['agent']['coordinates'][1] < delivery_cell[1]:
                    function_4()
                else:
                    function_3()
            function_6()
        
