
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        
[7]
Executable: False
Description: The short term goal is to move the agent towards the parcel by one cell if the parcel is not in the same cell as the agent.
        def function_7():
            global belief_set
            agent_coordinates = belief_set['agent']['coordinates']
            parcel_coordinates = belief_set['parcel'][1]['coordinates']
            if agent_coordinates[0] > parcel_coordinates[0]:
                function_1()
            elif agent_coordinates[0] < parcel_coordinates[0]:
                function_2()
            elif agent_coordinates[1] > parcel_coordinates[1]:
                function_3()
            elif agent_coordinates[1] < parcel_coordinates[1]:
                function_4()
        
[8]
Executable: False
Description: The short term goal is to move towards the parcel, pick it up, and then proceed towards the delivery cell to drop the parcel.
        def function_8():
            global belief_set
            while belief_set['agent']['coordinates'][0] > belief_set['parcel'][1][
                'coordinates'][0]:
                function_1()
            while belief_set['agent']['coordinates'][0] < belief_set['parcel'][1][
                'coordinates'][0]:
                function_2()
            while belief_set['agent']['coordinates'][1] > belief_set['parcel'][1][
                'coordinates'][1]:
                function_3()
            while belief_set['agent']['coordinates'][1] < belief_set['parcel'][1][
                'coordinates'][1]:
                function_4()
            function_5()
            while belief_set['agent']['coordinates'][0] > belief_set['map']['grid'][7][
                'cell_coordinates'][0]:
                function_1()
            while belief_set['agent']['coordinates'][0] < belief_set['map']['grid'][7][
                'cell_coordinates'][0]:
                function_2()
            while belief_set['agent']['coordinates'][1] > belief_set['map']['grid'][7][
                'cell_coordinates'][1]:
                function_3()
            while belief_set['agent']['coordinates'][1] < belief_set['map']['grid'][7][
                'cell_coordinates'][1]:
                function_4()
            function_6()
        
[9]
Executable: False
Description: The short term goal is to move the agent towards the parcel if it is not carrying any, pick it up, and then proceed towards the delivery cell to drop the parcel.
        def function_9():
            global belief_set
            parcel_coordinates = belief_set['parcel'][1]['coordinates']
            agent_coordinates = belief_set['agent']['coordinates']
            delivery_coordinates = [i for i in belief_set['map']['grid'] if i[
                'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
            while agent_coordinates != parcel_coordinates:
                if agent_coordinates[0] < parcel_coordinates[0]:
                    function_2()
                elif agent_coordinates[0] > parcel_coordinates[0]:
                    function_1()
                elif agent_coordinates[1] < parcel_coordinates[1]:
                    function_4()
                elif agent_coordinates[1] > parcel_coordinates[1]:
                    function_3()
                agent_coordinates = belief_set['agent']['coordinates']
            function_5()
            while agent_coordinates != delivery_coordinates:
                if agent_coordinates[0] < delivery_coordinates[0]:
                    function_2()
                elif agent_coordinates[0] > delivery_coordinates[0]:
                    function_1()
                elif agent_coordinates[1] < delivery_coordinates[1]:
                    function_4()
                elif agent_coordinates[1] > delivery_coordinates[1]:
                    function_3()
                agent_coordinates = belief_set['agent']['coordinates']
            function_6()
        
[10]
Executable: False
Description: The short term goal is to move the agent to the delivery cell and deliver all the parcels it is carrying. The function will navigate the agent through the map, avoiding non-walkable cells, to reach the delivery cell and then use the function to drop all the parcels.
        def function_10():
            global belief_set
            delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
            while belief_set['agent']['coordinates'] != delivery_cell:
                if belief_set['agent']['coordinates'][0] > delivery_cell[0]:
                    function_1()
                elif belief_set['agent']['coordinates'][0] < delivery_cell[0]:
                    function_2()
                elif belief_set['agent']['coordinates'][1] > delivery_cell[1]:
                    function_3()
                elif belief_set['agent']['coordinates'][1] < delivery_cell[1]:
                    function_4()
            function_6()
        
[11]
Executable: False
Description: The agent's short term goal is to move to the delivery cell while avoiding non-walkable cells and deliver the parcel it is carrying.
        def function_11():
            global belief_set
            delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
            agent_coordinates = belief_set['agent']['coordinates']
            max_attempts = 10
            attempts = 0
            while agent_coordinates != delivery_cell and attempts < max_attempts:
                if agent_coordinates[0] < delivery_cell[0]:
                    if {'cell_coordinates': [agent_coordinates[0] + 1,
                        agent_coordinates[1]], 'cell_type': 'non_walkable'
                        } not in belief_set['map']['grid']:
                        function_2()
                elif agent_coordinates[0] > delivery_cell[0]:
                    if {'cell_coordinates': [agent_coordinates[0] - 1,
                        agent_coordinates[1]], 'cell_type': 'non_walkable'
                        } not in belief_set['map']['grid']:
                        function_1()
                if agent_coordinates[1] < delivery_cell[1]:
                    if {'cell_coordinates': [agent_coordinates[0], 
                        agent_coordinates[1] + 1], 'cell_type': 'non_walkable'
                        } not in belief_set['map']['grid']:
                        function_4()
                elif agent_coordinates[1] > delivery_cell[1]:
                    if {'cell_coordinates': [agent_coordinates[0], 
                        agent_coordinates[1] - 1], 'cell_type': 'non_walkable'
                        } not in belief_set['map']['grid']:
                        function_3()
                attempts += 1
            function_6()
            return
        
[12]
Executable: False
Description: The agent's short term goal is to pick up the parcel, navigate to the delivery cell, and deliver the parcel by dropping it at the delivery cell.
        def function_12():
            global belief_set
            agent_coords = belief_set['agent']['coordinates']
            parcel_coords = belief_set['parcel'][1]['coordinates']
            delivery_coords = [x for x in belief_set['map']['grid'] if x[
                'cell_type'] == 'delivery_cell'][0]['cell_coordinates']
            while agent_coords != parcel_coords:
                if agent_coords[0] < parcel_coords[0]:
                    function_2()
                elif agent_coords[0] > parcel_coords[0]:
                    function_1()
                elif agent_coords[1] < parcel_coords[1]:
                    function_4()
                else:
                    function_3()
            function_5()
            while agent_coords != delivery_coords:
                if agent_coords[0] < delivery_coords[0]:
                    function_2()
                elif agent_coords[0] > delivery_coords[0]:
                    function_1()
                elif agent_coords[1] < delivery_coords[1]:
                    function_4()
                else:
                    function_3()
            function_6()
        
[13]
Executable: False
Description: The short term goal is for the agent to deliver the parcel it's currently carrying to the delivery cell.
        def function_13():
            global belief_set
            agent = belief_set['agent']
            delivery_cell = [cell for cell in belief_set['map']['grid'] if cell[
                'cell_type'] == 'delivery_cell'][0]
            while agent['coordinates'] != delivery_cell['cell_coordinates']:
                if agent['coordinates'][0] < delivery_cell['cell_coordinates'][0]:
                    function_2()
                elif agent['coordinates'][0] > delivery_cell['cell_coordinates'][0]:
                    function_1()
                elif agent['coordinates'][1] < delivery_cell['cell_coordinates'][1]:
                    function_4()
                elif agent['coordinates'][1] > delivery_cell['cell_coordinates'][1]:
                    function_3()
            function_6()
        
[14]
Executable: False
Description: The agent's short term goal is to move towards the delivery cell while carrying a parcel, taking into account the boundaries of the map to avoid infinite loops. The agent will try to increase its second coordinate (y-axis) as much as possible to reach the top part of the map, where the delivery cell is located. If it reaches the top boundary, it will try to move horizontally towards the delivery cell.
        def function_14():
            global belief_set
            delivery_coordinates = [cell['cell_coordinates'] for cell in belief_set
                ['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
            agent_coordinates = belief_set['agent']['coordinates']
            max_iterations = belief_set['map']['width'] * belief_set['map']['height']
            counter = 0
            while (agent_coordinates != delivery_coordinates and counter <
                max_iterations):
                if agent_coordinates[1] < delivery_coordinates[1]:
                    function_4()
                elif agent_coordinates[0] < delivery_coordinates[0]:
                    function_2()
                else:
                    function_1()
                counter += 1
                agent_coordinates = belief_set['agent']['coordinates']
        
[15]
Executable: False
Description: The short term goal is for the agent to move one step closer to the delivery cell while avoiding non-walkable cells and picking up keys if necessary to open doors.
        def function_15():
            global belief_set
            agent = belief_set['agent']
            map_cells = belief_set['map']['grid']
            agent_coords = agent['coordinates']
            delivery_cell_coords = next(cell['cell_coordinates'] for cell in
                map_cells if cell['cell_type'] == 'delivery_cell')
            delta_x = delivery_cell_coords[0] - agent_coords[0]
            delta_y = delivery_cell_coords[1] - agent_coords[1]
            if delta_x > 0 and next(cell for cell in map_cells if cell[
                'cell_coordinates'] == [agent_coords[0] + 1, agent_coords[1]])[
                'cell_type'] == 'walkable':
                function_2()
            elif delta_x < 0 and next(cell for cell in map_cells if cell[
                'cell_coordinates'] == [agent_coords[0] - 1, agent_coords[1]])[
                'cell_type'] == 'walkable':
                function_1()
            elif delta_y > 0 and next(cell for cell in map_cells if cell[
                'cell_coordinates'] == [agent_coords[0], agent_coords[1] + 1])[
                'cell_type'] == 'walkable':
                function_4()
            elif delta_y < 0 and next(cell for cell in map_cells if cell[
                'cell_coordinates'] == [agent_coords[0], agent_coords[1] - 1])[
                'cell_type'] == 'walkable':
                function_3()
            if belief_set['key'][1]['coordinates'] == agent_coords and not agent[
                'has_key']:
                function_5()
        
[16]
Executable: False
Description: The short term goal is to move the agent towards the key, pick it up and then move towards the nearest door to unlock it.
        def function_16():
            global belief_set
            agent_coords = belief_set['agent']['coordinates']
            key_coords = belief_set['key'][1]['coordinates']
            while agent_coords[0] > key_coords[0]:
                function_1()
                agent_coords = belief_set['agent']['coordinates']
            while agent_coords[0] < key_coords[0]:
                function_2()
                agent_coords = belief_set['agent']['coordinates']
            while agent_coords[1] > key_coords[1]:
                function_3()
                agent_coords = belief_set['agent']['coordinates']
            while agent_coords[1] < key_coords[1]:
                function_4()
                agent_coords = belief_set['agent']['coordinates']
            function_5()
            min_distance = float('inf')
            nearest_door_coords = None
            for door_id, door_info in belief_set['door'].items():
                distance = abs(door_info['coordinates'][0] - agent_coords[0]) + abs(
                    door_info['coordinates'][1] - agent_coords[1])
                if distance < min_distance:
                    min_distance = distance
                    nearest_door_coords = door_info['coordinates']
            while agent_coords[0] > nearest_door_coords[0]:
                function_1()
                agent_coords = belief_set['agent']['coordinates']
            while agent_coords[0] < nearest_door_coords[0]:
                function_2()
                agent_coords = belief_set['agent']['coordinates']
            while agent_coords[1] > nearest_door_coords[1]:
                function_3()
                agent_coords = belief_set['agent']['coordinates']
            while agent_coords[1] < nearest_door_coords[1]:
                function_4()
                agent_coords = belief_set['agent']['coordinates']
        
[17]
Executable: True
Description: The agent's short term goal is to deliver the parcel it is currently carrying to the delivery cell.
        def function_17():
            global belief_set
            delivery_cell_coordinates = next(cell['cell_coordinates'] for cell in
                belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell')
            agent_coordinates = belief_set['agent']['coordinates']
            while agent_coordinates != delivery_cell_coordinates:
                if agent_coordinates[0] > delivery_cell_coordinates[0]:
                    function_1()
                elif agent_coordinates[0] < delivery_cell_coordinates[0]:
                    function_2()
                elif agent_coordinates[1] > delivery_cell_coordinates[1]:
                    function_3()
                elif agent_coordinates[1] < delivery_cell_coordinates[1]:
                    function_4()
                agent_coordinates = belief_set['agent']['coordinates']
            function_6()
        
[18]
Executable: False
Description: The agent's short term goal is to move towards the key, pick it up, and then move towards the door to unlock it.
        def function_18():
            global belief_set
            key_coords = belief_set['key'][1]['coordinates']
            agent_coords = belief_set['agent']['coordinates']
            while agent_coords != key_coords:
                if agent_coords[0] < key_coords[0]:
                    function_2()
                elif agent_coords[0] > key_coords[0]:
                    function_1()
                elif agent_coords[1] < key_coords[1]:
                    function_4()
                else:
                    function_3()
            function_5()
            door_coords = belief_set['door'][1]['coordinates']
            while agent_coords != door_coords:
                if agent_coords[0] < door_coords[0]:
                    function_2()
                elif agent_coords[0] > door_coords[0]:
                    function_1()
                elif agent_coords[1] < door_coords[1]:
                    function_4()
                else:
                    function_3()
            function_6()
        
[19]
Executable: False
Description: The short term goal is to have the agent move towards the delivery cell, and upon reaching the cell, it should deliver the parcel if it is carrying any.
        def function_19():
            global belief_set
            delivery_cell = [cell['cell_coordinates'] for cell in belief_set['map']
                ['grid'] if cell['cell_type'] == 'delivery_cell'][0]
            agent_coords = belief_set['agent']['coordinates']
            while agent_coords != delivery_cell:
                if agent_coords[0] > delivery_cell[0]:
                    function_1()
                elif agent_coords[0] < delivery_cell[0]:
                    function_2()
                elif agent_coords[1] > delivery_cell[1]:
                    function_3()
                elif agent_coords[1] < delivery_cell[1]:
                    function_4()
                agent_coords = belief_set['agent']['coordinates']
            if belief_set['agent']['parcels_carried_ids']:
                function_17()
        
[20]
Executable: False
Description: The short term goal is for the agent to move to the parcels_spawn cell, pick up a parcel, and then move to the delivery cell to deliver the parcel.
        def function_20():
            global belief_set
            spawn_cell_coordinates = [cell['cell_coordinates'] for cell in
                belief_set['map']['grid'] if cell['cell_type'] == 'parcels_spawn'][0]
            delivery_cell_coordinates = [cell['cell_coordinates'] for cell in
                belief_set['map']['grid'] if cell['cell_type'] == 'delivery_cell'][0]
            while belief_set['agent']['coordinates'] != spawn_cell_coordinates:
                if belief_set['agent']['coordinates'][0] < spawn_cell_coordinates[0]:
                    function_2()
                elif belief_set['agent']['coordinates'][0] > spawn_cell_coordinates[0]:
                    function_1()
                elif belief_set['agent']['coordinates'][1] < spawn_cell_coordinates[1]:
                    function_4()
                else:
                    function_3()
            function_5()
            while belief_set['agent']['coordinates'] != delivery_cell_coordinates:
                if belief_set['agent']['coordinates'][0] < delivery_cell_coordinates[0
                    ]:
                    function_2()
                elif belief_set['agent']['coordinates'][0] > delivery_cell_coordinates[
                    0]:
                    function_1()
                elif belief_set['agent']['coordinates'][1] < delivery_cell_coordinates[
                    1]:
                    function_4()
                else:
                    function_3()
            function_17()
        
