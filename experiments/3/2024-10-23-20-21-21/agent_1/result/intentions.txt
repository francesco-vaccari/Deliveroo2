
[1]
Executable: True
Description: This is a wrapper function for action_1. The agent moves by 1 cell, decreasing its first coordinate by 1.
        def function_1():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_1\n')
                f.close()
            wait()
        
        
[2]
Executable: True
Description: This is a wrapper function for action_2. The agent moves by 1 cell, increasing its first coordinate by 1.
        def function_2():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_2\n')
                f.close()
            wait()
        
        
[3]
Executable: True
Description: This is a wrapper function for action_3. The agent moves by 1 cell, decreasing its second coordinate by 1.
        def function_3():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_3\n')
                f.close()
            wait()
        
        
[4]
Executable: True
Description: This is a wrapper function for action_4. The agent moves by 1 cell, increasing its second coordinate by 1.
        def function_4():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_4\n')
                f.close()
            wait()
        
        
[5]
Executable: True
Description: This is a wrapper function for action_5. The agent picks up the objects on the ground. The agent has to be in the same cell of the objects to pick them up.
        def function_5():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_5\n')
                f.close()
            wait()
        
        
[6]
Executable: True
Description: This is a wrapper function for action_6. The agent puts down all the objects it is carrying on the ground. The agent will put down the objects in the cell it is currently in.
        def function_6():
            with open('agent_dir/functions/agent_1/plan.txt', 'a') as f:
                f.write('action_6\n')
                f.close()
            wait()
        
        
[7]
Executable: False
Description: The short term goal is to navigate to the nearest parcel and pick it up.
        def function_7():
            global belief_set
            agent = belief_set['agent']
            parcels = belief_set['parcels']
            for parcel in parcels.values():
                if parcel['coordinates'][0] < agent['coordinates'][0]:
                    function_1()
                elif parcel['coordinates'][0] > agent['coordinates'][0]:
                    function_2()
                elif parcel['coordinates'][1] < agent['coordinates'][1]:
                    function_3()
                elif parcel['coordinates'][1] > agent['coordinates'][1]:
                    function_4()
            function_5()
        
[8]
Executable: False
Description: The agent's short term goal is to navigate towards the available parcel, pick it up, and then move towards the delivery cell.
        def function_8():
            global belief_set
            agent = belief_set['agent']
            parcels = belief_set['parcels']
            for parcel_id, parcel in parcels.items():
                if not parcel['carried_by_id']:
                    parcel_coords = parcel['coordinates']
                    while agent['coordinates'] != parcel_coords:
                        if agent['coordinates'][0] < parcel_coords[0]:
                            function_2()
                        elif agent['coordinates'][0] > parcel_coords[0]:
                            function_1()
                        elif agent['coordinates'][1] < parcel_coords[1]:
                            function_4()
                        elif agent['coordinates'][1] > parcel_coords[1]:
                            function_3()
                    function_5()
                    break
            delivery_cell_coords = [cell['cell_coordinates'] for cell in belief_set
                ['map']['grid'] if cell['cell_type'] in ['delivery_cell',
                'double_points_delivery_cell']][0]
            while agent['coordinates'] != delivery_cell_coords:
                if agent['coordinates'][0] < delivery_cell_coords[0]:
                    function_2()
                elif agent['coordinates'][0] > delivery_cell_coords[0]:
                    function_1()
                elif agent['coordinates'][1] < delivery_cell_coords[1]:
                    function_4()
                elif agent['coordinates'][1] > delivery_cell_coords[1]:
                    function_3()
            function_6()
        
[9]
Executable: False
Description: The short term goal is to navigate to an available parcel, pick it up, and then move towards the delivery cell while avoiding entering an infinite loop of actions.
        def function_9():
            global belief_set
            agent = belief_set['agent']
            parcels = belief_set['parcels']
            map = belief_set['map']['grid']
            parcel_coordinates = [parcel['coordinates'] for parcel in parcels.
                values() if parcel['carried_by_id'] is None]
            delivery_coordinates = [cell['cell_coordinates'] for cell in map if 
                cell['cell_type'] in ['delivery_cell', 'double_points_delivery_cell']]
            if not agent['parcels_carried_ids']:
                target_coordinates = parcel_coordinates[0]
            else:
                target_coordinates = delivery_coordinates[0]
            while agent['coordinates'] != target_coordinates:
                if agent['coordinates'][0] > target_coordinates[0]:
                    function_1()
                elif agent['coordinates'][0] < target_coordinates[0]:
                    function_2()
                elif agent['coordinates'][1] > target_coordinates[1]:
                    function_3()
                elif agent['coordinates'][1] < target_coordinates[1]:
                    function_4()
            if not agent['parcels_carried_ids']:
                function_5()
            else:
                function_6()
        
[10]
Executable: False
Description: The short term goal is for the agent to move to the cell with the key and pick it up.
        def function_10():
            global belief_set
            agent = belief_set['agent']
            key = belief_set['keys'][1]
            while agent['coordinates'] != key['coordinates']:
                if agent['coordinates'][0] < key['coordinates'][0]:
                    function_2()
                elif agent['coordinates'][0] > key['coordinates'][0]:
                    function_1()
                elif agent['coordinates'][1] < key['coordinates'][1]:
                    function_4()
                elif agent['coordinates'][1] > key['coordinates'][1]:
                    function_3()
            function_5()
        
[11]
Executable: True
Description: The agent's short term goal is to locate and move to the cell containing the key, and then pick it up.
        def function_11():
            global belief_set
            key_coordinates = belief_set['keys'][1]['coordinates']
            agent_coordinates = belief_set['agent']['coordinates']
            counter = 0
            while agent_coordinates != key_coordinates and counter < 100:
                if agent_coordinates[0] < key_coordinates[0]:
                    function_2()
                elif agent_coordinates[0] > key_coordinates[0]:
                    function_1()
                if agent_coordinates[1] < key_coordinates[1]:
                    function_4()
                elif agent_coordinates[1] > key_coordinates[1]:
                    function_3()
                agent_coordinates = belief_set['agent']['coordinates']
                counter += 1
            if agent_coordinates == key_coordinates:
                function_5()
            else:
                return (
                    'Error: The agent could not reach the key within the maximum number of moves.'
                    )
        
[12]
Executable: True
Description: The short-term goal of the agent is to deliver the parcels it's carrying to the nearest delivery cell.
        def function_12():
            global belief_set
            agent_coords = belief_set['agent']['coordinates']
            delivery_cells = [c['cell_coordinates'] for c in belief_set['map'][
                'grid'] if 'delivery' in c['cell_type']]
            nearest_delivery_cell = min(delivery_cells, key=lambda c: abs(c[0] -
                agent_coords[0]) + abs(c[1] - agent_coords[1]))
            while agent_coords != nearest_delivery_cell:
                if agent_coords[0] < nearest_delivery_cell[0]:
                    function_2()
                elif agent_coords[0] > nearest_delivery_cell[0]:
                    function_1()
                if agent_coords[1] < nearest_delivery_cell[1]:
                    function_4()
                elif agent_coords[1] > nearest_delivery_cell[1]:
                    function_3()
                agent_coords = belief_set['agent']['coordinates']
            function_6()
        
[13]
Executable: False
Description: The agent's short term goal is to locate the nearest parcel, move to it, pick it up and then deliver it to the nearest delivery cell.
        def function_13():
            global belief_set
            parcels = belief_set['parcels']
            agent = belief_set['agent']
            for parcel in parcels:
                if parcels[parcel]['coordinates'] == agent['coordinates']:
                    function_5()
                    function_12()
                    break
                else:
                    if parcels[parcel]['coordinates'][0] > agent['coordinates'][0]:
                        function_2()
                    elif parcels[parcel]['coordinates'][0] < agent['coordinates'][0]:
                        function_1()
                    if parcels[parcel]['coordinates'][1] > agent['coordinates'][1]:
                        function_4()
                    elif parcels[parcel]['coordinates'][1] < agent['coordinates'][1]:
                        function_3()
        
[14]
Executable: False
Description: The short term goal of the agent is to navigate towards the nearest parcel spawn point and pick up any parcels available there.
        def function_14():
            global belief_set
            spawn_points = [cell['cell_coordinates'] for cell in belief_set['map'][
                'grid'] if cell['cell_type'] == 'parcels_spawn']
            if not spawn_points:
                return
            nearest_spawn_point = min(spawn_points, key=lambda x: abs(x[0] -
                belief_set['agent']['coordinates'][0]) + abs(x[1] - belief_set[
                'agent']['coordinates'][1]))
            while belief_set['agent']['coordinates'] != nearest_spawn_point:
                if belief_set['agent']['coordinates'][0] < nearest_spawn_point[0]:
                    function_2()
                elif belief_set['agent']['coordinates'][0] > nearest_spawn_point[0]:
                    function_1()
                elif belief_set['agent']['coordinates'][1] < nearest_spawn_point[1]:
                    function_4()
                elif belief_set['agent']['coordinates'][1] > nearest_spawn_point[1]:
                    function_3()
            function_5()
        
[15]
Executable: False
Description: The short term goal of the agent is to navigate towards the key, pick it up, and then navigate towards the nearest parcel spawn point and pick up any parcels available there. It should then deliver the parcels to the nearest delivery cell. To prevent infinite loops, the agent should stop its current plan if it has not reached its destination after a certain number of steps.
        def function_15():
            global belief_set
            max_steps = 100
            steps = 0
            while belief_set['agent']['coordinates'] != belief_set['keys'][1][
                'coordinates'] and steps < max_steps:
                if belief_set['agent']['coordinates'][0] > belief_set['keys'][1][
                    'coordinates'][0]:
                    function_1()
                elif belief_set['agent']['coordinates'][0] < belief_set['keys'][1][
                    'coordinates'][0]:
                    function_2()
                elif belief_set['agent']['coordinates'][1] > belief_set['keys'][1][
                    'coordinates'][1]:
                    function_3()
                elif belief_set['agent']['coordinates'][1] < belief_set['keys'][1][
                    'coordinates'][1]:
                    function_4()
                steps += 1
            function_5()
            steps = 0
            while belief_set['agent']['coordinates'] != belief_set['map']['grid'][0][
                'cell_coordinates'] and steps < max_steps:
                if belief_set['agent']['coordinates'][0] > belief_set['map']['grid'][0
                    ]['cell_coordinates'][0]:
                    function_1()
                elif belief_set['agent']['coordinates'][0] < belief_set['map']['grid'][
                    0]['cell_coordinates'][0]:
                    function_2()
                elif belief_set['agent']['coordinates'][1] > belief_set['map']['grid'][
                    0]['cell_coordinates'][1]:
                    function_3()
                elif belief_set['agent']['coordinates'][1] < belief_set['map']['grid'][
                    0]['cell_coordinates'][1]:
                    function_4()
                steps += 1
            function_5()
            function_12()
        
